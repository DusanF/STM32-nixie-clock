
Nixie_clock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000381c  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  080038d4  080038d4  000138d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003944  08003944  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003944  08003944  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003944  08003944  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003944  08003944  00013944  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003948  08003948  00013948  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800394c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d8  2000000c  08003958  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000e4  08003958  000200e4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bacf  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002117  00000000  00000000  0002bb03  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a70  00000000  00000000  0002dc20  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000938  00000000  00000000  0002e690  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00015b44  00000000  00000000  0002efc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ae81  00000000  00000000  00044b0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00083e34  00000000  00000000  0004f98d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d37c1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002324  00000000  00000000  000d383c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000000c 	.word	0x2000000c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	080038bc 	.word	0x080038bc

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000010 	.word	0x20000010
 80000fc:	080038bc 	.word	0x080038bc

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f8f0 	bl	80003e8 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__divsi3>:
 8000214:	4603      	mov	r3, r0
 8000216:	430b      	orrs	r3, r1
 8000218:	d47f      	bmi.n	800031a <__divsi3+0x106>
 800021a:	2200      	movs	r2, #0
 800021c:	0843      	lsrs	r3, r0, #1
 800021e:	428b      	cmp	r3, r1
 8000220:	d374      	bcc.n	800030c <__divsi3+0xf8>
 8000222:	0903      	lsrs	r3, r0, #4
 8000224:	428b      	cmp	r3, r1
 8000226:	d35f      	bcc.n	80002e8 <__divsi3+0xd4>
 8000228:	0a03      	lsrs	r3, r0, #8
 800022a:	428b      	cmp	r3, r1
 800022c:	d344      	bcc.n	80002b8 <__divsi3+0xa4>
 800022e:	0b03      	lsrs	r3, r0, #12
 8000230:	428b      	cmp	r3, r1
 8000232:	d328      	bcc.n	8000286 <__divsi3+0x72>
 8000234:	0c03      	lsrs	r3, r0, #16
 8000236:	428b      	cmp	r3, r1
 8000238:	d30d      	bcc.n	8000256 <__divsi3+0x42>
 800023a:	22ff      	movs	r2, #255	; 0xff
 800023c:	0209      	lsls	r1, r1, #8
 800023e:	ba12      	rev	r2, r2
 8000240:	0c03      	lsrs	r3, r0, #16
 8000242:	428b      	cmp	r3, r1
 8000244:	d302      	bcc.n	800024c <__divsi3+0x38>
 8000246:	1212      	asrs	r2, r2, #8
 8000248:	0209      	lsls	r1, r1, #8
 800024a:	d065      	beq.n	8000318 <__divsi3+0x104>
 800024c:	0b03      	lsrs	r3, r0, #12
 800024e:	428b      	cmp	r3, r1
 8000250:	d319      	bcc.n	8000286 <__divsi3+0x72>
 8000252:	e000      	b.n	8000256 <__divsi3+0x42>
 8000254:	0a09      	lsrs	r1, r1, #8
 8000256:	0bc3      	lsrs	r3, r0, #15
 8000258:	428b      	cmp	r3, r1
 800025a:	d301      	bcc.n	8000260 <__divsi3+0x4c>
 800025c:	03cb      	lsls	r3, r1, #15
 800025e:	1ac0      	subs	r0, r0, r3
 8000260:	4152      	adcs	r2, r2
 8000262:	0b83      	lsrs	r3, r0, #14
 8000264:	428b      	cmp	r3, r1
 8000266:	d301      	bcc.n	800026c <__divsi3+0x58>
 8000268:	038b      	lsls	r3, r1, #14
 800026a:	1ac0      	subs	r0, r0, r3
 800026c:	4152      	adcs	r2, r2
 800026e:	0b43      	lsrs	r3, r0, #13
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x64>
 8000274:	034b      	lsls	r3, r1, #13
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b03      	lsrs	r3, r0, #12
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x70>
 8000280:	030b      	lsls	r3, r1, #12
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0ac3      	lsrs	r3, r0, #11
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x7c>
 800028c:	02cb      	lsls	r3, r1, #11
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0a83      	lsrs	r3, r0, #10
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x88>
 8000298:	028b      	lsls	r3, r1, #10
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0a43      	lsrs	r3, r0, #9
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x94>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a03      	lsrs	r3, r0, #8
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0xa0>
 80002b0:	020b      	lsls	r3, r1, #8
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	d2cd      	bcs.n	8000254 <__divsi3+0x40>
 80002b8:	09c3      	lsrs	r3, r0, #7
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d301      	bcc.n	80002c2 <__divsi3+0xae>
 80002be:	01cb      	lsls	r3, r1, #7
 80002c0:	1ac0      	subs	r0, r0, r3
 80002c2:	4152      	adcs	r2, r2
 80002c4:	0983      	lsrs	r3, r0, #6
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d301      	bcc.n	80002ce <__divsi3+0xba>
 80002ca:	018b      	lsls	r3, r1, #6
 80002cc:	1ac0      	subs	r0, r0, r3
 80002ce:	4152      	adcs	r2, r2
 80002d0:	0943      	lsrs	r3, r0, #5
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xc6>
 80002d6:	014b      	lsls	r3, r1, #5
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0903      	lsrs	r3, r0, #4
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xd2>
 80002e2:	010b      	lsls	r3, r1, #4
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	08c3      	lsrs	r3, r0, #3
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xde>
 80002ee:	00cb      	lsls	r3, r1, #3
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0883      	lsrs	r3, r0, #2
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xea>
 80002fa:	008b      	lsls	r3, r1, #2
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0843      	lsrs	r3, r0, #1
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xf6>
 8000306:	004b      	lsls	r3, r1, #1
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	1a41      	subs	r1, r0, r1
 800030e:	d200      	bcs.n	8000312 <__divsi3+0xfe>
 8000310:	4601      	mov	r1, r0
 8000312:	4152      	adcs	r2, r2
 8000314:	4610      	mov	r0, r2
 8000316:	4770      	bx	lr
 8000318:	e05d      	b.n	80003d6 <__divsi3+0x1c2>
 800031a:	0fca      	lsrs	r2, r1, #31
 800031c:	d000      	beq.n	8000320 <__divsi3+0x10c>
 800031e:	4249      	negs	r1, r1
 8000320:	1003      	asrs	r3, r0, #32
 8000322:	d300      	bcc.n	8000326 <__divsi3+0x112>
 8000324:	4240      	negs	r0, r0
 8000326:	4053      	eors	r3, r2
 8000328:	2200      	movs	r2, #0
 800032a:	469c      	mov	ip, r3
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d32d      	bcc.n	800038e <__divsi3+0x17a>
 8000332:	0a03      	lsrs	r3, r0, #8
 8000334:	428b      	cmp	r3, r1
 8000336:	d312      	bcc.n	800035e <__divsi3+0x14a>
 8000338:	22fc      	movs	r2, #252	; 0xfc
 800033a:	0189      	lsls	r1, r1, #6
 800033c:	ba12      	rev	r2, r2
 800033e:	0a03      	lsrs	r3, r0, #8
 8000340:	428b      	cmp	r3, r1
 8000342:	d30c      	bcc.n	800035e <__divsi3+0x14a>
 8000344:	0189      	lsls	r1, r1, #6
 8000346:	1192      	asrs	r2, r2, #6
 8000348:	428b      	cmp	r3, r1
 800034a:	d308      	bcc.n	800035e <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d304      	bcc.n	800035e <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	d03a      	beq.n	80003ce <__divsi3+0x1ba>
 8000358:	1192      	asrs	r2, r2, #6
 800035a:	e000      	b.n	800035e <__divsi3+0x14a>
 800035c:	0989      	lsrs	r1, r1, #6
 800035e:	09c3      	lsrs	r3, r0, #7
 8000360:	428b      	cmp	r3, r1
 8000362:	d301      	bcc.n	8000368 <__divsi3+0x154>
 8000364:	01cb      	lsls	r3, r1, #7
 8000366:	1ac0      	subs	r0, r0, r3
 8000368:	4152      	adcs	r2, r2
 800036a:	0983      	lsrs	r3, r0, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d301      	bcc.n	8000374 <__divsi3+0x160>
 8000370:	018b      	lsls	r3, r1, #6
 8000372:	1ac0      	subs	r0, r0, r3
 8000374:	4152      	adcs	r2, r2
 8000376:	0943      	lsrs	r3, r0, #5
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x16c>
 800037c:	014b      	lsls	r3, r1, #5
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0903      	lsrs	r3, r0, #4
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x178>
 8000388:	010b      	lsls	r3, r1, #4
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	08c3      	lsrs	r3, r0, #3
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x184>
 8000394:	00cb      	lsls	r3, r1, #3
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0883      	lsrs	r3, r0, #2
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x190>
 80003a0:	008b      	lsls	r3, r1, #2
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	d2d9      	bcs.n	800035c <__divsi3+0x148>
 80003a8:	0843      	lsrs	r3, r0, #1
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d301      	bcc.n	80003b2 <__divsi3+0x19e>
 80003ae:	004b      	lsls	r3, r1, #1
 80003b0:	1ac0      	subs	r0, r0, r3
 80003b2:	4152      	adcs	r2, r2
 80003b4:	1a41      	subs	r1, r0, r1
 80003b6:	d200      	bcs.n	80003ba <__divsi3+0x1a6>
 80003b8:	4601      	mov	r1, r0
 80003ba:	4663      	mov	r3, ip
 80003bc:	4152      	adcs	r2, r2
 80003be:	105b      	asrs	r3, r3, #1
 80003c0:	4610      	mov	r0, r2
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x1b4>
 80003c4:	4240      	negs	r0, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d500      	bpl.n	80003cc <__divsi3+0x1b8>
 80003ca:	4249      	negs	r1, r1
 80003cc:	4770      	bx	lr
 80003ce:	4663      	mov	r3, ip
 80003d0:	105b      	asrs	r3, r3, #1
 80003d2:	d300      	bcc.n	80003d6 <__divsi3+0x1c2>
 80003d4:	4240      	negs	r0, r0
 80003d6:	b501      	push	{r0, lr}
 80003d8:	2000      	movs	r0, #0
 80003da:	f000 f805 	bl	80003e8 <__aeabi_idiv0>
 80003de:	bd02      	pop	{r1, pc}

080003e0 <__aeabi_idivmod>:
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d0f8      	beq.n	80003d6 <__divsi3+0x1c2>
 80003e4:	e716      	b.n	8000214 <__divsi3>
 80003e6:	4770      	bx	lr

080003e8 <__aeabi_idiv0>:
 80003e8:	4770      	bx	lr
 80003ea:	46c0      	nop			; (mov r8, r8)

080003ec <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80003ec:	b590      	push	{r4, r7, lr}
 80003ee:	b08b      	sub	sp, #44	; 0x2c
 80003f0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003f2:	2414      	movs	r4, #20
 80003f4:	193b      	adds	r3, r7, r4
 80003f6:	0018      	movs	r0, r3
 80003f8:	2314      	movs	r3, #20
 80003fa:	001a      	movs	r2, r3
 80003fc:	2100      	movs	r1, #0
 80003fe:	f003 fa54 	bl	80038aa <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000402:	4b69      	ldr	r3, [pc, #420]	; (80005a8 <MX_GPIO_Init+0x1bc>)
 8000404:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000406:	4b68      	ldr	r3, [pc, #416]	; (80005a8 <MX_GPIO_Init+0x1bc>)
 8000408:	2104      	movs	r1, #4
 800040a:	430a      	orrs	r2, r1
 800040c:	635a      	str	r2, [r3, #52]	; 0x34
 800040e:	4b66      	ldr	r3, [pc, #408]	; (80005a8 <MX_GPIO_Init+0x1bc>)
 8000410:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000412:	2204      	movs	r2, #4
 8000414:	4013      	ands	r3, r2
 8000416:	613b      	str	r3, [r7, #16]
 8000418:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800041a:	4b63      	ldr	r3, [pc, #396]	; (80005a8 <MX_GPIO_Init+0x1bc>)
 800041c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800041e:	4b62      	ldr	r3, [pc, #392]	; (80005a8 <MX_GPIO_Init+0x1bc>)
 8000420:	2120      	movs	r1, #32
 8000422:	430a      	orrs	r2, r1
 8000424:	635a      	str	r2, [r3, #52]	; 0x34
 8000426:	4b60      	ldr	r3, [pc, #384]	; (80005a8 <MX_GPIO_Init+0x1bc>)
 8000428:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800042a:	2220      	movs	r2, #32
 800042c:	4013      	ands	r3, r2
 800042e:	60fb      	str	r3, [r7, #12]
 8000430:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000432:	4b5d      	ldr	r3, [pc, #372]	; (80005a8 <MX_GPIO_Init+0x1bc>)
 8000434:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000436:	4b5c      	ldr	r3, [pc, #368]	; (80005a8 <MX_GPIO_Init+0x1bc>)
 8000438:	2101      	movs	r1, #1
 800043a:	430a      	orrs	r2, r1
 800043c:	635a      	str	r2, [r3, #52]	; 0x34
 800043e:	4b5a      	ldr	r3, [pc, #360]	; (80005a8 <MX_GPIO_Init+0x1bc>)
 8000440:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000442:	2201      	movs	r2, #1
 8000444:	4013      	ands	r3, r2
 8000446:	60bb      	str	r3, [r7, #8]
 8000448:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800044a:	4b57      	ldr	r3, [pc, #348]	; (80005a8 <MX_GPIO_Init+0x1bc>)
 800044c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800044e:	4b56      	ldr	r3, [pc, #344]	; (80005a8 <MX_GPIO_Init+0x1bc>)
 8000450:	2102      	movs	r1, #2
 8000452:	430a      	orrs	r2, r1
 8000454:	635a      	str	r2, [r3, #52]	; 0x34
 8000456:	4b54      	ldr	r3, [pc, #336]	; (80005a8 <MX_GPIO_Init+0x1bc>)
 8000458:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800045a:	2202      	movs	r2, #2
 800045c:	4013      	ands	r3, r2
 800045e:	607b      	str	r3, [r7, #4]
 8000460:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000462:	4b51      	ldr	r3, [pc, #324]	; (80005a8 <MX_GPIO_Init+0x1bc>)
 8000464:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000466:	4b50      	ldr	r3, [pc, #320]	; (80005a8 <MX_GPIO_Init+0x1bc>)
 8000468:	2108      	movs	r1, #8
 800046a:	430a      	orrs	r2, r1
 800046c:	635a      	str	r2, [r3, #52]	; 0x34
 800046e:	4b4e      	ldr	r3, [pc, #312]	; (80005a8 <MX_GPIO_Init+0x1bc>)
 8000470:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000472:	2208      	movs	r2, #8
 8000474:	4013      	ands	r3, r2
 8000476:	603b      	str	r3, [r7, #0]
 8000478:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, NIX_4A_Pin|NIX_4B_Pin|NIX_4C_Pin|NIX_4D_Pin
 800047a:	494c      	ldr	r1, [pc, #304]	; (80005ac <MX_GPIO_Init+0x1c0>)
 800047c:	23a0      	movs	r3, #160	; 0xa0
 800047e:	05db      	lsls	r3, r3, #23
 8000480:	2201      	movs	r2, #1
 8000482:	0018      	movs	r0, r3
 8000484:	f001 f83d 	bl	8001502 <HAL_GPIO_WritePin>
                          |NIX_3A_Pin|NIX_3B_Pin|NIX_3C_Pin|NIX_3D_Pin
                          |NIX_1D_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, NIX_2A_Pin|NIX_2B_Pin|NIX_2C_Pin|NIX_2D_Pin
 8000488:	4949      	ldr	r1, [pc, #292]	; (80005b0 <MX_GPIO_Init+0x1c4>)
 800048a:	4b4a      	ldr	r3, [pc, #296]	; (80005b4 <MX_GPIO_Init+0x1c8>)
 800048c:	2201      	movs	r2, #1
 800048e:	0018      	movs	r0, r3
 8000490:	f001 f837 	bl	8001502 <HAL_GPIO_WritePin>
                          |NIX_1A_Pin|NIX_1B_Pin|NIX_1C_Pin, GPIO_PIN_SET);

  /*Configure GPIO pins : PC13 PC6 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7;
 8000494:	193b      	adds	r3, r7, r4
 8000496:	2283      	movs	r2, #131	; 0x83
 8000498:	0192      	lsls	r2, r2, #6
 800049a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800049c:	193b      	adds	r3, r7, r4
 800049e:	2203      	movs	r2, #3
 80004a0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004a2:	193b      	adds	r3, r7, r4
 80004a4:	2200      	movs	r2, #0
 80004a6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004a8:	193b      	adds	r3, r7, r4
 80004aa:	4a43      	ldr	r2, [pc, #268]	; (80005b8 <MX_GPIO_Init+0x1cc>)
 80004ac:	0019      	movs	r1, r3
 80004ae:	0010      	movs	r0, r2
 80004b0:	f000 fea6 	bl	8001200 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80004b4:	193b      	adds	r3, r7, r4
 80004b6:	2203      	movs	r2, #3
 80004b8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80004ba:	193b      	adds	r3, r7, r4
 80004bc:	2203      	movs	r2, #3
 80004be:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004c0:	193b      	adds	r3, r7, r4
 80004c2:	2200      	movs	r2, #0
 80004c4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80004c6:	193b      	adds	r3, r7, r4
 80004c8:	4a3c      	ldr	r2, [pc, #240]	; (80005bc <MX_GPIO_Init+0x1d0>)
 80004ca:	0019      	movs	r1, r3
 80004cc:	0010      	movs	r0, r2
 80004ce:	f000 fe97 	bl	8001200 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = NIX_4A_Pin|NIX_4B_Pin|NIX_4C_Pin|NIX_4D_Pin
 80004d2:	193b      	adds	r3, r7, r4
 80004d4:	4a35      	ldr	r2, [pc, #212]	; (80005ac <MX_GPIO_Init+0x1c0>)
 80004d6:	601a      	str	r2, [r3, #0]
                          |NIX_3A_Pin|NIX_3B_Pin|NIX_3C_Pin|NIX_3D_Pin
                          |NIX_1D_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004d8:	193b      	adds	r3, r7, r4
 80004da:	2201      	movs	r2, #1
 80004dc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004de:	193b      	adds	r3, r7, r4
 80004e0:	2200      	movs	r2, #0
 80004e2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80004e4:	193b      	adds	r3, r7, r4
 80004e6:	2201      	movs	r2, #1
 80004e8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004ea:	193a      	adds	r2, r7, r4
 80004ec:	23a0      	movs	r3, #160	; 0xa0
 80004ee:	05db      	lsls	r3, r3, #23
 80004f0:	0011      	movs	r1, r2
 80004f2:	0018      	movs	r0, r3
 80004f4:	f000 fe84 	bl	8001200 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = NIX_2A_Pin|NIX_2B_Pin|NIX_2C_Pin|NIX_2D_Pin
 80004f8:	193b      	adds	r3, r7, r4
 80004fa:	4a2d      	ldr	r2, [pc, #180]	; (80005b0 <MX_GPIO_Init+0x1c4>)
 80004fc:	601a      	str	r2, [r3, #0]
                          |NIX_1A_Pin|NIX_1B_Pin|NIX_1C_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004fe:	193b      	adds	r3, r7, r4
 8000500:	2201      	movs	r2, #1
 8000502:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000504:	193b      	adds	r3, r7, r4
 8000506:	2200      	movs	r2, #0
 8000508:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800050a:	193b      	adds	r3, r7, r4
 800050c:	2201      	movs	r2, #1
 800050e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000510:	193b      	adds	r3, r7, r4
 8000512:	4a28      	ldr	r2, [pc, #160]	; (80005b4 <MX_GPIO_Init+0x1c8>)
 8000514:	0019      	movs	r1, r3
 8000516:	0010      	movs	r0, r2
 8000518:	f000 fe72 	bl	8001200 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 PB3 PB4
                           PB5 PB6 PB7 PB8
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_3|GPIO_PIN_4
 800051c:	193b      	adds	r3, r7, r4
 800051e:	4a28      	ldr	r2, [pc, #160]	; (80005c0 <MX_GPIO_Init+0x1d4>)
 8000520:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000522:	193b      	adds	r3, r7, r4
 8000524:	2203      	movs	r2, #3
 8000526:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000528:	193b      	adds	r3, r7, r4
 800052a:	2200      	movs	r2, #0
 800052c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800052e:	193b      	adds	r3, r7, r4
 8000530:	4a20      	ldr	r2, [pc, #128]	; (80005b4 <MX_GPIO_Init+0x1c8>)
 8000532:	0019      	movs	r1, r3
 8000534:	0010      	movs	r0, r2
 8000536:	f000 fe63 	bl	8001200 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
 800053a:	193b      	adds	r3, r7, r4
 800053c:	2298      	movs	r2, #152	; 0x98
 800053e:	0212      	lsls	r2, r2, #8
 8000540:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000542:	193b      	adds	r3, r7, r4
 8000544:	2203      	movs	r2, #3
 8000546:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000548:	193b      	adds	r3, r7, r4
 800054a:	2200      	movs	r2, #0
 800054c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800054e:	193a      	adds	r2, r7, r4
 8000550:	23a0      	movs	r3, #160	; 0xa0
 8000552:	05db      	lsls	r3, r3, #23
 8000554:	0011      	movs	r1, r2
 8000556:	0018      	movs	r0, r3
 8000558:	f000 fe52 	bl	8001200 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = BTN_B_Pin|BTN_A_Pin;
 800055c:	0021      	movs	r1, r4
 800055e:	187b      	adds	r3, r7, r1
 8000560:	2203      	movs	r2, #3
 8000562:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000564:	187b      	adds	r3, r7, r1
 8000566:	2200      	movs	r2, #0
 8000568:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800056a:	187b      	adds	r3, r7, r1
 800056c:	2201      	movs	r2, #1
 800056e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000570:	000c      	movs	r4, r1
 8000572:	187b      	adds	r3, r7, r1
 8000574:	4a13      	ldr	r2, [pc, #76]	; (80005c4 <MX_GPIO_Init+0x1d8>)
 8000576:	0019      	movs	r1, r3
 8000578:	0010      	movs	r0, r2
 800057a:	f000 fe41 	bl	8001200 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD2 PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800057e:	0021      	movs	r1, r4
 8000580:	187b      	adds	r3, r7, r1
 8000582:	220c      	movs	r2, #12
 8000584:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000586:	187b      	adds	r3, r7, r1
 8000588:	2203      	movs	r2, #3
 800058a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800058c:	187b      	adds	r3, r7, r1
 800058e:	2200      	movs	r2, #0
 8000590:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000592:	187b      	adds	r3, r7, r1
 8000594:	4a0b      	ldr	r2, [pc, #44]	; (80005c4 <MX_GPIO_Init+0x1d8>)
 8000596:	0019      	movs	r1, r3
 8000598:	0010      	movs	r0, r2
 800059a:	f000 fe31 	bl	8001200 <HAL_GPIO_Init>

}
 800059e:	46c0      	nop			; (mov r8, r8)
 80005a0:	46bd      	mov	sp, r7
 80005a2:	b00b      	add	sp, #44	; 0x2c
 80005a4:	bd90      	pop	{r4, r7, pc}
 80005a6:	46c0      	nop			; (mov r8, r8)
 80005a8:	40021000 	.word	0x40021000
 80005ac:	000001ff 	.word	0x000001ff
 80005b0:	0000f007 	.word	0x0000f007
 80005b4:	50000400 	.word	0x50000400
 80005b8:	50000800 	.word	0x50000800
 80005bc:	50001400 	.word	0x50001400
 80005c0:	00000ff8 	.word	0x00000ff8
 80005c4:	50000c00 	.word	0x50000c00

080005c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c8:	b590      	push	{r4, r7, lr}
 80005ca:	b08b      	sub	sp, #44	; 0x2c
 80005cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ce:	f000 fca7 	bl	8000f20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d2:	f000 f955 	bl	8000880 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d6:	f7ff ff09 	bl	80003ec <MX_GPIO_Init>
  MX_RTC_Init();
 80005da:	f000 faf7 	bl	8000bcc <MX_RTC_Init>
  MX_USART1_UART_Init();
 80005de:	f000 fbdb 	bl	8000d98 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_PWREx_EnableBatteryCharging(PWR_BATTERY_CHARGING_RESISTOR_1_5);	//enable Vbat charging (1k5)
 80005e2:	2380      	movs	r3, #128	; 0x80
 80005e4:	009b      	lsls	r3, r3, #2
 80005e6:	0018      	movs	r0, r3
 80005e8:	f000 ffb6 	bl	8001558 <HAL_PWREx_EnableBatteryCharging>
  HAL_RTCEx_SetSmoothCalib(&hrtc, RTC_SMOOTHCALIB_PERIOD_32SEC, RTC_SMOOTHCALIB_PLUSPULSES_RESET, 70);	//kalibracia rtc -66.8ppm
 80005ec:	48a2      	ldr	r0, [pc, #648]	; (8000878 <main+0x2b0>)
 80005ee:	2346      	movs	r3, #70	; 0x46
 80005f0:	2200      	movs	r2, #0
 80005f2:	2100      	movs	r1, #0
 80005f4:	f002 f97c 	bl	80028f0 <HAL_RTCEx_SetSmoothCalib>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  RTC_TimeTypeDef currTime = {0};
 80005f8:	230c      	movs	r3, #12
 80005fa:	18fb      	adds	r3, r7, r3
 80005fc:	0018      	movs	r0, r3
 80005fe:	2314      	movs	r3, #20
 8000600:	001a      	movs	r2, r3
 8000602:	2100      	movs	r1, #0
 8000604:	f003 f951 	bl	80038aa <memset>
  RTC_DateTypeDef currDate = {0};
 8000608:	2308      	movs	r3, #8
 800060a:	18fb      	adds	r3, r7, r3
 800060c:	2200      	movs	r2, #0
 800060e:	601a      	str	r2, [r3, #0]
  uint8_t display[4];
  uint8_t display_old[4]={0};
 8000610:	003b      	movs	r3, r7
 8000612:	2200      	movs	r2, #0
 8000614:	601a      	str	r2, [r3, #0]
  uint8_t old_mins, old_hours=0x25;	//force refresh
 8000616:	2326      	movs	r3, #38	; 0x26
 8000618:	18fb      	adds	r3, r7, r3
 800061a:	2225      	movs	r2, #37	; 0x25
 800061c:	701a      	strb	r2, [r3, #0]

  uint8_t btn_a_cnt=0;
 800061e:	2325      	movs	r3, #37	; 0x25
 8000620:	18fb      	adds	r3, r7, r3
 8000622:	2200      	movs	r2, #0
 8000624:	701a      	strb	r2, [r3, #0]
  uint8_t btn_b_cnt=0;
 8000626:	2324      	movs	r3, #36	; 0x24
 8000628:	18fb      	adds	r3, r7, r3
 800062a:	2200      	movs	r2, #0
 800062c:	701a      	strb	r2, [r3, #0]

  for(uint8_t i=0; i<10; i++){
 800062e:	2323      	movs	r3, #35	; 0x23
 8000630:	18fb      	adds	r3, r7, r3
 8000632:	2200      	movs	r2, #0
 8000634:	701a      	strb	r2, [r3, #0]
 8000636:	e01c      	b.n	8000672 <main+0xaa>
	  display[0] = i;
 8000638:	1d3b      	adds	r3, r7, #4
 800063a:	2423      	movs	r4, #35	; 0x23
 800063c:	193a      	adds	r2, r7, r4
 800063e:	7812      	ldrb	r2, [r2, #0]
 8000640:	701a      	strb	r2, [r3, #0]
	  display[1] = i;
 8000642:	1d3b      	adds	r3, r7, #4
 8000644:	193a      	adds	r2, r7, r4
 8000646:	7812      	ldrb	r2, [r2, #0]
 8000648:	705a      	strb	r2, [r3, #1]
	  display[2] = i;
 800064a:	1d3b      	adds	r3, r7, #4
 800064c:	193a      	adds	r2, r7, r4
 800064e:	7812      	ldrb	r2, [r2, #0]
 8000650:	709a      	strb	r2, [r3, #2]
	  display[3] = i;
 8000652:	1d3b      	adds	r3, r7, #4
 8000654:	193a      	adds	r2, r7, r4
 8000656:	7812      	ldrb	r2, [r2, #0]
 8000658:	70da      	strb	r2, [r3, #3]
	  nixie_display(display);
 800065a:	1d3b      	adds	r3, r7, #4
 800065c:	0018      	movs	r0, r3
 800065e:	f000 f989 	bl	8000974 <nixie_display>
	  HAL_Delay(150);
 8000662:	2096      	movs	r0, #150	; 0x96
 8000664:	f000 fce0 	bl	8001028 <HAL_Delay>
  for(uint8_t i=0; i<10; i++){
 8000668:	193b      	adds	r3, r7, r4
 800066a:	781a      	ldrb	r2, [r3, #0]
 800066c:	193b      	adds	r3, r7, r4
 800066e:	3201      	adds	r2, #1
 8000670:	701a      	strb	r2, [r3, #0]
 8000672:	2323      	movs	r3, #35	; 0x23
 8000674:	18fb      	adds	r3, r7, r3
 8000676:	781b      	ldrb	r3, [r3, #0]
 8000678:	2b09      	cmp	r3, #9
 800067a:	d9dd      	bls.n	8000638 <main+0x70>
  }
  display[0] = 11;
 800067c:	1d3b      	adds	r3, r7, #4
 800067e:	220b      	movs	r2, #11
 8000680:	701a      	strb	r2, [r3, #0]
  display[1] = 11;
 8000682:	1d3b      	adds	r3, r7, #4
 8000684:	220b      	movs	r2, #11
 8000686:	705a      	strb	r2, [r3, #1]
  display[2] = 11;
 8000688:	1d3b      	adds	r3, r7, #4
 800068a:	220b      	movs	r2, #11
 800068c:	709a      	strb	r2, [r3, #2]
  display[3] = 11;
 800068e:	1d3b      	adds	r3, r7, #4
 8000690:	220b      	movs	r2, #11
 8000692:	70da      	strb	r2, [r3, #3]
  nixie_display(display);
 8000694:	1d3b      	adds	r3, r7, #4
 8000696:	0018      	movs	r0, r3
 8000698:	f000 f96c 	bl	8000974 <nixie_display>

  HAL_Delay(500);
 800069c:	23fa      	movs	r3, #250	; 0xfa
 800069e:	005b      	lsls	r3, r3, #1
 80006a0:	0018      	movs	r0, r3
 80006a2:	f000 fcc1 	bl	8001028 <HAL_Delay>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if(HAL_GPIO_ReadPin(BTN_A_GPIO_Port, BTN_A_Pin))
 80006a6:	4b75      	ldr	r3, [pc, #468]	; (800087c <main+0x2b4>)
 80006a8:	2102      	movs	r1, #2
 80006aa:	0018      	movs	r0, r3
 80006ac:	f000 ff0c 	bl	80014c8 <HAL_GPIO_ReadPin>
 80006b0:	1e03      	subs	r3, r0, #0
 80006b2:	d004      	beq.n	80006be <main+0xf6>
		  btn_a_cnt=0;
 80006b4:	2325      	movs	r3, #37	; 0x25
 80006b6:	18fb      	adds	r3, r7, r3
 80006b8:	2200      	movs	r2, #0
 80006ba:	701a      	strb	r2, [r3, #0]
 80006bc:	e00a      	b.n	80006d4 <main+0x10c>
	  else if(btn_a_cnt<6)
 80006be:	2325      	movs	r3, #37	; 0x25
 80006c0:	18fb      	adds	r3, r7, r3
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	2b05      	cmp	r3, #5
 80006c6:	d805      	bhi.n	80006d4 <main+0x10c>
		  btn_a_cnt++;
 80006c8:	2125      	movs	r1, #37	; 0x25
 80006ca:	187b      	adds	r3, r7, r1
 80006cc:	781a      	ldrb	r2, [r3, #0]
 80006ce:	187b      	adds	r3, r7, r1
 80006d0:	3201      	adds	r2, #1
 80006d2:	701a      	strb	r2, [r3, #0]

	  if(HAL_GPIO_ReadPin(BTN_B_GPIO_Port, BTN_B_Pin))
 80006d4:	4b69      	ldr	r3, [pc, #420]	; (800087c <main+0x2b4>)
 80006d6:	2101      	movs	r1, #1
 80006d8:	0018      	movs	r0, r3
 80006da:	f000 fef5 	bl	80014c8 <HAL_GPIO_ReadPin>
 80006de:	1e03      	subs	r3, r0, #0
 80006e0:	d004      	beq.n	80006ec <main+0x124>
		  btn_b_cnt=0;
 80006e2:	2324      	movs	r3, #36	; 0x24
 80006e4:	18fb      	adds	r3, r7, r3
 80006e6:	2200      	movs	r2, #0
 80006e8:	701a      	strb	r2, [r3, #0]
 80006ea:	e00a      	b.n	8000702 <main+0x13a>
	  else if(btn_b_cnt<6)
 80006ec:	2324      	movs	r3, #36	; 0x24
 80006ee:	18fb      	adds	r3, r7, r3
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	2b05      	cmp	r3, #5
 80006f4:	d805      	bhi.n	8000702 <main+0x13a>
		  btn_b_cnt++;
 80006f6:	2124      	movs	r1, #36	; 0x24
 80006f8:	187b      	adds	r3, r7, r1
 80006fa:	781a      	ldrb	r2, [r3, #0]
 80006fc:	187b      	adds	r3, r7, r1
 80006fe:	3201      	adds	r2, #1
 8000700:	701a      	strb	r2, [r3, #0]

	  HAL_RTC_GetTime(&hrtc, &currTime, RTC_FORMAT_BCD);
 8000702:	230c      	movs	r3, #12
 8000704:	18f9      	adds	r1, r7, r3
 8000706:	4b5c      	ldr	r3, [pc, #368]	; (8000878 <main+0x2b0>)
 8000708:	2201      	movs	r2, #1
 800070a:	0018      	movs	r0, r3
 800070c:	f001 febe 	bl	800248c <HAL_RTC_GetTime>
	  HAL_RTC_GetDate(&hrtc, &currDate, RTC_FORMAT_BCD);
 8000710:	2308      	movs	r3, #8
 8000712:	18f9      	adds	r1, r7, r3
 8000714:	4b58      	ldr	r3, [pc, #352]	; (8000878 <main+0x2b0>)
 8000716:	2201      	movs	r2, #1
 8000718:	0018      	movs	r0, r3
 800071a:	f001 ffa5 	bl	8002668 <HAL_RTC_GetDate>




	  if(btn_b_cnt == 1 || btn_b_cnt == 6){
 800071e:	2324      	movs	r3, #36	; 0x24
 8000720:	18fb      	adds	r3, r7, r3
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	2b01      	cmp	r3, #1
 8000726:	d004      	beq.n	8000732 <main+0x16a>
 8000728:	2324      	movs	r3, #36	; 0x24
 800072a:	18fb      	adds	r3, r7, r3
 800072c:	781b      	ldrb	r3, [r3, #0]
 800072e:	2b06      	cmp	r3, #6
 8000730:	d11d      	bne.n	800076e <main+0x1a6>
		  currTime.Minutes = RTC_ByteToBcd2((RTC_Bcd2ToByte(currTime.Minutes) + 1) % 60);
 8000732:	240c      	movs	r4, #12
 8000734:	193b      	adds	r3, r7, r4
 8000736:	785b      	ldrb	r3, [r3, #1]
 8000738:	0018      	movs	r0, r3
 800073a:	f002 f8bc 	bl	80028b6 <RTC_Bcd2ToByte>
 800073e:	0003      	movs	r3, r0
 8000740:	3301      	adds	r3, #1
 8000742:	213c      	movs	r1, #60	; 0x3c
 8000744:	0018      	movs	r0, r3
 8000746:	f7ff fe4b 	bl	80003e0 <__aeabi_idivmod>
 800074a:	000b      	movs	r3, r1
 800074c:	b2db      	uxtb	r3, r3
 800074e:	0018      	movs	r0, r3
 8000750:	f002 f888 	bl	8002864 <RTC_ByteToBcd2>
 8000754:	0003      	movs	r3, r0
 8000756:	001a      	movs	r2, r3
 8000758:	193b      	adds	r3, r7, r4
 800075a:	705a      	strb	r2, [r3, #1]
		  currTime.Seconds = 0;
 800075c:	193b      	adds	r3, r7, r4
 800075e:	2200      	movs	r2, #0
 8000760:	709a      	strb	r2, [r3, #2]
		  HAL_RTC_SetTime(&hrtc, &currTime, RTC_FORMAT_BCD);
 8000762:	1939      	adds	r1, r7, r4
 8000764:	4b44      	ldr	r3, [pc, #272]	; (8000878 <main+0x2b0>)
 8000766:	2201      	movs	r2, #1
 8000768:	0018      	movs	r0, r3
 800076a:	f001 fde7 	bl	800233c <HAL_RTC_SetTime>
	  }
	  if(btn_a_cnt == 1 || btn_a_cnt == 6){
 800076e:	2325      	movs	r3, #37	; 0x25
 8000770:	18fb      	adds	r3, r7, r3
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	2b01      	cmp	r3, #1
 8000776:	d004      	beq.n	8000782 <main+0x1ba>
 8000778:	2325      	movs	r3, #37	; 0x25
 800077a:	18fb      	adds	r3, r7, r3
 800077c:	781b      	ldrb	r3, [r3, #0]
 800077e:	2b06      	cmp	r3, #6
 8000780:	d11d      	bne.n	80007be <main+0x1f6>
		  currTime.Hours = RTC_ByteToBcd2((RTC_Bcd2ToByte(currTime.Hours) + 1) % 24);
 8000782:	240c      	movs	r4, #12
 8000784:	193b      	adds	r3, r7, r4
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	0018      	movs	r0, r3
 800078a:	f002 f894 	bl	80028b6 <RTC_Bcd2ToByte>
 800078e:	0003      	movs	r3, r0
 8000790:	3301      	adds	r3, #1
 8000792:	2118      	movs	r1, #24
 8000794:	0018      	movs	r0, r3
 8000796:	f7ff fe23 	bl	80003e0 <__aeabi_idivmod>
 800079a:	000b      	movs	r3, r1
 800079c:	b2db      	uxtb	r3, r3
 800079e:	0018      	movs	r0, r3
 80007a0:	f002 f860 	bl	8002864 <RTC_ByteToBcd2>
 80007a4:	0003      	movs	r3, r0
 80007a6:	001a      	movs	r2, r3
 80007a8:	193b      	adds	r3, r7, r4
 80007aa:	701a      	strb	r2, [r3, #0]
		  currTime.Seconds = 0;
 80007ac:	193b      	adds	r3, r7, r4
 80007ae:	2200      	movs	r2, #0
 80007b0:	709a      	strb	r2, [r3, #2]
		  HAL_RTC_SetTime(&hrtc, &currTime, RTC_FORMAT_BCD);
 80007b2:	1939      	adds	r1, r7, r4
 80007b4:	4b30      	ldr	r3, [pc, #192]	; (8000878 <main+0x2b0>)
 80007b6:	2201      	movs	r2, #1
 80007b8:	0018      	movs	r0, r3
 80007ba:	f001 fdbf 	bl	800233c <HAL_RTC_SetTime>
	  }
#ifdef FORMAT_12H
	  currTime.Hours = RTC_ByteToBcd2(((RTC_Bcd2ToByte(currTime.Hours)) % 12) + 1);
#endif

	  if(old_mins != currTime.Minutes || old_hours != currTime.Hours){
 80007be:	230c      	movs	r3, #12
 80007c0:	18fb      	adds	r3, r7, r3
 80007c2:	785b      	ldrb	r3, [r3, #1]
 80007c4:	2227      	movs	r2, #39	; 0x27
 80007c6:	18ba      	adds	r2, r7, r2
 80007c8:	7812      	ldrb	r2, [r2, #0]
 80007ca:	429a      	cmp	r2, r3
 80007cc:	d107      	bne.n	80007de <main+0x216>
 80007ce:	230c      	movs	r3, #12
 80007d0:	18fb      	adds	r3, r7, r3
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	2226      	movs	r2, #38	; 0x26
 80007d6:	18ba      	adds	r2, r7, r2
 80007d8:	7812      	ldrb	r2, [r2, #0]
 80007da:	429a      	cmp	r2, r3
 80007dc:	d047      	beq.n	800086e <main+0x2a6>
		  display[0] = (currTime.Hours & 0xF0) ? (currTime.Hours >> 4) : (0xF);
 80007de:	230c      	movs	r3, #12
 80007e0:	18fb      	adds	r3, r7, r3
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	001a      	movs	r2, r3
 80007e6:	23f0      	movs	r3, #240	; 0xf0
 80007e8:	4013      	ands	r3, r2
 80007ea:	d005      	beq.n	80007f8 <main+0x230>
 80007ec:	230c      	movs	r3, #12
 80007ee:	18fb      	adds	r3, r7, r3
 80007f0:	781b      	ldrb	r3, [r3, #0]
 80007f2:	091b      	lsrs	r3, r3, #4
 80007f4:	b2da      	uxtb	r2, r3
 80007f6:	e000      	b.n	80007fa <main+0x232>
 80007f8:	220f      	movs	r2, #15
 80007fa:	1d3b      	adds	r3, r7, #4
 80007fc:	701a      	strb	r2, [r3, #0]
		  display[1] = currTime.Hours & 0xF;
 80007fe:	210c      	movs	r1, #12
 8000800:	187b      	adds	r3, r7, r1
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	220f      	movs	r2, #15
 8000806:	4013      	ands	r3, r2
 8000808:	b2da      	uxtb	r2, r3
 800080a:	1d3b      	adds	r3, r7, #4
 800080c:	705a      	strb	r2, [r3, #1]
		  display[2] = currTime.Minutes >> 4;
 800080e:	187b      	adds	r3, r7, r1
 8000810:	785b      	ldrb	r3, [r3, #1]
 8000812:	091b      	lsrs	r3, r3, #4
 8000814:	b2da      	uxtb	r2, r3
 8000816:	1d3b      	adds	r3, r7, #4
 8000818:	709a      	strb	r2, [r3, #2]
		  display[3] = currTime.Minutes & 0xF;
 800081a:	187b      	adds	r3, r7, r1
 800081c:	785b      	ldrb	r3, [r3, #1]
 800081e:	220f      	movs	r2, #15
 8000820:	4013      	ands	r3, r2
 8000822:	b2da      	uxtb	r2, r3
 8000824:	1d3b      	adds	r3, r7, #4
 8000826:	70da      	strb	r2, [r3, #3]

		  if(btn_a_cnt == 0 && btn_b_cnt == 0)
 8000828:	2325      	movs	r3, #37	; 0x25
 800082a:	18fb      	adds	r3, r7, r3
 800082c:	781b      	ldrb	r3, [r3, #0]
 800082e:	2b00      	cmp	r3, #0
 8000830:	d10a      	bne.n	8000848 <main+0x280>
 8000832:	2324      	movs	r3, #36	; 0x24
 8000834:	18fb      	adds	r3, r7, r3
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	2b00      	cmp	r3, #0
 800083a:	d105      	bne.n	8000848 <main+0x280>
			  nixie_cpp(display, display_old);
 800083c:	003a      	movs	r2, r7
 800083e:	1d3b      	adds	r3, r7, #4
 8000840:	0011      	movs	r1, r2
 8000842:	0018      	movs	r0, r3
 8000844:	f000 f90c 	bl	8000a60 <nixie_cpp>

		  nixie_display(display);
 8000848:	1d3b      	adds	r3, r7, #4
 800084a:	0018      	movs	r0, r3
 800084c:	f000 f892 	bl	8000974 <nixie_display>

		  memcpy(display_old, display, 4);
 8000850:	003b      	movs	r3, r7
 8000852:	1d3a      	adds	r2, r7, #4
 8000854:	6812      	ldr	r2, [r2, #0]
 8000856:	601a      	str	r2, [r3, #0]
		  old_mins = currTime.Minutes;
 8000858:	2327      	movs	r3, #39	; 0x27
 800085a:	18fb      	adds	r3, r7, r3
 800085c:	210c      	movs	r1, #12
 800085e:	187a      	adds	r2, r7, r1
 8000860:	7852      	ldrb	r2, [r2, #1]
 8000862:	701a      	strb	r2, [r3, #0]
		  old_hours = currTime.Hours;
 8000864:	2326      	movs	r3, #38	; 0x26
 8000866:	18fb      	adds	r3, r7, r3
 8000868:	187a      	adds	r2, r7, r1
 800086a:	7812      	ldrb	r2, [r2, #0]
 800086c:	701a      	strb	r2, [r3, #0]
	  }
	  HAL_Delay(100);
 800086e:	2064      	movs	r0, #100	; 0x64
 8000870:	f000 fbda 	bl	8001028 <HAL_Delay>
	  if(HAL_GPIO_ReadPin(BTN_A_GPIO_Port, BTN_A_Pin))
 8000874:	e717      	b.n	80006a6 <main+0xde>
 8000876:	46c0      	nop			; (mov r8, r8)
 8000878:	20000028 	.word	0x20000028
 800087c:	50000c00 	.word	0x50000c00

08000880 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000880:	b590      	push	{r4, r7, lr}
 8000882:	b099      	sub	sp, #100	; 0x64
 8000884:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000886:	242c      	movs	r4, #44	; 0x2c
 8000888:	193b      	adds	r3, r7, r4
 800088a:	0018      	movs	r0, r3
 800088c:	2334      	movs	r3, #52	; 0x34
 800088e:	001a      	movs	r2, r3
 8000890:	2100      	movs	r1, #0
 8000892:	f003 f80a 	bl	80038aa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000896:	231c      	movs	r3, #28
 8000898:	18fb      	adds	r3, r7, r3
 800089a:	0018      	movs	r0, r3
 800089c:	2310      	movs	r3, #16
 800089e:	001a      	movs	r2, r3
 80008a0:	2100      	movs	r1, #0
 80008a2:	f003 f802 	bl	80038aa <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008a6:	003b      	movs	r3, r7
 80008a8:	0018      	movs	r0, r3
 80008aa:	231c      	movs	r3, #28
 80008ac:	001a      	movs	r2, r3
 80008ae:	2100      	movs	r1, #0
 80008b0:	f002 fffb 	bl	80038aa <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008b4:	2380      	movs	r3, #128	; 0x80
 80008b6:	009b      	lsls	r3, r3, #2
 80008b8:	0018      	movs	r0, r3
 80008ba:	f000 fe67 	bl	800158c <HAL_PWREx_ControlVoltageScaling>
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80008be:	f000 fe3d 	bl	800153c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80008c2:	4b27      	ldr	r3, [pc, #156]	; (8000960 <SystemClock_Config+0xe0>)
 80008c4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80008c6:	4b26      	ldr	r3, [pc, #152]	; (8000960 <SystemClock_Config+0xe0>)
 80008c8:	2118      	movs	r1, #24
 80008ca:	438a      	bics	r2, r1
 80008cc:	65da      	str	r2, [r3, #92]	; 0x5c
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 80008ce:	0021      	movs	r1, r4
 80008d0:	187b      	adds	r3, r7, r1
 80008d2:	2206      	movs	r2, #6
 80008d4:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80008d6:	187b      	adds	r3, r7, r1
 80008d8:	2201      	movs	r2, #1
 80008da:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008dc:	187b      	adds	r3, r7, r1
 80008de:	2280      	movs	r2, #128	; 0x80
 80008e0:	0052      	lsls	r2, r2, #1
 80008e2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV4;
 80008e4:	187b      	adds	r3, r7, r1
 80008e6:	2280      	movs	r2, #128	; 0x80
 80008e8:	0152      	lsls	r2, r2, #5
 80008ea:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008ec:	187b      	adds	r3, r7, r1
 80008ee:	2240      	movs	r2, #64	; 0x40
 80008f0:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80008f2:	187b      	adds	r3, r7, r1
 80008f4:	2200      	movs	r2, #0
 80008f6:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008f8:	187b      	adds	r3, r7, r1
 80008fa:	0018      	movs	r0, r3
 80008fc:	f000 fe92 	bl	8001624 <HAL_RCC_OscConfig>
 8000900:	1e03      	subs	r3, r0, #0
 8000902:	d001      	beq.n	8000908 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000904:	f000 f830 	bl	8000968 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000908:	211c      	movs	r1, #28
 800090a:	187b      	adds	r3, r7, r1
 800090c:	2207      	movs	r2, #7
 800090e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000910:	187b      	adds	r3, r7, r1
 8000912:	2200      	movs	r2, #0
 8000914:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000916:	187b      	adds	r3, r7, r1
 8000918:	2200      	movs	r2, #0
 800091a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800091c:	187b      	adds	r3, r7, r1
 800091e:	2200      	movs	r2, #0
 8000920:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000922:	187b      	adds	r3, r7, r1
 8000924:	2100      	movs	r1, #0
 8000926:	0018      	movs	r0, r3
 8000928:	f001 f992 	bl	8001c50 <HAL_RCC_ClockConfig>
 800092c:	1e03      	subs	r3, r0, #0
 800092e:	d001      	beq.n	8000934 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000930:	f000 f81a 	bl	8000968 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1;
 8000934:	003b      	movs	r3, r7
 8000936:	4a0b      	ldr	r2, [pc, #44]	; (8000964 <SystemClock_Config+0xe4>)
 8000938:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800093a:	003b      	movs	r3, r7
 800093c:	2200      	movs	r2, #0
 800093e:	605a      	str	r2, [r3, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000940:	003b      	movs	r3, r7
 8000942:	2280      	movs	r2, #128	; 0x80
 8000944:	0052      	lsls	r2, r2, #1
 8000946:	619a      	str	r2, [r3, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000948:	003b      	movs	r3, r7
 800094a:	0018      	movs	r0, r3
 800094c:	f001 fb2a 	bl	8001fa4 <HAL_RCCEx_PeriphCLKConfig>
 8000950:	1e03      	subs	r3, r0, #0
 8000952:	d001      	beq.n	8000958 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8000954:	f000 f808 	bl	8000968 <Error_Handler>
  }
}
 8000958:	46c0      	nop			; (mov r8, r8)
 800095a:	46bd      	mov	sp, r7
 800095c:	b019      	add	sp, #100	; 0x64
 800095e:	bd90      	pop	{r4, r7, pc}
 8000960:	40021000 	.word	0x40021000
 8000964:	00020001 	.word	0x00020001

08000968 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800096c:	46c0      	nop			; (mov r8, r8)
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
	...

08000974 <nixie_display>:
#include "main.h"

#define GPIOA_MASK 0x01FF
#define GPIOB_MASK 0xF007

void nixie_display(uint8_t *disp){
 8000974:	b580      	push	{r7, lr}
 8000976:	b084      	sub	sp, #16
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
	uint32_t tmp_a=0, tmp_b=0;
 800097c:	2300      	movs	r3, #0
 800097e:	60fb      	str	r3, [r7, #12]
 8000980:	2300      	movs	r3, #0
 8000982:	60bb      	str	r3, [r7, #8]

	disp[0] &= 0xF;
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	781b      	ldrb	r3, [r3, #0]
 8000988:	220f      	movs	r2, #15
 800098a:	4013      	ands	r3, r2
 800098c:	b2da      	uxtb	r2, r3
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	701a      	strb	r2, [r3, #0]
	disp[1] &= 0xF;
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	3301      	adds	r3, #1
 8000996:	781a      	ldrb	r2, [r3, #0]
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	3301      	adds	r3, #1
 800099c:	210f      	movs	r1, #15
 800099e:	400a      	ands	r2, r1
 80009a0:	b2d2      	uxtb	r2, r2
 80009a2:	701a      	strb	r2, [r3, #0]
	disp[2] &= 0xF;
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	3302      	adds	r3, #2
 80009a8:	781a      	ldrb	r2, [r3, #0]
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	3302      	adds	r3, #2
 80009ae:	210f      	movs	r1, #15
 80009b0:	400a      	ands	r2, r1
 80009b2:	b2d2      	uxtb	r2, r2
 80009b4:	701a      	strb	r2, [r3, #0]
	disp[3] &= 0xF;
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	3303      	adds	r3, #3
 80009ba:	781a      	ldrb	r2, [r3, #0]
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	3303      	adds	r3, #3
 80009c0:	210f      	movs	r1, #15
 80009c2:	400a      	ands	r2, r1
 80009c4:	b2d2      	uxtb	r2, r2
 80009c6:	701a      	strb	r2, [r3, #0]

	/*if(first_hiding && !disp[0]){
		tmp_a = (disp[3]) | (disp[2]<<4) | (0x8 << 5);
		tmp_b = (disp[1] & 0x7) | ((disp[1] & 0x8) << 9) | (0x7 << 13);
	}else{*/
		tmp_a = (disp[3]) | (disp[2]<<4) | ((disp[0] & 0x8) << 5);
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	3303      	adds	r3, #3
 80009cc:	781b      	ldrb	r3, [r3, #0]
 80009ce:	001a      	movs	r2, r3
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	3302      	adds	r3, #2
 80009d4:	781b      	ldrb	r3, [r3, #0]
 80009d6:	011b      	lsls	r3, r3, #4
 80009d8:	431a      	orrs	r2, r3
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	781b      	ldrb	r3, [r3, #0]
 80009de:	0159      	lsls	r1, r3, #5
 80009e0:	2380      	movs	r3, #128	; 0x80
 80009e2:	005b      	lsls	r3, r3, #1
 80009e4:	400b      	ands	r3, r1
 80009e6:	4313      	orrs	r3, r2
 80009e8:	60fb      	str	r3, [r7, #12]
		tmp_b = (disp[1] & 0x7) | ((disp[1] & 0x8) << 9) | ((disp[0] & 0x7) << 13);
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	3301      	adds	r3, #1
 80009ee:	781b      	ldrb	r3, [r3, #0]
 80009f0:	001a      	movs	r2, r3
 80009f2:	2307      	movs	r3, #7
 80009f4:	401a      	ands	r2, r3
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	3301      	adds	r3, #1
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	0259      	lsls	r1, r3, #9
 80009fe:	2380      	movs	r3, #128	; 0x80
 8000a00:	015b      	lsls	r3, r3, #5
 8000a02:	400b      	ands	r3, r1
 8000a04:	431a      	orrs	r2, r3
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	781b      	ldrb	r3, [r3, #0]
 8000a0a:	035b      	lsls	r3, r3, #13
 8000a0c:	041b      	lsls	r3, r3, #16
 8000a0e:	0c1b      	lsrs	r3, r3, #16
 8000a10:	4313      	orrs	r3, r2
 8000a12:	60bb      	str	r3, [r7, #8]
	//}

	tmp_a |= (~tmp_a) << 16;
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	43db      	mvns	r3, r3
 8000a18:	041b      	lsls	r3, r3, #16
 8000a1a:	68fa      	ldr	r2, [r7, #12]
 8000a1c:	4313      	orrs	r3, r2
 8000a1e:	60fb      	str	r3, [r7, #12]
	tmp_b |= (~tmp_b) << 16;
 8000a20:	68bb      	ldr	r3, [r7, #8]
 8000a22:	43db      	mvns	r3, r3
 8000a24:	041b      	lsls	r3, r3, #16
 8000a26:	68ba      	ldr	r2, [r7, #8]
 8000a28:	4313      	orrs	r3, r2
 8000a2a:	60bb      	str	r3, [r7, #8]
	tmp_a &= GPIOA_MASK | (GPIOA_MASK<<16);
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	4a09      	ldr	r2, [pc, #36]	; (8000a54 <nixie_display+0xe0>)
 8000a30:	4013      	ands	r3, r2
 8000a32:	60fb      	str	r3, [r7, #12]
	tmp_b &= GPIOB_MASK | (GPIOB_MASK<<16);
 8000a34:	68bb      	ldr	r3, [r7, #8]
 8000a36:	4a08      	ldr	r2, [pc, #32]	; (8000a58 <nixie_display+0xe4>)
 8000a38:	4013      	ands	r3, r2
 8000a3a:	60bb      	str	r3, [r7, #8]

	GPIOA->BSRR = tmp_a;
 8000a3c:	23a0      	movs	r3, #160	; 0xa0
 8000a3e:	05db      	lsls	r3, r3, #23
 8000a40:	68fa      	ldr	r2, [r7, #12]
 8000a42:	619a      	str	r2, [r3, #24]
	GPIOB->BSRR = tmp_b;
 8000a44:	4b05      	ldr	r3, [pc, #20]	; (8000a5c <nixie_display+0xe8>)
 8000a46:	68ba      	ldr	r2, [r7, #8]
 8000a48:	619a      	str	r2, [r3, #24]
}
 8000a4a:	46c0      	nop			; (mov r8, r8)
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	b004      	add	sp, #16
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	46c0      	nop			; (mov r8, r8)
 8000a54:	01ff01ff 	.word	0x01ff01ff
 8000a58:	f007f007 	.word	0xf007f007
 8000a5c:	50000400 	.word	0x50000400

08000a60 <nixie_cpp>:

void nixie_cpp(uint8_t *start, uint8_t *end){	//cathode poisoning prevention
 8000a60:	b590      	push	{r4, r7, lr}
 8000a62:	b087      	sub	sp, #28
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
 8000a68:	6039      	str	r1, [r7, #0]
	uint8_t disp[4];
	memcpy(disp, start, 4);
 8000a6a:	240c      	movs	r4, #12
 8000a6c:	193a      	adds	r2, r7, r4
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	0010      	movs	r0, r2
 8000a72:	0019      	movs	r1, r3
 8000a74:	2304      	movs	r3, #4
 8000a76:	001a      	movs	r2, r3
 8000a78:	f002 ff0e 	bl	8003898 <memcpy>
	if(disp[0] == 0)
 8000a7c:	193b      	adds	r3, r7, r4
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d103      	bne.n	8000a8c <nixie_cpp+0x2c>
		disp[0] = 0xF;
 8000a84:	230c      	movs	r3, #12
 8000a86:	18fb      	adds	r3, r7, r3
 8000a88:	220f      	movs	r2, #15
 8000a8a:	701a      	strb	r2, [r3, #0]

	for(uint_fast8_t i=0; i<9; i++){
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	617b      	str	r3, [r7, #20]
 8000a90:	e094      	b.n	8000bbc <nixie_cpp+0x15c>
		for(uint_fast8_t j=(start[0]?0:1); j<4; j++){
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	781b      	ldrb	r3, [r3, #0]
 8000a96:	425a      	negs	r2, r3
 8000a98:	4153      	adcs	r3, r2
 8000a9a:	b2db      	uxtb	r3, r3
 8000a9c:	613b      	str	r3, [r7, #16]
 8000a9e:	e07e      	b.n	8000b9e <nixie_cpp+0x13e>
			disp[j]++;
 8000aa0:	240c      	movs	r4, #12
 8000aa2:	193a      	adds	r2, r7, r4
 8000aa4:	693b      	ldr	r3, [r7, #16]
 8000aa6:	18d3      	adds	r3, r2, r3
 8000aa8:	781b      	ldrb	r3, [r3, #0]
 8000aaa:	3301      	adds	r3, #1
 8000aac:	b2d9      	uxtb	r1, r3
 8000aae:	193a      	adds	r2, r7, r4
 8000ab0:	693b      	ldr	r3, [r7, #16]
 8000ab2:	18d3      	adds	r3, r2, r3
 8000ab4:	1c0a      	adds	r2, r1, #0
 8000ab6:	701a      	strb	r2, [r3, #0]
			disp[j] %= 10;
 8000ab8:	193a      	adds	r2, r7, r4
 8000aba:	693b      	ldr	r3, [r7, #16]
 8000abc:	18d3      	adds	r3, r2, r3
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	210a      	movs	r1, #10
 8000ac2:	0018      	movs	r0, r3
 8000ac4:	f7ff fba2 	bl	800020c <__aeabi_uidivmod>
 8000ac8:	000b      	movs	r3, r1
 8000aca:	b2d9      	uxtb	r1, r3
 8000acc:	193a      	adds	r2, r7, r4
 8000ace:	693b      	ldr	r3, [r7, #16]
 8000ad0:	18d3      	adds	r3, r2, r3
 8000ad2:	1c0a      	adds	r2, r1, #0
 8000ad4:	701a      	strb	r2, [r3, #0]
			if(disp[j] == end[j] || disp[j] == start[j]){
 8000ad6:	193a      	adds	r2, r7, r4
 8000ad8:	693b      	ldr	r3, [r7, #16]
 8000ada:	18d3      	adds	r3, r2, r3
 8000adc:	781a      	ldrb	r2, [r3, #0]
 8000ade:	6839      	ldr	r1, [r7, #0]
 8000ae0:	693b      	ldr	r3, [r7, #16]
 8000ae2:	18cb      	adds	r3, r1, r3
 8000ae4:	781b      	ldrb	r3, [r3, #0]
 8000ae6:	429a      	cmp	r2, r3
 8000ae8:	d00a      	beq.n	8000b00 <nixie_cpp+0xa0>
 8000aea:	230c      	movs	r3, #12
 8000aec:	18fa      	adds	r2, r7, r3
 8000aee:	693b      	ldr	r3, [r7, #16]
 8000af0:	18d3      	adds	r3, r2, r3
 8000af2:	781a      	ldrb	r2, [r3, #0]
 8000af4:	6879      	ldr	r1, [r7, #4]
 8000af6:	693b      	ldr	r3, [r7, #16]
 8000af8:	18cb      	adds	r3, r1, r3
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	429a      	cmp	r2, r3
 8000afe:	d11a      	bne.n	8000b36 <nixie_cpp+0xd6>
				disp[j]++;
 8000b00:	240c      	movs	r4, #12
 8000b02:	193a      	adds	r2, r7, r4
 8000b04:	693b      	ldr	r3, [r7, #16]
 8000b06:	18d3      	adds	r3, r2, r3
 8000b08:	781b      	ldrb	r3, [r3, #0]
 8000b0a:	3301      	adds	r3, #1
 8000b0c:	b2d9      	uxtb	r1, r3
 8000b0e:	193a      	adds	r2, r7, r4
 8000b10:	693b      	ldr	r3, [r7, #16]
 8000b12:	18d3      	adds	r3, r2, r3
 8000b14:	1c0a      	adds	r2, r1, #0
 8000b16:	701a      	strb	r2, [r3, #0]
				disp[j] %= 10;
 8000b18:	193a      	adds	r2, r7, r4
 8000b1a:	693b      	ldr	r3, [r7, #16]
 8000b1c:	18d3      	adds	r3, r2, r3
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	210a      	movs	r1, #10
 8000b22:	0018      	movs	r0, r3
 8000b24:	f7ff fb72 	bl	800020c <__aeabi_uidivmod>
 8000b28:	000b      	movs	r3, r1
 8000b2a:	b2d9      	uxtb	r1, r3
 8000b2c:	193a      	adds	r2, r7, r4
 8000b2e:	693b      	ldr	r3, [r7, #16]
 8000b30:	18d3      	adds	r3, r2, r3
 8000b32:	1c0a      	adds	r2, r1, #0
 8000b34:	701a      	strb	r2, [r3, #0]
			}
			if(disp[j] == end[j] || disp[j] == start[j]){
 8000b36:	230c      	movs	r3, #12
 8000b38:	18fa      	adds	r2, r7, r3
 8000b3a:	693b      	ldr	r3, [r7, #16]
 8000b3c:	18d3      	adds	r3, r2, r3
 8000b3e:	781a      	ldrb	r2, [r3, #0]
 8000b40:	6839      	ldr	r1, [r7, #0]
 8000b42:	693b      	ldr	r3, [r7, #16]
 8000b44:	18cb      	adds	r3, r1, r3
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	429a      	cmp	r2, r3
 8000b4a:	d00a      	beq.n	8000b62 <nixie_cpp+0x102>
 8000b4c:	230c      	movs	r3, #12
 8000b4e:	18fa      	adds	r2, r7, r3
 8000b50:	693b      	ldr	r3, [r7, #16]
 8000b52:	18d3      	adds	r3, r2, r3
 8000b54:	781a      	ldrb	r2, [r3, #0]
 8000b56:	6879      	ldr	r1, [r7, #4]
 8000b58:	693b      	ldr	r3, [r7, #16]
 8000b5a:	18cb      	adds	r3, r1, r3
 8000b5c:	781b      	ldrb	r3, [r3, #0]
 8000b5e:	429a      	cmp	r2, r3
 8000b60:	d11a      	bne.n	8000b98 <nixie_cpp+0x138>
				disp[j]++;
 8000b62:	240c      	movs	r4, #12
 8000b64:	193a      	adds	r2, r7, r4
 8000b66:	693b      	ldr	r3, [r7, #16]
 8000b68:	18d3      	adds	r3, r2, r3
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	3301      	adds	r3, #1
 8000b6e:	b2d9      	uxtb	r1, r3
 8000b70:	193a      	adds	r2, r7, r4
 8000b72:	693b      	ldr	r3, [r7, #16]
 8000b74:	18d3      	adds	r3, r2, r3
 8000b76:	1c0a      	adds	r2, r1, #0
 8000b78:	701a      	strb	r2, [r3, #0]
				disp[j] %= 10;
 8000b7a:	193a      	adds	r2, r7, r4
 8000b7c:	693b      	ldr	r3, [r7, #16]
 8000b7e:	18d3      	adds	r3, r2, r3
 8000b80:	781b      	ldrb	r3, [r3, #0]
 8000b82:	210a      	movs	r1, #10
 8000b84:	0018      	movs	r0, r3
 8000b86:	f7ff fb41 	bl	800020c <__aeabi_uidivmod>
 8000b8a:	000b      	movs	r3, r1
 8000b8c:	b2d9      	uxtb	r1, r3
 8000b8e:	193a      	adds	r2, r7, r4
 8000b90:	693b      	ldr	r3, [r7, #16]
 8000b92:	18d3      	adds	r3, r2, r3
 8000b94:	1c0a      	adds	r2, r1, #0
 8000b96:	701a      	strb	r2, [r3, #0]
		for(uint_fast8_t j=(start[0]?0:1); j<4; j++){
 8000b98:	693b      	ldr	r3, [r7, #16]
 8000b9a:	3301      	adds	r3, #1
 8000b9c:	613b      	str	r3, [r7, #16]
 8000b9e:	693b      	ldr	r3, [r7, #16]
 8000ba0:	2b03      	cmp	r3, #3
 8000ba2:	d800      	bhi.n	8000ba6 <nixie_cpp+0x146>
 8000ba4:	e77c      	b.n	8000aa0 <nixie_cpp+0x40>
			}
		}
		nixie_display(disp);
 8000ba6:	230c      	movs	r3, #12
 8000ba8:	18fb      	adds	r3, r7, r3
 8000baa:	0018      	movs	r0, r3
 8000bac:	f7ff fee2 	bl	8000974 <nixie_display>
		//nixie_display(disp, start[0]<1);
		HAL_Delay(75);
 8000bb0:	204b      	movs	r0, #75	; 0x4b
 8000bb2:	f000 fa39 	bl	8001028 <HAL_Delay>
	for(uint_fast8_t i=0; i<9; i++){
 8000bb6:	697b      	ldr	r3, [r7, #20]
 8000bb8:	3301      	adds	r3, #1
 8000bba:	617b      	str	r3, [r7, #20]
 8000bbc:	697b      	ldr	r3, [r7, #20]
 8000bbe:	2b08      	cmp	r3, #8
 8000bc0:	d800      	bhi.n	8000bc4 <nixie_cpp+0x164>
 8000bc2:	e766      	b.n	8000a92 <nixie_cpp+0x32>
	}
}
 8000bc4:	46c0      	nop			; (mov r8, r8)
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	b007      	add	sp, #28
 8000bca:	bd90      	pop	{r4, r7, pc}

08000bcc <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b086      	sub	sp, #24
 8000bd0:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef sTime = {0};
 8000bd2:	1d3b      	adds	r3, r7, #4
 8000bd4:	0018      	movs	r0, r3
 8000bd6:	2314      	movs	r3, #20
 8000bd8:	001a      	movs	r2, r3
 8000bda:	2100      	movs	r1, #0
 8000bdc:	f002 fe65 	bl	80038aa <memset>
  RTC_DateTypeDef sDate = {0};
 8000be0:	003b      	movs	r3, r7
 8000be2:	2200      	movs	r2, #0
 8000be4:	601a      	str	r2, [r3, #0]

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000be6:	4b30      	ldr	r3, [pc, #192]	; (8000ca8 <MX_RTC_Init+0xdc>)
 8000be8:	4a30      	ldr	r2, [pc, #192]	; (8000cac <MX_RTC_Init+0xe0>)
 8000bea:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000bec:	4b2e      	ldr	r3, [pc, #184]	; (8000ca8 <MX_RTC_Init+0xdc>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 8000bf2:	4b2d      	ldr	r3, [pc, #180]	; (8000ca8 <MX_RTC_Init+0xdc>)
 8000bf4:	227f      	movs	r2, #127	; 0x7f
 8000bf6:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 8000bf8:	4b2b      	ldr	r3, [pc, #172]	; (8000ca8 <MX_RTC_Init+0xdc>)
 8000bfa:	22ff      	movs	r2, #255	; 0xff
 8000bfc:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000bfe:	4b2a      	ldr	r3, [pc, #168]	; (8000ca8 <MX_RTC_Init+0xdc>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000c04:	4b28      	ldr	r3, [pc, #160]	; (8000ca8 <MX_RTC_Init+0xdc>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000c0a:	4b27      	ldr	r3, [pc, #156]	; (8000ca8 <MX_RTC_Init+0xdc>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000c10:	4b25      	ldr	r3, [pc, #148]	; (8000ca8 <MX_RTC_Init+0xdc>)
 8000c12:	2280      	movs	r2, #128	; 0x80
 8000c14:	05d2      	lsls	r2, r2, #23
 8000c16:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000c18:	4b23      	ldr	r3, [pc, #140]	; (8000ca8 <MX_RTC_Init+0xdc>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000c1e:	4b22      	ldr	r3, [pc, #136]	; (8000ca8 <MX_RTC_Init+0xdc>)
 8000c20:	0018      	movs	r0, r3
 8000c22:	f001 faf5 	bl	8002210 <HAL_RTC_Init>
 8000c26:	1e03      	subs	r3, r0, #0
 8000c28:	d001      	beq.n	8000c2e <MX_RTC_Init+0x62>
  {
    Error_Handler();
 8000c2a:	f7ff fe9d 	bl	8000968 <Error_Handler>
  }

  /* USER CODE BEGIN Check_RTC_BKUP */

  if(hrtc.Instance->ICSR & RTC_ICSR_INITS_Msk)
 8000c2e:	4b1e      	ldr	r3, [pc, #120]	; (8000ca8 <MX_RTC_Init+0xdc>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	68db      	ldr	r3, [r3, #12]
 8000c34:	2210      	movs	r2, #16
 8000c36:	4013      	ands	r3, r2
 8000c38:	d132      	bne.n	8000ca0 <MX_RTC_Init+0xd4>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000c3a:	1d3b      	adds	r3, r7, #4
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 8000c40:	1d3b      	adds	r3, r7, #4
 8000c42:	2200      	movs	r2, #0
 8000c44:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 8000c46:	1d3b      	adds	r3, r7, #4
 8000c48:	2200      	movs	r2, #0
 8000c4a:	709a      	strb	r2, [r3, #2]
  sTime.SubSeconds = 0x0;
 8000c4c:	1d3b      	adds	r3, r7, #4
 8000c4e:	2200      	movs	r2, #0
 8000c50:	605a      	str	r2, [r3, #4]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000c52:	1d3b      	adds	r3, r7, #4
 8000c54:	2200      	movs	r2, #0
 8000c56:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000c58:	1d3b      	adds	r3, r7, #4
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000c5e:	1d39      	adds	r1, r7, #4
 8000c60:	4b11      	ldr	r3, [pc, #68]	; (8000ca8 <MX_RTC_Init+0xdc>)
 8000c62:	2201      	movs	r2, #1
 8000c64:	0018      	movs	r0, r3
 8000c66:	f001 fb69 	bl	800233c <HAL_RTC_SetTime>
 8000c6a:	1e03      	subs	r3, r0, #0
 8000c6c:	d001      	beq.n	8000c72 <MX_RTC_Init+0xa6>
  {
    Error_Handler();
 8000c6e:	f7ff fe7b 	bl	8000968 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000c72:	003b      	movs	r3, r7
 8000c74:	2201      	movs	r2, #1
 8000c76:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000c78:	003b      	movs	r3, r7
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 8000c7e:	003b      	movs	r3, r7
 8000c80:	2201      	movs	r2, #1
 8000c82:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x1;
 8000c84:	003b      	movs	r3, r7
 8000c86:	2201      	movs	r2, #1
 8000c88:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000c8a:	0039      	movs	r1, r7
 8000c8c:	4b06      	ldr	r3, [pc, #24]	; (8000ca8 <MX_RTC_Init+0xdc>)
 8000c8e:	2201      	movs	r2, #1
 8000c90:	0018      	movs	r0, r3
 8000c92:	f001 fc57 	bl	8002544 <HAL_RTC_SetDate>
 8000c96:	1e03      	subs	r3, r0, #0
 8000c98:	d003      	beq.n	8000ca2 <MX_RTC_Init+0xd6>
  {
    Error_Handler();
 8000c9a:	f7ff fe65 	bl	8000968 <Error_Handler>
 8000c9e:	e000      	b.n	8000ca2 <MX_RTC_Init+0xd6>
	  return;
 8000ca0:	46c0      	nop			; (mov r8, r8)
  }

}
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	b006      	add	sp, #24
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	20000028 	.word	0x20000028
 8000cac:	40002800 	.word	0x40002800

08000cb0 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b084      	sub	sp, #16
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a0d      	ldr	r2, [pc, #52]	; (8000cf4 <HAL_RTC_MspInit+0x44>)
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d114      	bne.n	8000cec <HAL_RTC_MspInit+0x3c>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000cc2:	4b0d      	ldr	r3, [pc, #52]	; (8000cf8 <HAL_RTC_MspInit+0x48>)
 8000cc4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000cc6:	4b0c      	ldr	r3, [pc, #48]	; (8000cf8 <HAL_RTC_MspInit+0x48>)
 8000cc8:	2180      	movs	r1, #128	; 0x80
 8000cca:	0209      	lsls	r1, r1, #8
 8000ccc:	430a      	orrs	r2, r1
 8000cce:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000cd0:	4b09      	ldr	r3, [pc, #36]	; (8000cf8 <HAL_RTC_MspInit+0x48>)
 8000cd2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000cd4:	4b08      	ldr	r3, [pc, #32]	; (8000cf8 <HAL_RTC_MspInit+0x48>)
 8000cd6:	2180      	movs	r1, #128	; 0x80
 8000cd8:	00c9      	lsls	r1, r1, #3
 8000cda:	430a      	orrs	r2, r1
 8000cdc:	63da      	str	r2, [r3, #60]	; 0x3c
 8000cde:	4b06      	ldr	r3, [pc, #24]	; (8000cf8 <HAL_RTC_MspInit+0x48>)
 8000ce0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000ce2:	2380      	movs	r3, #128	; 0x80
 8000ce4:	00db      	lsls	r3, r3, #3
 8000ce6:	4013      	ands	r3, r2
 8000ce8:	60fb      	str	r3, [r7, #12]
 8000cea:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000cec:	46c0      	nop			; (mov r8, r8)
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	b004      	add	sp, #16
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	40002800 	.word	0x40002800
 8000cf8:	40021000 	.word	0x40021000

08000cfc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d02:	4b11      	ldr	r3, [pc, #68]	; (8000d48 <HAL_MspInit+0x4c>)
 8000d04:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d06:	4b10      	ldr	r3, [pc, #64]	; (8000d48 <HAL_MspInit+0x4c>)
 8000d08:	2101      	movs	r1, #1
 8000d0a:	430a      	orrs	r2, r1
 8000d0c:	641a      	str	r2, [r3, #64]	; 0x40
 8000d0e:	4b0e      	ldr	r3, [pc, #56]	; (8000d48 <HAL_MspInit+0x4c>)
 8000d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d12:	2201      	movs	r2, #1
 8000d14:	4013      	ands	r3, r2
 8000d16:	607b      	str	r3, [r7, #4]
 8000d18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d1a:	4b0b      	ldr	r3, [pc, #44]	; (8000d48 <HAL_MspInit+0x4c>)
 8000d1c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000d1e:	4b0a      	ldr	r3, [pc, #40]	; (8000d48 <HAL_MspInit+0x4c>)
 8000d20:	2180      	movs	r1, #128	; 0x80
 8000d22:	0549      	lsls	r1, r1, #21
 8000d24:	430a      	orrs	r2, r1
 8000d26:	63da      	str	r2, [r3, #60]	; 0x3c
 8000d28:	4b07      	ldr	r3, [pc, #28]	; (8000d48 <HAL_MspInit+0x4c>)
 8000d2a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000d2c:	2380      	movs	r3, #128	; 0x80
 8000d2e:	055b      	lsls	r3, r3, #21
 8000d30:	4013      	ands	r3, r2
 8000d32:	603b      	str	r3, [r7, #0]
 8000d34:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8000d36:	23c0      	movs	r3, #192	; 0xc0
 8000d38:	00db      	lsls	r3, r3, #3
 8000d3a:	0018      	movs	r0, r3
 8000d3c:	f000 f996 	bl	800106c <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d40:	46c0      	nop			; (mov r8, r8)
 8000d42:	46bd      	mov	sp, r7
 8000d44:	b002      	add	sp, #8
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	40021000 	.word	0x40021000

08000d4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000d50:	46c0      	nop			; (mov r8, r8)
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}

08000d56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d56:	b580      	push	{r7, lr}
 8000d58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d5a:	e7fe      	b.n	8000d5a <HardFault_Handler+0x4>

08000d5c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000d60:	46c0      	nop			; (mov r8, r8)
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}

08000d66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d66:	b580      	push	{r7, lr}
 8000d68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d6a:	46c0      	nop			; (mov r8, r8)
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}

08000d70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d74:	f000 f93e 	bl	8000ff4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d78:	46c0      	nop			; (mov r8, r8)
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
	...

08000d80 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d84:	4b03      	ldr	r3, [pc, #12]	; (8000d94 <SystemInit+0x14>)
 8000d86:	2280      	movs	r2, #128	; 0x80
 8000d88:	0512      	lsls	r2, r2, #20
 8000d8a:	609a      	str	r2, [r3, #8]
#endif
}
 8000d8c:	46c0      	nop			; (mov r8, r8)
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	46c0      	nop			; (mov r8, r8)
 8000d94:	e000ed00 	.word	0xe000ed00

08000d98 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8000d9c:	4b23      	ldr	r3, [pc, #140]	; (8000e2c <MX_USART1_UART_Init+0x94>)
 8000d9e:	4a24      	ldr	r2, [pc, #144]	; (8000e30 <MX_USART1_UART_Init+0x98>)
 8000da0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000da2:	4b22      	ldr	r3, [pc, #136]	; (8000e2c <MX_USART1_UART_Init+0x94>)
 8000da4:	22e1      	movs	r2, #225	; 0xe1
 8000da6:	0252      	lsls	r2, r2, #9
 8000da8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000daa:	4b20      	ldr	r3, [pc, #128]	; (8000e2c <MX_USART1_UART_Init+0x94>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000db0:	4b1e      	ldr	r3, [pc, #120]	; (8000e2c <MX_USART1_UART_Init+0x94>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000db6:	4b1d      	ldr	r3, [pc, #116]	; (8000e2c <MX_USART1_UART_Init+0x94>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000dbc:	4b1b      	ldr	r3, [pc, #108]	; (8000e2c <MX_USART1_UART_Init+0x94>)
 8000dbe:	220c      	movs	r2, #12
 8000dc0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dc2:	4b1a      	ldr	r3, [pc, #104]	; (8000e2c <MX_USART1_UART_Init+0x94>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dc8:	4b18      	ldr	r3, [pc, #96]	; (8000e2c <MX_USART1_UART_Init+0x94>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000dce:	4b17      	ldr	r3, [pc, #92]	; (8000e2c <MX_USART1_UART_Init+0x94>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000dd4:	4b15      	ldr	r3, [pc, #84]	; (8000e2c <MX_USART1_UART_Init+0x94>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000dda:	4b14      	ldr	r3, [pc, #80]	; (8000e2c <MX_USART1_UART_Init+0x94>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000de0:	4b12      	ldr	r3, [pc, #72]	; (8000e2c <MX_USART1_UART_Init+0x94>)
 8000de2:	0018      	movs	r0, r3
 8000de4:	f001 fde6 	bl	80029b4 <HAL_UART_Init>
 8000de8:	1e03      	subs	r3, r0, #0
 8000dea:	d001      	beq.n	8000df0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000dec:	f7ff fdbc 	bl	8000968 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000df0:	4b0e      	ldr	r3, [pc, #56]	; (8000e2c <MX_USART1_UART_Init+0x94>)
 8000df2:	2100      	movs	r1, #0
 8000df4:	0018      	movs	r0, r3
 8000df6:	f002 fc3f 	bl	8003678 <HAL_UARTEx_SetTxFifoThreshold>
 8000dfa:	1e03      	subs	r3, r0, #0
 8000dfc:	d001      	beq.n	8000e02 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000dfe:	f7ff fdb3 	bl	8000968 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e02:	4b0a      	ldr	r3, [pc, #40]	; (8000e2c <MX_USART1_UART_Init+0x94>)
 8000e04:	2100      	movs	r1, #0
 8000e06:	0018      	movs	r0, r3
 8000e08:	f002 fc76 	bl	80036f8 <HAL_UARTEx_SetRxFifoThreshold>
 8000e0c:	1e03      	subs	r3, r0, #0
 8000e0e:	d001      	beq.n	8000e14 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000e10:	f7ff fdaa 	bl	8000968 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000e14:	4b05      	ldr	r3, [pc, #20]	; (8000e2c <MX_USART1_UART_Init+0x94>)
 8000e16:	0018      	movs	r0, r3
 8000e18:	f002 fbf4 	bl	8003604 <HAL_UARTEx_DisableFifoMode>
 8000e1c:	1e03      	subs	r3, r0, #0
 8000e1e:	d001      	beq.n	8000e24 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000e20:	f7ff fda2 	bl	8000968 <Error_Handler>
  }

}
 8000e24:	46c0      	nop			; (mov r8, r8)
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	46c0      	nop			; (mov r8, r8)
 8000e2c:	20000054 	.word	0x20000054
 8000e30:	40013800 	.word	0x40013800

08000e34 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b08a      	sub	sp, #40	; 0x28
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e3c:	2314      	movs	r3, #20
 8000e3e:	18fb      	adds	r3, r7, r3
 8000e40:	0018      	movs	r0, r3
 8000e42:	2314      	movs	r3, #20
 8000e44:	001a      	movs	r2, r3
 8000e46:	2100      	movs	r1, #0
 8000e48:	f002 fd2f 	bl	80038aa <memset>
  if(uartHandle->Instance==USART1)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a1c      	ldr	r2, [pc, #112]	; (8000ec4 <HAL_UART_MspInit+0x90>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d131      	bne.n	8000eba <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e56:	4b1c      	ldr	r3, [pc, #112]	; (8000ec8 <HAL_UART_MspInit+0x94>)
 8000e58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e5a:	4b1b      	ldr	r3, [pc, #108]	; (8000ec8 <HAL_UART_MspInit+0x94>)
 8000e5c:	2180      	movs	r1, #128	; 0x80
 8000e5e:	01c9      	lsls	r1, r1, #7
 8000e60:	430a      	orrs	r2, r1
 8000e62:	641a      	str	r2, [r3, #64]	; 0x40
 8000e64:	4b18      	ldr	r3, [pc, #96]	; (8000ec8 <HAL_UART_MspInit+0x94>)
 8000e66:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e68:	2380      	movs	r3, #128	; 0x80
 8000e6a:	01db      	lsls	r3, r3, #7
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	613b      	str	r3, [r7, #16]
 8000e70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e72:	4b15      	ldr	r3, [pc, #84]	; (8000ec8 <HAL_UART_MspInit+0x94>)
 8000e74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e76:	4b14      	ldr	r3, [pc, #80]	; (8000ec8 <HAL_UART_MspInit+0x94>)
 8000e78:	2101      	movs	r1, #1
 8000e7a:	430a      	orrs	r2, r1
 8000e7c:	635a      	str	r2, [r3, #52]	; 0x34
 8000e7e:	4b12      	ldr	r3, [pc, #72]	; (8000ec8 <HAL_UART_MspInit+0x94>)
 8000e80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e82:	2201      	movs	r2, #1
 8000e84:	4013      	ands	r3, r2
 8000e86:	60fb      	str	r3, [r7, #12]
 8000e88:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000e8a:	2114      	movs	r1, #20
 8000e8c:	187b      	adds	r3, r7, r1
 8000e8e:	22c0      	movs	r2, #192	; 0xc0
 8000e90:	00d2      	lsls	r2, r2, #3
 8000e92:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e94:	187b      	adds	r3, r7, r1
 8000e96:	2202      	movs	r2, #2
 8000e98:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9a:	187b      	adds	r3, r7, r1
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea0:	187b      	adds	r3, r7, r1
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000ea6:	187b      	adds	r3, r7, r1
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eac:	187a      	adds	r2, r7, r1
 8000eae:	23a0      	movs	r3, #160	; 0xa0
 8000eb0:	05db      	lsls	r3, r3, #23
 8000eb2:	0011      	movs	r1, r2
 8000eb4:	0018      	movs	r0, r3
 8000eb6:	f000 f9a3 	bl	8001200 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000eba:	46c0      	nop			; (mov r8, r8)
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	b00a      	add	sp, #40	; 0x28
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	46c0      	nop			; (mov r8, r8)
 8000ec4:	40013800 	.word	0x40013800
 8000ec8:	40021000 	.word	0x40021000

08000ecc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ecc:	480d      	ldr	r0, [pc, #52]	; (8000f04 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ece:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000ed0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000ed2:	e003      	b.n	8000edc <LoopCopyDataInit>

08000ed4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000ed4:	4b0c      	ldr	r3, [pc, #48]	; (8000f08 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8000ed6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000ed8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000eda:	3104      	adds	r1, #4

08000edc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000edc:	480b      	ldr	r0, [pc, #44]	; (8000f0c <LoopForever+0xa>)
  ldr r3, =_edata
 8000ede:	4b0c      	ldr	r3, [pc, #48]	; (8000f10 <LoopForever+0xe>)
  adds r2, r0, r1
 8000ee0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000ee2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000ee4:	d3f6      	bcc.n	8000ed4 <CopyDataInit>
  ldr r2, =_sbss
 8000ee6:	4a0b      	ldr	r2, [pc, #44]	; (8000f14 <LoopForever+0x12>)
  b LoopFillZerobss
 8000ee8:	e002      	b.n	8000ef0 <LoopFillZerobss>

08000eea <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000eea:	2300      	movs	r3, #0
  str  r3, [r2]
 8000eec:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000eee:	3204      	adds	r2, #4

08000ef0 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8000ef0:	4b09      	ldr	r3, [pc, #36]	; (8000f18 <LoopForever+0x16>)
  cmp r2, r3
 8000ef2:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000ef4:	d3f9      	bcc.n	8000eea <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000ef6:	f7ff ff43 	bl	8000d80 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000efa:	f002 fca9 	bl	8003850 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000efe:	f7ff fb63 	bl	80005c8 <main>

08000f02 <LoopForever>:

LoopForever:
    b LoopForever
 8000f02:	e7fe      	b.n	8000f02 <LoopForever>
  ldr   r0, =_estack
 8000f04:	20009000 	.word	0x20009000
  ldr r3, =_sidata
 8000f08:	0800394c 	.word	0x0800394c
  ldr r0, =_sdata
 8000f0c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000f10:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8000f14:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8000f18:	200000e4 	.word	0x200000e4

08000f1c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f1c:	e7fe      	b.n	8000f1c <ADC1_IRQHandler>
	...

08000f20 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f26:	1dfb      	adds	r3, r7, #7
 8000f28:	2200      	movs	r2, #0
 8000f2a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f2c:	4b0b      	ldr	r3, [pc, #44]	; (8000f5c <HAL_Init+0x3c>)
 8000f2e:	681a      	ldr	r2, [r3, #0]
 8000f30:	4b0a      	ldr	r3, [pc, #40]	; (8000f5c <HAL_Init+0x3c>)
 8000f32:	2180      	movs	r1, #128	; 0x80
 8000f34:	0049      	lsls	r1, r1, #1
 8000f36:	430a      	orrs	r2, r1
 8000f38:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f3a:	2000      	movs	r0, #0
 8000f3c:	f000 f810 	bl	8000f60 <HAL_InitTick>
 8000f40:	1e03      	subs	r3, r0, #0
 8000f42:	d003      	beq.n	8000f4c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000f44:	1dfb      	adds	r3, r7, #7
 8000f46:	2201      	movs	r2, #1
 8000f48:	701a      	strb	r2, [r3, #0]
 8000f4a:	e001      	b.n	8000f50 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000f4c:	f7ff fed6 	bl	8000cfc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f50:	1dfb      	adds	r3, r7, #7
 8000f52:	781b      	ldrb	r3, [r3, #0]
}
 8000f54:	0018      	movs	r0, r3
 8000f56:	46bd      	mov	sp, r7
 8000f58:	b002      	add	sp, #8
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	40022000 	.word	0x40022000

08000f60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f60:	b590      	push	{r4, r7, lr}
 8000f62:	b085      	sub	sp, #20
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f68:	230f      	movs	r3, #15
 8000f6a:	18fb      	adds	r3, r7, r3
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	701a      	strb	r2, [r3, #0]

  if (uwTickFreq != 0U)
 8000f70:	4b1d      	ldr	r3, [pc, #116]	; (8000fe8 <HAL_InitTick+0x88>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d02b      	beq.n	8000fd0 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /uwTickFreq)) == 0U)
 8000f78:	4b1c      	ldr	r3, [pc, #112]	; (8000fec <HAL_InitTick+0x8c>)
 8000f7a:	681c      	ldr	r4, [r3, #0]
 8000f7c:	4b1a      	ldr	r3, [pc, #104]	; (8000fe8 <HAL_InitTick+0x88>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	0019      	movs	r1, r3
 8000f82:	23fa      	movs	r3, #250	; 0xfa
 8000f84:	0098      	lsls	r0, r3, #2
 8000f86:	f7ff f8bb 	bl	8000100 <__udivsi3>
 8000f8a:	0003      	movs	r3, r0
 8000f8c:	0019      	movs	r1, r3
 8000f8e:	0020      	movs	r0, r4
 8000f90:	f7ff f8b6 	bl	8000100 <__udivsi3>
 8000f94:	0003      	movs	r3, r0
 8000f96:	0018      	movs	r0, r3
 8000f98:	f000 f925 	bl	80011e6 <HAL_SYSTICK_Config>
 8000f9c:	1e03      	subs	r3, r0, #0
 8000f9e:	d112      	bne.n	8000fc6 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	2b03      	cmp	r3, #3
 8000fa4:	d80a      	bhi.n	8000fbc <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fa6:	6879      	ldr	r1, [r7, #4]
 8000fa8:	2301      	movs	r3, #1
 8000faa:	425b      	negs	r3, r3
 8000fac:	2200      	movs	r2, #0
 8000fae:	0018      	movs	r0, r3
 8000fb0:	f000 f904 	bl	80011bc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fb4:	4b0e      	ldr	r3, [pc, #56]	; (8000ff0 <HAL_InitTick+0x90>)
 8000fb6:	687a      	ldr	r2, [r7, #4]
 8000fb8:	601a      	str	r2, [r3, #0]
 8000fba:	e00d      	b.n	8000fd8 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000fbc:	230f      	movs	r3, #15
 8000fbe:	18fb      	adds	r3, r7, r3
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	701a      	strb	r2, [r3, #0]
 8000fc4:	e008      	b.n	8000fd8 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000fc6:	230f      	movs	r3, #15
 8000fc8:	18fb      	adds	r3, r7, r3
 8000fca:	2201      	movs	r2, #1
 8000fcc:	701a      	strb	r2, [r3, #0]
 8000fce:	e003      	b.n	8000fd8 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000fd0:	230f      	movs	r3, #15
 8000fd2:	18fb      	adds	r3, r7, r3
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000fd8:	230f      	movs	r3, #15
 8000fda:	18fb      	adds	r3, r7, r3
 8000fdc:	781b      	ldrb	r3, [r3, #0]
}
 8000fde:	0018      	movs	r0, r3
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	b005      	add	sp, #20
 8000fe4:	bd90      	pop	{r4, r7, pc}
 8000fe6:	46c0      	nop			; (mov r8, r8)
 8000fe8:	20000008 	.word	0x20000008
 8000fec:	20000000 	.word	0x20000000
 8000ff0:	20000004 	.word	0x20000004

08000ff4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ff8:	4b04      	ldr	r3, [pc, #16]	; (800100c <HAL_IncTick+0x18>)
 8000ffa:	681a      	ldr	r2, [r3, #0]
 8000ffc:	4b04      	ldr	r3, [pc, #16]	; (8001010 <HAL_IncTick+0x1c>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	18d2      	adds	r2, r2, r3
 8001002:	4b02      	ldr	r3, [pc, #8]	; (800100c <HAL_IncTick+0x18>)
 8001004:	601a      	str	r2, [r3, #0]
}
 8001006:	46c0      	nop			; (mov r8, r8)
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	200000e0 	.word	0x200000e0
 8001010:	20000008 	.word	0x20000008

08001014 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
  return uwTick;
 8001018:	4b02      	ldr	r3, [pc, #8]	; (8001024 <HAL_GetTick+0x10>)
 800101a:	681b      	ldr	r3, [r3, #0]
}
 800101c:	0018      	movs	r0, r3
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	46c0      	nop			; (mov r8, r8)
 8001024:	200000e0 	.word	0x200000e0

08001028 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b084      	sub	sp, #16
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001030:	f7ff fff0 	bl	8001014 <HAL_GetTick>
 8001034:	0003      	movs	r3, r0
 8001036:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	3301      	adds	r3, #1
 8001040:	d004      	beq.n	800104c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001042:	4b09      	ldr	r3, [pc, #36]	; (8001068 <HAL_Delay+0x40>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	68fa      	ldr	r2, [r7, #12]
 8001048:	18d3      	adds	r3, r2, r3
 800104a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800104c:	46c0      	nop			; (mov r8, r8)
 800104e:	f7ff ffe1 	bl	8001014 <HAL_GetTick>
 8001052:	0002      	movs	r2, r0
 8001054:	68bb      	ldr	r3, [r7, #8]
 8001056:	1ad3      	subs	r3, r2, r3
 8001058:	68fa      	ldr	r2, [r7, #12]
 800105a:	429a      	cmp	r2, r3
 800105c:	d8f7      	bhi.n	800104e <HAL_Delay+0x26>
  {
  }
}
 800105e:	46c0      	nop			; (mov r8, r8)
 8001060:	46bd      	mov	sp, r7
 8001062:	b004      	add	sp, #16
 8001064:	bd80      	pop	{r7, pc}
 8001066:	46c0      	nop			; (mov r8, r8)
 8001068:	20000008 	.word	0x20000008

0800106c <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8001074:	4b06      	ldr	r3, [pc, #24]	; (8001090 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a06      	ldr	r2, [pc, #24]	; (8001094 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 800107a:	4013      	ands	r3, r2
 800107c:	0019      	movs	r1, r3
 800107e:	4b04      	ldr	r3, [pc, #16]	; (8001090 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8001080:	687a      	ldr	r2, [r7, #4]
 8001082:	430a      	orrs	r2, r1
 8001084:	601a      	str	r2, [r3, #0]
}
 8001086:	46c0      	nop			; (mov r8, r8)
 8001088:	46bd      	mov	sp, r7
 800108a:	b002      	add	sp, #8
 800108c:	bd80      	pop	{r7, pc}
 800108e:	46c0      	nop			; (mov r8, r8)
 8001090:	40010000 	.word	0x40010000
 8001094:	fffff9ff 	.word	0xfffff9ff

08001098 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001098:	b590      	push	{r4, r7, lr}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
 800109e:	0002      	movs	r2, r0
 80010a0:	6039      	str	r1, [r7, #0]
 80010a2:	1dfb      	adds	r3, r7, #7
 80010a4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80010a6:	1dfb      	adds	r3, r7, #7
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	2b7f      	cmp	r3, #127	; 0x7f
 80010ac:	d828      	bhi.n	8001100 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010ae:	4a2f      	ldr	r2, [pc, #188]	; (800116c <__NVIC_SetPriority+0xd4>)
 80010b0:	1dfb      	adds	r3, r7, #7
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	b25b      	sxtb	r3, r3
 80010b6:	089b      	lsrs	r3, r3, #2
 80010b8:	33c0      	adds	r3, #192	; 0xc0
 80010ba:	009b      	lsls	r3, r3, #2
 80010bc:	589b      	ldr	r3, [r3, r2]
 80010be:	1dfa      	adds	r2, r7, #7
 80010c0:	7812      	ldrb	r2, [r2, #0]
 80010c2:	0011      	movs	r1, r2
 80010c4:	2203      	movs	r2, #3
 80010c6:	400a      	ands	r2, r1
 80010c8:	00d2      	lsls	r2, r2, #3
 80010ca:	21ff      	movs	r1, #255	; 0xff
 80010cc:	4091      	lsls	r1, r2
 80010ce:	000a      	movs	r2, r1
 80010d0:	43d2      	mvns	r2, r2
 80010d2:	401a      	ands	r2, r3
 80010d4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	019b      	lsls	r3, r3, #6
 80010da:	22ff      	movs	r2, #255	; 0xff
 80010dc:	401a      	ands	r2, r3
 80010de:	1dfb      	adds	r3, r7, #7
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	0018      	movs	r0, r3
 80010e4:	2303      	movs	r3, #3
 80010e6:	4003      	ands	r3, r0
 80010e8:	00db      	lsls	r3, r3, #3
 80010ea:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010ec:	481f      	ldr	r0, [pc, #124]	; (800116c <__NVIC_SetPriority+0xd4>)
 80010ee:	1dfb      	adds	r3, r7, #7
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	b25b      	sxtb	r3, r3
 80010f4:	089b      	lsrs	r3, r3, #2
 80010f6:	430a      	orrs	r2, r1
 80010f8:	33c0      	adds	r3, #192	; 0xc0
 80010fa:	009b      	lsls	r3, r3, #2
 80010fc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80010fe:	e031      	b.n	8001164 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001100:	4a1b      	ldr	r2, [pc, #108]	; (8001170 <__NVIC_SetPriority+0xd8>)
 8001102:	1dfb      	adds	r3, r7, #7
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	0019      	movs	r1, r3
 8001108:	230f      	movs	r3, #15
 800110a:	400b      	ands	r3, r1
 800110c:	3b08      	subs	r3, #8
 800110e:	089b      	lsrs	r3, r3, #2
 8001110:	3306      	adds	r3, #6
 8001112:	009b      	lsls	r3, r3, #2
 8001114:	18d3      	adds	r3, r2, r3
 8001116:	3304      	adds	r3, #4
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	1dfa      	adds	r2, r7, #7
 800111c:	7812      	ldrb	r2, [r2, #0]
 800111e:	0011      	movs	r1, r2
 8001120:	2203      	movs	r2, #3
 8001122:	400a      	ands	r2, r1
 8001124:	00d2      	lsls	r2, r2, #3
 8001126:	21ff      	movs	r1, #255	; 0xff
 8001128:	4091      	lsls	r1, r2
 800112a:	000a      	movs	r2, r1
 800112c:	43d2      	mvns	r2, r2
 800112e:	401a      	ands	r2, r3
 8001130:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	019b      	lsls	r3, r3, #6
 8001136:	22ff      	movs	r2, #255	; 0xff
 8001138:	401a      	ands	r2, r3
 800113a:	1dfb      	adds	r3, r7, #7
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	0018      	movs	r0, r3
 8001140:	2303      	movs	r3, #3
 8001142:	4003      	ands	r3, r0
 8001144:	00db      	lsls	r3, r3, #3
 8001146:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001148:	4809      	ldr	r0, [pc, #36]	; (8001170 <__NVIC_SetPriority+0xd8>)
 800114a:	1dfb      	adds	r3, r7, #7
 800114c:	781b      	ldrb	r3, [r3, #0]
 800114e:	001c      	movs	r4, r3
 8001150:	230f      	movs	r3, #15
 8001152:	4023      	ands	r3, r4
 8001154:	3b08      	subs	r3, #8
 8001156:	089b      	lsrs	r3, r3, #2
 8001158:	430a      	orrs	r2, r1
 800115a:	3306      	adds	r3, #6
 800115c:	009b      	lsls	r3, r3, #2
 800115e:	18c3      	adds	r3, r0, r3
 8001160:	3304      	adds	r3, #4
 8001162:	601a      	str	r2, [r3, #0]
}
 8001164:	46c0      	nop			; (mov r8, r8)
 8001166:	46bd      	mov	sp, r7
 8001168:	b003      	add	sp, #12
 800116a:	bd90      	pop	{r4, r7, pc}
 800116c:	e000e100 	.word	0xe000e100
 8001170:	e000ed00 	.word	0xe000ed00

08001174 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	3b01      	subs	r3, #1
 8001180:	4a0c      	ldr	r2, [pc, #48]	; (80011b4 <SysTick_Config+0x40>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d901      	bls.n	800118a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001186:	2301      	movs	r3, #1
 8001188:	e010      	b.n	80011ac <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800118a:	4b0b      	ldr	r3, [pc, #44]	; (80011b8 <SysTick_Config+0x44>)
 800118c:	687a      	ldr	r2, [r7, #4]
 800118e:	3a01      	subs	r2, #1
 8001190:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001192:	2301      	movs	r3, #1
 8001194:	425b      	negs	r3, r3
 8001196:	2103      	movs	r1, #3
 8001198:	0018      	movs	r0, r3
 800119a:	f7ff ff7d 	bl	8001098 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800119e:	4b06      	ldr	r3, [pc, #24]	; (80011b8 <SysTick_Config+0x44>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011a4:	4b04      	ldr	r3, [pc, #16]	; (80011b8 <SysTick_Config+0x44>)
 80011a6:	2207      	movs	r2, #7
 80011a8:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011aa:	2300      	movs	r3, #0
}
 80011ac:	0018      	movs	r0, r3
 80011ae:	46bd      	mov	sp, r7
 80011b0:	b002      	add	sp, #8
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	00ffffff 	.word	0x00ffffff
 80011b8:	e000e010 	.word	0xe000e010

080011bc <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b084      	sub	sp, #16
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	60b9      	str	r1, [r7, #8]
 80011c4:	607a      	str	r2, [r7, #4]
 80011c6:	210f      	movs	r1, #15
 80011c8:	187b      	adds	r3, r7, r1
 80011ca:	1c02      	adds	r2, r0, #0
 80011cc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80011ce:	68ba      	ldr	r2, [r7, #8]
 80011d0:	187b      	adds	r3, r7, r1
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	b25b      	sxtb	r3, r3
 80011d6:	0011      	movs	r1, r2
 80011d8:	0018      	movs	r0, r3
 80011da:	f7ff ff5d 	bl	8001098 <__NVIC_SetPriority>
}
 80011de:	46c0      	nop			; (mov r8, r8)
 80011e0:	46bd      	mov	sp, r7
 80011e2:	b004      	add	sp, #16
 80011e4:	bd80      	pop	{r7, pc}

080011e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011e6:	b580      	push	{r7, lr}
 80011e8:	b082      	sub	sp, #8
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	0018      	movs	r0, r3
 80011f2:	f7ff ffbf 	bl	8001174 <SysTick_Config>
 80011f6:	0003      	movs	r3, r0
}
 80011f8:	0018      	movs	r0, r3
 80011fa:	46bd      	mov	sp, r7
 80011fc:	b002      	add	sp, #8
 80011fe:	bd80      	pop	{r7, pc}

08001200 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b086      	sub	sp, #24
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
 8001208:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800120a:	2300      	movs	r3, #0
 800120c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800120e:	e147      	b.n	80014a0 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	2101      	movs	r1, #1
 8001216:	697a      	ldr	r2, [r7, #20]
 8001218:	4091      	lsls	r1, r2
 800121a:	000a      	movs	r2, r1
 800121c:	4013      	ands	r3, r2
 800121e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d100      	bne.n	8001228 <HAL_GPIO_Init+0x28>
 8001226:	e138      	b.n	800149a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	2b02      	cmp	r3, #2
 800122e:	d003      	beq.n	8001238 <HAL_GPIO_Init+0x38>
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	2b12      	cmp	r3, #18
 8001236:	d123      	bne.n	8001280 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	08da      	lsrs	r2, r3, #3
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	3208      	adds	r2, #8
 8001240:	0092      	lsls	r2, r2, #2
 8001242:	58d3      	ldr	r3, [r2, r3]
 8001244:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	2207      	movs	r2, #7
 800124a:	4013      	ands	r3, r2
 800124c:	009b      	lsls	r3, r3, #2
 800124e:	220f      	movs	r2, #15
 8001250:	409a      	lsls	r2, r3
 8001252:	0013      	movs	r3, r2
 8001254:	43da      	mvns	r2, r3
 8001256:	693b      	ldr	r3, [r7, #16]
 8001258:	4013      	ands	r3, r2
 800125a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	691a      	ldr	r2, [r3, #16]
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	2107      	movs	r1, #7
 8001264:	400b      	ands	r3, r1
 8001266:	009b      	lsls	r3, r3, #2
 8001268:	409a      	lsls	r2, r3
 800126a:	0013      	movs	r3, r2
 800126c:	693a      	ldr	r2, [r7, #16]
 800126e:	4313      	orrs	r3, r2
 8001270:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001272:	697b      	ldr	r3, [r7, #20]
 8001274:	08da      	lsrs	r2, r3, #3
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	3208      	adds	r2, #8
 800127a:	0092      	lsls	r2, r2, #2
 800127c:	6939      	ldr	r1, [r7, #16]
 800127e:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001286:	697b      	ldr	r3, [r7, #20]
 8001288:	005b      	lsls	r3, r3, #1
 800128a:	2203      	movs	r2, #3
 800128c:	409a      	lsls	r2, r3
 800128e:	0013      	movs	r3, r2
 8001290:	43da      	mvns	r2, r3
 8001292:	693b      	ldr	r3, [r7, #16]
 8001294:	4013      	ands	r3, r2
 8001296:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	2203      	movs	r2, #3
 800129e:	401a      	ands	r2, r3
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	005b      	lsls	r3, r3, #1
 80012a4:	409a      	lsls	r2, r3
 80012a6:	0013      	movs	r3, r2
 80012a8:	693a      	ldr	r2, [r7, #16]
 80012aa:	4313      	orrs	r3, r2
 80012ac:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	693a      	ldr	r2, [r7, #16]
 80012b2:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	2b01      	cmp	r3, #1
 80012ba:	d00b      	beq.n	80012d4 <HAL_GPIO_Init+0xd4>
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	2b02      	cmp	r3, #2
 80012c2:	d007      	beq.n	80012d4 <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012c8:	2b11      	cmp	r3, #17
 80012ca:	d003      	beq.n	80012d4 <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	2b12      	cmp	r3, #18
 80012d2:	d130      	bne.n	8001336 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	689b      	ldr	r3, [r3, #8]
 80012d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	005b      	lsls	r3, r3, #1
 80012de:	2203      	movs	r2, #3
 80012e0:	409a      	lsls	r2, r3
 80012e2:	0013      	movs	r3, r2
 80012e4:	43da      	mvns	r2, r3
 80012e6:	693b      	ldr	r3, [r7, #16]
 80012e8:	4013      	ands	r3, r2
 80012ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	68da      	ldr	r2, [r3, #12]
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	005b      	lsls	r3, r3, #1
 80012f4:	409a      	lsls	r2, r3
 80012f6:	0013      	movs	r3, r2
 80012f8:	693a      	ldr	r2, [r7, #16]
 80012fa:	4313      	orrs	r3, r2
 80012fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	693a      	ldr	r2, [r7, #16]
 8001302:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800130a:	2201      	movs	r2, #1
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	409a      	lsls	r2, r3
 8001310:	0013      	movs	r3, r2
 8001312:	43da      	mvns	r2, r3
 8001314:	693b      	ldr	r3, [r7, #16]
 8001316:	4013      	ands	r3, r2
 8001318:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	091b      	lsrs	r3, r3, #4
 8001320:	2201      	movs	r2, #1
 8001322:	401a      	ands	r2, r3
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	409a      	lsls	r2, r3
 8001328:	0013      	movs	r3, r2
 800132a:	693a      	ldr	r2, [r7, #16]
 800132c:	4313      	orrs	r3, r2
 800132e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	693a      	ldr	r2, [r7, #16]
 8001334:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	68db      	ldr	r3, [r3, #12]
 800133a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	005b      	lsls	r3, r3, #1
 8001340:	2203      	movs	r2, #3
 8001342:	409a      	lsls	r2, r3
 8001344:	0013      	movs	r3, r2
 8001346:	43da      	mvns	r2, r3
 8001348:	693b      	ldr	r3, [r7, #16]
 800134a:	4013      	ands	r3, r2
 800134c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	689a      	ldr	r2, [r3, #8]
 8001352:	697b      	ldr	r3, [r7, #20]
 8001354:	005b      	lsls	r3, r3, #1
 8001356:	409a      	lsls	r2, r3
 8001358:	0013      	movs	r3, r2
 800135a:	693a      	ldr	r2, [r7, #16]
 800135c:	4313      	orrs	r3, r2
 800135e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	693a      	ldr	r2, [r7, #16]
 8001364:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	685a      	ldr	r2, [r3, #4]
 800136a:	2380      	movs	r3, #128	; 0x80
 800136c:	055b      	lsls	r3, r3, #21
 800136e:	4013      	ands	r3, r2
 8001370:	d100      	bne.n	8001374 <HAL_GPIO_Init+0x174>
 8001372:	e092      	b.n	800149a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001374:	4a50      	ldr	r2, [pc, #320]	; (80014b8 <HAL_GPIO_Init+0x2b8>)
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	089b      	lsrs	r3, r3, #2
 800137a:	3318      	adds	r3, #24
 800137c:	009b      	lsls	r3, r3, #2
 800137e:	589b      	ldr	r3, [r3, r2]
 8001380:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	2203      	movs	r2, #3
 8001386:	4013      	ands	r3, r2
 8001388:	00db      	lsls	r3, r3, #3
 800138a:	220f      	movs	r2, #15
 800138c:	409a      	lsls	r2, r3
 800138e:	0013      	movs	r3, r2
 8001390:	43da      	mvns	r2, r3
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	4013      	ands	r3, r2
 8001396:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001398:	687a      	ldr	r2, [r7, #4]
 800139a:	23a0      	movs	r3, #160	; 0xa0
 800139c:	05db      	lsls	r3, r3, #23
 800139e:	429a      	cmp	r2, r3
 80013a0:	d013      	beq.n	80013ca <HAL_GPIO_Init+0x1ca>
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	4a45      	ldr	r2, [pc, #276]	; (80014bc <HAL_GPIO_Init+0x2bc>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d00d      	beq.n	80013c6 <HAL_GPIO_Init+0x1c6>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	4a44      	ldr	r2, [pc, #272]	; (80014c0 <HAL_GPIO_Init+0x2c0>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d007      	beq.n	80013c2 <HAL_GPIO_Init+0x1c2>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	4a43      	ldr	r2, [pc, #268]	; (80014c4 <HAL_GPIO_Init+0x2c4>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d101      	bne.n	80013be <HAL_GPIO_Init+0x1be>
 80013ba:	2303      	movs	r3, #3
 80013bc:	e006      	b.n	80013cc <HAL_GPIO_Init+0x1cc>
 80013be:	2305      	movs	r3, #5
 80013c0:	e004      	b.n	80013cc <HAL_GPIO_Init+0x1cc>
 80013c2:	2302      	movs	r3, #2
 80013c4:	e002      	b.n	80013cc <HAL_GPIO_Init+0x1cc>
 80013c6:	2301      	movs	r3, #1
 80013c8:	e000      	b.n	80013cc <HAL_GPIO_Init+0x1cc>
 80013ca:	2300      	movs	r3, #0
 80013cc:	697a      	ldr	r2, [r7, #20]
 80013ce:	2103      	movs	r1, #3
 80013d0:	400a      	ands	r2, r1
 80013d2:	00d2      	lsls	r2, r2, #3
 80013d4:	4093      	lsls	r3, r2
 80013d6:	693a      	ldr	r2, [r7, #16]
 80013d8:	4313      	orrs	r3, r2
 80013da:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80013dc:	4936      	ldr	r1, [pc, #216]	; (80014b8 <HAL_GPIO_Init+0x2b8>)
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	089b      	lsrs	r3, r3, #2
 80013e2:	3318      	adds	r3, #24
 80013e4:	009b      	lsls	r3, r3, #2
 80013e6:	693a      	ldr	r2, [r7, #16]
 80013e8:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80013ea:	4a33      	ldr	r2, [pc, #204]	; (80014b8 <HAL_GPIO_Init+0x2b8>)
 80013ec:	2380      	movs	r3, #128	; 0x80
 80013ee:	58d3      	ldr	r3, [r2, r3]
 80013f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	43da      	mvns	r2, r3
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	4013      	ands	r3, r2
 80013fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	685a      	ldr	r2, [r3, #4]
 8001400:	2380      	movs	r3, #128	; 0x80
 8001402:	025b      	lsls	r3, r3, #9
 8001404:	4013      	ands	r3, r2
 8001406:	d003      	beq.n	8001410 <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 8001408:	693a      	ldr	r2, [r7, #16]
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	4313      	orrs	r3, r2
 800140e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001410:	4929      	ldr	r1, [pc, #164]	; (80014b8 <HAL_GPIO_Init+0x2b8>)
 8001412:	2280      	movs	r2, #128	; 0x80
 8001414:	693b      	ldr	r3, [r7, #16]
 8001416:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8001418:	4a27      	ldr	r2, [pc, #156]	; (80014b8 <HAL_GPIO_Init+0x2b8>)
 800141a:	2384      	movs	r3, #132	; 0x84
 800141c:	58d3      	ldr	r3, [r2, r3]
 800141e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	43da      	mvns	r2, r3
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	4013      	ands	r3, r2
 8001428:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	685a      	ldr	r2, [r3, #4]
 800142e:	2380      	movs	r3, #128	; 0x80
 8001430:	029b      	lsls	r3, r3, #10
 8001432:	4013      	ands	r3, r2
 8001434:	d003      	beq.n	800143e <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 8001436:	693a      	ldr	r2, [r7, #16]
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	4313      	orrs	r3, r2
 800143c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800143e:	491e      	ldr	r1, [pc, #120]	; (80014b8 <HAL_GPIO_Init+0x2b8>)
 8001440:	2284      	movs	r2, #132	; 0x84
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001446:	4b1c      	ldr	r3, [pc, #112]	; (80014b8 <HAL_GPIO_Init+0x2b8>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	43da      	mvns	r2, r3
 8001450:	693b      	ldr	r3, [r7, #16]
 8001452:	4013      	ands	r3, r2
 8001454:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	685a      	ldr	r2, [r3, #4]
 800145a:	2380      	movs	r3, #128	; 0x80
 800145c:	035b      	lsls	r3, r3, #13
 800145e:	4013      	ands	r3, r2
 8001460:	d003      	beq.n	800146a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001462:	693a      	ldr	r2, [r7, #16]
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	4313      	orrs	r3, r2
 8001468:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800146a:	4b13      	ldr	r3, [pc, #76]	; (80014b8 <HAL_GPIO_Init+0x2b8>)
 800146c:	693a      	ldr	r2, [r7, #16]
 800146e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001470:	4b11      	ldr	r3, [pc, #68]	; (80014b8 <HAL_GPIO_Init+0x2b8>)
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	43da      	mvns	r2, r3
 800147a:	693b      	ldr	r3, [r7, #16]
 800147c:	4013      	ands	r3, r2
 800147e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	685a      	ldr	r2, [r3, #4]
 8001484:	2380      	movs	r3, #128	; 0x80
 8001486:	039b      	lsls	r3, r3, #14
 8001488:	4013      	ands	r3, r2
 800148a:	d003      	beq.n	8001494 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800148c:	693a      	ldr	r2, [r7, #16]
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	4313      	orrs	r3, r2
 8001492:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001494:	4b08      	ldr	r3, [pc, #32]	; (80014b8 <HAL_GPIO_Init+0x2b8>)
 8001496:	693a      	ldr	r2, [r7, #16]
 8001498:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 800149a:	697b      	ldr	r3, [r7, #20]
 800149c:	3301      	adds	r3, #1
 800149e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	681a      	ldr	r2, [r3, #0]
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	40da      	lsrs	r2, r3
 80014a8:	1e13      	subs	r3, r2, #0
 80014aa:	d000      	beq.n	80014ae <HAL_GPIO_Init+0x2ae>
 80014ac:	e6b0      	b.n	8001210 <HAL_GPIO_Init+0x10>
  }
}
 80014ae:	46c0      	nop			; (mov r8, r8)
 80014b0:	46bd      	mov	sp, r7
 80014b2:	b006      	add	sp, #24
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	46c0      	nop			; (mov r8, r8)
 80014b8:	40021800 	.word	0x40021800
 80014bc:	50000400 	.word	0x50000400
 80014c0:	50000800 	.word	0x50000800
 80014c4:	50000c00 	.word	0x50000c00

080014c8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b084      	sub	sp, #16
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
 80014d0:	000a      	movs	r2, r1
 80014d2:	1cbb      	adds	r3, r7, #2
 80014d4:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	691b      	ldr	r3, [r3, #16]
 80014da:	1cba      	adds	r2, r7, #2
 80014dc:	8812      	ldrh	r2, [r2, #0]
 80014de:	4013      	ands	r3, r2
 80014e0:	d004      	beq.n	80014ec <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80014e2:	230f      	movs	r3, #15
 80014e4:	18fb      	adds	r3, r7, r3
 80014e6:	2201      	movs	r2, #1
 80014e8:	701a      	strb	r2, [r3, #0]
 80014ea:	e003      	b.n	80014f4 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80014ec:	230f      	movs	r3, #15
 80014ee:	18fb      	adds	r3, r7, r3
 80014f0:	2200      	movs	r2, #0
 80014f2:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80014f4:	230f      	movs	r3, #15
 80014f6:	18fb      	adds	r3, r7, r3
 80014f8:	781b      	ldrb	r3, [r3, #0]
}
 80014fa:	0018      	movs	r0, r3
 80014fc:	46bd      	mov	sp, r7
 80014fe:	b004      	add	sp, #16
 8001500:	bd80      	pop	{r7, pc}

08001502 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001502:	b580      	push	{r7, lr}
 8001504:	b082      	sub	sp, #8
 8001506:	af00      	add	r7, sp, #0
 8001508:	6078      	str	r0, [r7, #4]
 800150a:	0008      	movs	r0, r1
 800150c:	0011      	movs	r1, r2
 800150e:	1cbb      	adds	r3, r7, #2
 8001510:	1c02      	adds	r2, r0, #0
 8001512:	801a      	strh	r2, [r3, #0]
 8001514:	1c7b      	adds	r3, r7, #1
 8001516:	1c0a      	adds	r2, r1, #0
 8001518:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800151a:	1c7b      	adds	r3, r7, #1
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d004      	beq.n	800152c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001522:	1cbb      	adds	r3, r7, #2
 8001524:	881a      	ldrh	r2, [r3, #0]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800152a:	e003      	b.n	8001534 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800152c:	1cbb      	adds	r3, r7, #2
 800152e:	881a      	ldrh	r2, [r3, #0]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001534:	46c0      	nop			; (mov r8, r8)
 8001536:	46bd      	mov	sp, r7
 8001538:	b002      	add	sp, #8
 800153a:	bd80      	pop	{r7, pc}

0800153c <HAL_PWR_EnableBkUpAccess>:
  *         possible unwanted write accesses. All RTC & TAMP registers (backup
  *         registers included) and RCC BDCR register are concerned.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001540:	4b04      	ldr	r3, [pc, #16]	; (8001554 <HAL_PWR_EnableBkUpAccess+0x18>)
 8001542:	681a      	ldr	r2, [r3, #0]
 8001544:	4b03      	ldr	r3, [pc, #12]	; (8001554 <HAL_PWR_EnableBkUpAccess+0x18>)
 8001546:	2180      	movs	r1, #128	; 0x80
 8001548:	0049      	lsls	r1, r1, #1
 800154a:	430a      	orrs	r2, r1
 800154c:	601a      	str	r2, [r3, #0]
}
 800154e:	46c0      	nop			; (mov r8, r8)
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	40007000 	.word	0x40007000

08001558 <HAL_PWREx_EnableBatteryCharging>:
  *           @arg @ref PWR_BATTERY_CHARGING_RESISTOR_5     5 kOhms resistor
  *           @arg @ref PWR_BATTERY_CHARGING_RESISTOR_1_5 1.5 kOhms resistor
  * @retval None
  */
void HAL_PWREx_EnableBatteryCharging(uint32_t ResistorSelection)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b084      	sub	sp, #16
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  assert_param(IS_PWR_BATTERY_RESISTOR_SELECT(ResistorSelection));

  /* Specify resistor selection and enable battery charging */
  tmpreg = (PWR->CR4 & ~PWR_CR4_VBRS);
 8001560:	4b08      	ldr	r3, [pc, #32]	; (8001584 <HAL_PWREx_EnableBatteryCharging+0x2c>)
 8001562:	68db      	ldr	r3, [r3, #12]
 8001564:	4a08      	ldr	r2, [pc, #32]	; (8001588 <HAL_PWREx_EnableBatteryCharging+0x30>)
 8001566:	4013      	ands	r3, r2
 8001568:	60fb      	str	r3, [r7, #12]
  PWR->CR4 = (tmpreg | ResistorSelection | PWR_CR4_VBE);
 800156a:	68fa      	ldr	r2, [r7, #12]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	431a      	orrs	r2, r3
 8001570:	4b04      	ldr	r3, [pc, #16]	; (8001584 <HAL_PWREx_EnableBatteryCharging+0x2c>)
 8001572:	2180      	movs	r1, #128	; 0x80
 8001574:	0049      	lsls	r1, r1, #1
 8001576:	430a      	orrs	r2, r1
 8001578:	60da      	str	r2, [r3, #12]
}
 800157a:	46c0      	nop			; (mov r8, r8)
 800157c:	46bd      	mov	sp, r7
 800157e:	b004      	add	sp, #16
 8001580:	bd80      	pop	{r7, pc}
 8001582:	46c0      	nop			; (mov r8, r8)
 8001584:	40007000 	.word	0x40007000
 8001588:	fffffdff 	.word	0xfffffdff

0800158c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b084      	sub	sp, #16
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001594:	4b19      	ldr	r3, [pc, #100]	; (80015fc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a19      	ldr	r2, [pc, #100]	; (8001600 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800159a:	4013      	ands	r3, r2
 800159c:	0019      	movs	r1, r3
 800159e:	4b17      	ldr	r3, [pc, #92]	; (80015fc <HAL_PWREx_ControlVoltageScaling+0x70>)
 80015a0:	687a      	ldr	r2, [r7, #4]
 80015a2:	430a      	orrs	r2, r1
 80015a4:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80015a6:	687a      	ldr	r2, [r7, #4]
 80015a8:	2380      	movs	r3, #128	; 0x80
 80015aa:	009b      	lsls	r3, r3, #2
 80015ac:	429a      	cmp	r2, r3
 80015ae:	d11f      	bne.n	80015f0 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 80015b0:	4b14      	ldr	r3, [pc, #80]	; (8001604 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80015b2:	681a      	ldr	r2, [r3, #0]
 80015b4:	0013      	movs	r3, r2
 80015b6:	005b      	lsls	r3, r3, #1
 80015b8:	189b      	adds	r3, r3, r2
 80015ba:	005b      	lsls	r3, r3, #1
 80015bc:	4912      	ldr	r1, [pc, #72]	; (8001608 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80015be:	0018      	movs	r0, r3
 80015c0:	f7fe fd9e 	bl	8000100 <__udivsi3>
 80015c4:	0003      	movs	r3, r0
 80015c6:	3301      	adds	r3, #1
 80015c8:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80015ca:	e008      	b.n	80015de <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if(wait_loop_index != 0U)
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d003      	beq.n	80015da <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	3b01      	subs	r3, #1
 80015d6:	60fb      	str	r3, [r7, #12]
 80015d8:	e001      	b.n	80015de <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80015da:	2303      	movs	r3, #3
 80015dc:	e009      	b.n	80015f2 <HAL_PWREx_ControlVoltageScaling+0x66>
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80015de:	4b07      	ldr	r3, [pc, #28]	; (80015fc <HAL_PWREx_ControlVoltageScaling+0x70>)
 80015e0:	695a      	ldr	r2, [r3, #20]
 80015e2:	2380      	movs	r3, #128	; 0x80
 80015e4:	00db      	lsls	r3, r3, #3
 80015e6:	401a      	ands	r2, r3
 80015e8:	2380      	movs	r3, #128	; 0x80
 80015ea:	00db      	lsls	r3, r3, #3
 80015ec:	429a      	cmp	r2, r3
 80015ee:	d0ed      	beq.n	80015cc <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80015f0:	2300      	movs	r3, #0
}
 80015f2:	0018      	movs	r0, r3
 80015f4:	46bd      	mov	sp, r7
 80015f6:	b004      	add	sp, #16
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	46c0      	nop			; (mov r8, r8)
 80015fc:	40007000 	.word	0x40007000
 8001600:	fffff9ff 	.word	0xfffff9ff
 8001604:	20000000 	.word	0x20000000
 8001608:	000f4240 	.word	0x000f4240

0800160c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001610:	4b03      	ldr	r3, [pc, #12]	; (8001620 <LL_RCC_GetAPB1Prescaler+0x14>)
 8001612:	689a      	ldr	r2, [r3, #8]
 8001614:	23e0      	movs	r3, #224	; 0xe0
 8001616:	01db      	lsls	r3, r3, #7
 8001618:	4013      	ands	r3, r2
}
 800161a:	0018      	movs	r0, r3
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	40021000 	.word	0x40021000

08001624 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b088      	sub	sp, #32
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d101      	bne.n	8001636 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
 8001634:	e2f9      	b.n	8001c2a <HAL_RCC_OscConfig+0x606>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	2201      	movs	r2, #1
 800163c:	4013      	ands	r3, r2
 800163e:	d100      	bne.n	8001642 <HAL_RCC_OscConfig+0x1e>
 8001640:	e07c      	b.n	800173c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001642:	4bc3      	ldr	r3, [pc, #780]	; (8001950 <HAL_RCC_OscConfig+0x32c>)
 8001644:	689b      	ldr	r3, [r3, #8]
 8001646:	2238      	movs	r2, #56	; 0x38
 8001648:	4013      	ands	r3, r2
 800164a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800164c:	4bc0      	ldr	r3, [pc, #768]	; (8001950 <HAL_RCC_OscConfig+0x32c>)
 800164e:	68db      	ldr	r3, [r3, #12]
 8001650:	2203      	movs	r2, #3
 8001652:	4013      	ands	r3, r2
 8001654:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001656:	69bb      	ldr	r3, [r7, #24]
 8001658:	2b10      	cmp	r3, #16
 800165a:	d102      	bne.n	8001662 <HAL_RCC_OscConfig+0x3e>
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	2b03      	cmp	r3, #3
 8001660:	d002      	beq.n	8001668 <HAL_RCC_OscConfig+0x44>
 8001662:	69bb      	ldr	r3, [r7, #24]
 8001664:	2b08      	cmp	r3, #8
 8001666:	d10b      	bne.n	8001680 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001668:	4bb9      	ldr	r3, [pc, #740]	; (8001950 <HAL_RCC_OscConfig+0x32c>)
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	2380      	movs	r3, #128	; 0x80
 800166e:	029b      	lsls	r3, r3, #10
 8001670:	4013      	ands	r3, r2
 8001672:	d062      	beq.n	800173a <HAL_RCC_OscConfig+0x116>
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d15e      	bne.n	800173a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 800167c:	2301      	movs	r3, #1
 800167e:	e2d4      	b.n	8001c2a <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	685a      	ldr	r2, [r3, #4]
 8001684:	2380      	movs	r3, #128	; 0x80
 8001686:	025b      	lsls	r3, r3, #9
 8001688:	429a      	cmp	r2, r3
 800168a:	d107      	bne.n	800169c <HAL_RCC_OscConfig+0x78>
 800168c:	4bb0      	ldr	r3, [pc, #704]	; (8001950 <HAL_RCC_OscConfig+0x32c>)
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	4baf      	ldr	r3, [pc, #700]	; (8001950 <HAL_RCC_OscConfig+0x32c>)
 8001692:	2180      	movs	r1, #128	; 0x80
 8001694:	0249      	lsls	r1, r1, #9
 8001696:	430a      	orrs	r2, r1
 8001698:	601a      	str	r2, [r3, #0]
 800169a:	e020      	b.n	80016de <HAL_RCC_OscConfig+0xba>
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	685a      	ldr	r2, [r3, #4]
 80016a0:	23a0      	movs	r3, #160	; 0xa0
 80016a2:	02db      	lsls	r3, r3, #11
 80016a4:	429a      	cmp	r2, r3
 80016a6:	d10e      	bne.n	80016c6 <HAL_RCC_OscConfig+0xa2>
 80016a8:	4ba9      	ldr	r3, [pc, #676]	; (8001950 <HAL_RCC_OscConfig+0x32c>)
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	4ba8      	ldr	r3, [pc, #672]	; (8001950 <HAL_RCC_OscConfig+0x32c>)
 80016ae:	2180      	movs	r1, #128	; 0x80
 80016b0:	02c9      	lsls	r1, r1, #11
 80016b2:	430a      	orrs	r2, r1
 80016b4:	601a      	str	r2, [r3, #0]
 80016b6:	4ba6      	ldr	r3, [pc, #664]	; (8001950 <HAL_RCC_OscConfig+0x32c>)
 80016b8:	681a      	ldr	r2, [r3, #0]
 80016ba:	4ba5      	ldr	r3, [pc, #660]	; (8001950 <HAL_RCC_OscConfig+0x32c>)
 80016bc:	2180      	movs	r1, #128	; 0x80
 80016be:	0249      	lsls	r1, r1, #9
 80016c0:	430a      	orrs	r2, r1
 80016c2:	601a      	str	r2, [r3, #0]
 80016c4:	e00b      	b.n	80016de <HAL_RCC_OscConfig+0xba>
 80016c6:	4ba2      	ldr	r3, [pc, #648]	; (8001950 <HAL_RCC_OscConfig+0x32c>)
 80016c8:	681a      	ldr	r2, [r3, #0]
 80016ca:	4ba1      	ldr	r3, [pc, #644]	; (8001950 <HAL_RCC_OscConfig+0x32c>)
 80016cc:	49a1      	ldr	r1, [pc, #644]	; (8001954 <HAL_RCC_OscConfig+0x330>)
 80016ce:	400a      	ands	r2, r1
 80016d0:	601a      	str	r2, [r3, #0]
 80016d2:	4b9f      	ldr	r3, [pc, #636]	; (8001950 <HAL_RCC_OscConfig+0x32c>)
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	4b9e      	ldr	r3, [pc, #632]	; (8001950 <HAL_RCC_OscConfig+0x32c>)
 80016d8:	499f      	ldr	r1, [pc, #636]	; (8001958 <HAL_RCC_OscConfig+0x334>)
 80016da:	400a      	ands	r2, r1
 80016dc:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d014      	beq.n	8001710 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016e6:	f7ff fc95 	bl	8001014 <HAL_GetTick>
 80016ea:	0003      	movs	r3, r0
 80016ec:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016ee:	e008      	b.n	8001702 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016f0:	f7ff fc90 	bl	8001014 <HAL_GetTick>
 80016f4:	0002      	movs	r2, r0
 80016f6:	693b      	ldr	r3, [r7, #16]
 80016f8:	1ad3      	subs	r3, r2, r3
 80016fa:	2b64      	cmp	r3, #100	; 0x64
 80016fc:	d901      	bls.n	8001702 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80016fe:	2303      	movs	r3, #3
 8001700:	e293      	b.n	8001c2a <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001702:	4b93      	ldr	r3, [pc, #588]	; (8001950 <HAL_RCC_OscConfig+0x32c>)
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	2380      	movs	r3, #128	; 0x80
 8001708:	029b      	lsls	r3, r3, #10
 800170a:	4013      	ands	r3, r2
 800170c:	d0f0      	beq.n	80016f0 <HAL_RCC_OscConfig+0xcc>
 800170e:	e015      	b.n	800173c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001710:	f7ff fc80 	bl	8001014 <HAL_GetTick>
 8001714:	0003      	movs	r3, r0
 8001716:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001718:	e008      	b.n	800172c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800171a:	f7ff fc7b 	bl	8001014 <HAL_GetTick>
 800171e:	0002      	movs	r2, r0
 8001720:	693b      	ldr	r3, [r7, #16]
 8001722:	1ad3      	subs	r3, r2, r3
 8001724:	2b64      	cmp	r3, #100	; 0x64
 8001726:	d901      	bls.n	800172c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001728:	2303      	movs	r3, #3
 800172a:	e27e      	b.n	8001c2a <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800172c:	4b88      	ldr	r3, [pc, #544]	; (8001950 <HAL_RCC_OscConfig+0x32c>)
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	2380      	movs	r3, #128	; 0x80
 8001732:	029b      	lsls	r3, r3, #10
 8001734:	4013      	ands	r3, r2
 8001736:	d1f0      	bne.n	800171a <HAL_RCC_OscConfig+0xf6>
 8001738:	e000      	b.n	800173c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800173a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	2202      	movs	r2, #2
 8001742:	4013      	ands	r3, r2
 8001744:	d100      	bne.n	8001748 <HAL_RCC_OscConfig+0x124>
 8001746:	e099      	b.n	800187c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001748:	4b81      	ldr	r3, [pc, #516]	; (8001950 <HAL_RCC_OscConfig+0x32c>)
 800174a:	689b      	ldr	r3, [r3, #8]
 800174c:	2238      	movs	r2, #56	; 0x38
 800174e:	4013      	ands	r3, r2
 8001750:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001752:	4b7f      	ldr	r3, [pc, #508]	; (8001950 <HAL_RCC_OscConfig+0x32c>)
 8001754:	68db      	ldr	r3, [r3, #12]
 8001756:	2203      	movs	r2, #3
 8001758:	4013      	ands	r3, r2
 800175a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800175c:	69bb      	ldr	r3, [r7, #24]
 800175e:	2b10      	cmp	r3, #16
 8001760:	d102      	bne.n	8001768 <HAL_RCC_OscConfig+0x144>
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	2b02      	cmp	r3, #2
 8001766:	d002      	beq.n	800176e <HAL_RCC_OscConfig+0x14a>
 8001768:	69bb      	ldr	r3, [r7, #24]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d135      	bne.n	80017da <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800176e:	4b78      	ldr	r3, [pc, #480]	; (8001950 <HAL_RCC_OscConfig+0x32c>)
 8001770:	681a      	ldr	r2, [r3, #0]
 8001772:	2380      	movs	r3, #128	; 0x80
 8001774:	00db      	lsls	r3, r3, #3
 8001776:	4013      	ands	r3, r2
 8001778:	d005      	beq.n	8001786 <HAL_RCC_OscConfig+0x162>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	68db      	ldr	r3, [r3, #12]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d101      	bne.n	8001786 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001782:	2301      	movs	r3, #1
 8001784:	e251      	b.n	8001c2a <HAL_RCC_OscConfig+0x606>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001786:	4b72      	ldr	r3, [pc, #456]	; (8001950 <HAL_RCC_OscConfig+0x32c>)
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	4a74      	ldr	r2, [pc, #464]	; (800195c <HAL_RCC_OscConfig+0x338>)
 800178c:	4013      	ands	r3, r2
 800178e:	0019      	movs	r1, r3
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	695b      	ldr	r3, [r3, #20]
 8001794:	021a      	lsls	r2, r3, #8
 8001796:	4b6e      	ldr	r3, [pc, #440]	; (8001950 <HAL_RCC_OscConfig+0x32c>)
 8001798:	430a      	orrs	r2, r1
 800179a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 800179c:	69bb      	ldr	r3, [r7, #24]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d112      	bne.n	80017c8 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80017a2:	4b6b      	ldr	r3, [pc, #428]	; (8001950 <HAL_RCC_OscConfig+0x32c>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4a6e      	ldr	r2, [pc, #440]	; (8001960 <HAL_RCC_OscConfig+0x33c>)
 80017a8:	4013      	ands	r3, r2
 80017aa:	0019      	movs	r1, r3
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	691a      	ldr	r2, [r3, #16]
 80017b0:	4b67      	ldr	r3, [pc, #412]	; (8001950 <HAL_RCC_OscConfig+0x32c>)
 80017b2:	430a      	orrs	r2, r1
 80017b4:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80017b6:	4b66      	ldr	r3, [pc, #408]	; (8001950 <HAL_RCC_OscConfig+0x32c>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	0adb      	lsrs	r3, r3, #11
 80017bc:	2207      	movs	r2, #7
 80017be:	4013      	ands	r3, r2
 80017c0:	4a68      	ldr	r2, [pc, #416]	; (8001964 <HAL_RCC_OscConfig+0x340>)
 80017c2:	40da      	lsrs	r2, r3
 80017c4:	4b68      	ldr	r3, [pc, #416]	; (8001968 <HAL_RCC_OscConfig+0x344>)
 80017c6:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80017c8:	4b68      	ldr	r3, [pc, #416]	; (800196c <HAL_RCC_OscConfig+0x348>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	0018      	movs	r0, r3
 80017ce:	f7ff fbc7 	bl	8000f60 <HAL_InitTick>
 80017d2:	1e03      	subs	r3, r0, #0
 80017d4:	d051      	beq.n	800187a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
 80017d8:	e227      	b.n	8001c2a <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	68db      	ldr	r3, [r3, #12]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d030      	beq.n	8001844 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80017e2:	4b5b      	ldr	r3, [pc, #364]	; (8001950 <HAL_RCC_OscConfig+0x32c>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a5e      	ldr	r2, [pc, #376]	; (8001960 <HAL_RCC_OscConfig+0x33c>)
 80017e8:	4013      	ands	r3, r2
 80017ea:	0019      	movs	r1, r3
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	691a      	ldr	r2, [r3, #16]
 80017f0:	4b57      	ldr	r3, [pc, #348]	; (8001950 <HAL_RCC_OscConfig+0x32c>)
 80017f2:	430a      	orrs	r2, r1
 80017f4:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80017f6:	4b56      	ldr	r3, [pc, #344]	; (8001950 <HAL_RCC_OscConfig+0x32c>)
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	4b55      	ldr	r3, [pc, #340]	; (8001950 <HAL_RCC_OscConfig+0x32c>)
 80017fc:	2180      	movs	r1, #128	; 0x80
 80017fe:	0049      	lsls	r1, r1, #1
 8001800:	430a      	orrs	r2, r1
 8001802:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001804:	f7ff fc06 	bl	8001014 <HAL_GetTick>
 8001808:	0003      	movs	r3, r0
 800180a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800180c:	e008      	b.n	8001820 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800180e:	f7ff fc01 	bl	8001014 <HAL_GetTick>
 8001812:	0002      	movs	r2, r0
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	1ad3      	subs	r3, r2, r3
 8001818:	2b02      	cmp	r3, #2
 800181a:	d901      	bls.n	8001820 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800181c:	2303      	movs	r3, #3
 800181e:	e204      	b.n	8001c2a <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001820:	4b4b      	ldr	r3, [pc, #300]	; (8001950 <HAL_RCC_OscConfig+0x32c>)
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	2380      	movs	r3, #128	; 0x80
 8001826:	00db      	lsls	r3, r3, #3
 8001828:	4013      	ands	r3, r2
 800182a:	d0f0      	beq.n	800180e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800182c:	4b48      	ldr	r3, [pc, #288]	; (8001950 <HAL_RCC_OscConfig+0x32c>)
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	4a4a      	ldr	r2, [pc, #296]	; (800195c <HAL_RCC_OscConfig+0x338>)
 8001832:	4013      	ands	r3, r2
 8001834:	0019      	movs	r1, r3
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	695b      	ldr	r3, [r3, #20]
 800183a:	021a      	lsls	r2, r3, #8
 800183c:	4b44      	ldr	r3, [pc, #272]	; (8001950 <HAL_RCC_OscConfig+0x32c>)
 800183e:	430a      	orrs	r2, r1
 8001840:	605a      	str	r2, [r3, #4]
 8001842:	e01b      	b.n	800187c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001844:	4b42      	ldr	r3, [pc, #264]	; (8001950 <HAL_RCC_OscConfig+0x32c>)
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	4b41      	ldr	r3, [pc, #260]	; (8001950 <HAL_RCC_OscConfig+0x32c>)
 800184a:	4949      	ldr	r1, [pc, #292]	; (8001970 <HAL_RCC_OscConfig+0x34c>)
 800184c:	400a      	ands	r2, r1
 800184e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001850:	f7ff fbe0 	bl	8001014 <HAL_GetTick>
 8001854:	0003      	movs	r3, r0
 8001856:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001858:	e008      	b.n	800186c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800185a:	f7ff fbdb 	bl	8001014 <HAL_GetTick>
 800185e:	0002      	movs	r2, r0
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	1ad3      	subs	r3, r2, r3
 8001864:	2b02      	cmp	r3, #2
 8001866:	d901      	bls.n	800186c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001868:	2303      	movs	r3, #3
 800186a:	e1de      	b.n	8001c2a <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800186c:	4b38      	ldr	r3, [pc, #224]	; (8001950 <HAL_RCC_OscConfig+0x32c>)
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	2380      	movs	r3, #128	; 0x80
 8001872:	00db      	lsls	r3, r3, #3
 8001874:	4013      	ands	r3, r2
 8001876:	d1f0      	bne.n	800185a <HAL_RCC_OscConfig+0x236>
 8001878:	e000      	b.n	800187c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800187a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	2208      	movs	r2, #8
 8001882:	4013      	ands	r3, r2
 8001884:	d047      	beq.n	8001916 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8001886:	4b32      	ldr	r3, [pc, #200]	; (8001950 <HAL_RCC_OscConfig+0x32c>)
 8001888:	689b      	ldr	r3, [r3, #8]
 800188a:	2238      	movs	r2, #56	; 0x38
 800188c:	4013      	ands	r3, r2
 800188e:	2b18      	cmp	r3, #24
 8001890:	d10a      	bne.n	80018a8 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001892:	4b2f      	ldr	r3, [pc, #188]	; (8001950 <HAL_RCC_OscConfig+0x32c>)
 8001894:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001896:	2202      	movs	r2, #2
 8001898:	4013      	ands	r3, r2
 800189a:	d03c      	beq.n	8001916 <HAL_RCC_OscConfig+0x2f2>
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	699b      	ldr	r3, [r3, #24]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d138      	bne.n	8001916 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80018a4:	2301      	movs	r3, #1
 80018a6:	e1c0      	b.n	8001c2a <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	699b      	ldr	r3, [r3, #24]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d019      	beq.n	80018e4 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80018b0:	4b27      	ldr	r3, [pc, #156]	; (8001950 <HAL_RCC_OscConfig+0x32c>)
 80018b2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80018b4:	4b26      	ldr	r3, [pc, #152]	; (8001950 <HAL_RCC_OscConfig+0x32c>)
 80018b6:	2101      	movs	r1, #1
 80018b8:	430a      	orrs	r2, r1
 80018ba:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018bc:	f7ff fbaa 	bl	8001014 <HAL_GetTick>
 80018c0:	0003      	movs	r3, r0
 80018c2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80018c4:	e008      	b.n	80018d8 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018c6:	f7ff fba5 	bl	8001014 <HAL_GetTick>
 80018ca:	0002      	movs	r2, r0
 80018cc:	693b      	ldr	r3, [r7, #16]
 80018ce:	1ad3      	subs	r3, r2, r3
 80018d0:	2b02      	cmp	r3, #2
 80018d2:	d901      	bls.n	80018d8 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80018d4:	2303      	movs	r3, #3
 80018d6:	e1a8      	b.n	8001c2a <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80018d8:	4b1d      	ldr	r3, [pc, #116]	; (8001950 <HAL_RCC_OscConfig+0x32c>)
 80018da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018dc:	2202      	movs	r2, #2
 80018de:	4013      	ands	r3, r2
 80018e0:	d0f1      	beq.n	80018c6 <HAL_RCC_OscConfig+0x2a2>
 80018e2:	e018      	b.n	8001916 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80018e4:	4b1a      	ldr	r3, [pc, #104]	; (8001950 <HAL_RCC_OscConfig+0x32c>)
 80018e6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80018e8:	4b19      	ldr	r3, [pc, #100]	; (8001950 <HAL_RCC_OscConfig+0x32c>)
 80018ea:	2101      	movs	r1, #1
 80018ec:	438a      	bics	r2, r1
 80018ee:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018f0:	f7ff fb90 	bl	8001014 <HAL_GetTick>
 80018f4:	0003      	movs	r3, r0
 80018f6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80018f8:	e008      	b.n	800190c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018fa:	f7ff fb8b 	bl	8001014 <HAL_GetTick>
 80018fe:	0002      	movs	r2, r0
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	1ad3      	subs	r3, r2, r3
 8001904:	2b02      	cmp	r3, #2
 8001906:	d901      	bls.n	800190c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001908:	2303      	movs	r3, #3
 800190a:	e18e      	b.n	8001c2a <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800190c:	4b10      	ldr	r3, [pc, #64]	; (8001950 <HAL_RCC_OscConfig+0x32c>)
 800190e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001910:	2202      	movs	r2, #2
 8001912:	4013      	ands	r3, r2
 8001914:	d1f1      	bne.n	80018fa <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	2204      	movs	r2, #4
 800191c:	4013      	ands	r3, r2
 800191e:	d100      	bne.n	8001922 <HAL_RCC_OscConfig+0x2fe>
 8001920:	e0c6      	b.n	8001ab0 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001922:	231f      	movs	r3, #31
 8001924:	18fb      	adds	r3, r7, r3
 8001926:	2200      	movs	r2, #0
 8001928:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 800192a:	4b09      	ldr	r3, [pc, #36]	; (8001950 <HAL_RCC_OscConfig+0x32c>)
 800192c:	689b      	ldr	r3, [r3, #8]
 800192e:	2238      	movs	r2, #56	; 0x38
 8001930:	4013      	ands	r3, r2
 8001932:	2b20      	cmp	r3, #32
 8001934:	d11e      	bne.n	8001974 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001936:	4b06      	ldr	r3, [pc, #24]	; (8001950 <HAL_RCC_OscConfig+0x32c>)
 8001938:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800193a:	2202      	movs	r2, #2
 800193c:	4013      	ands	r3, r2
 800193e:	d100      	bne.n	8001942 <HAL_RCC_OscConfig+0x31e>
 8001940:	e0b6      	b.n	8001ab0 <HAL_RCC_OscConfig+0x48c>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	689b      	ldr	r3, [r3, #8]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d000      	beq.n	800194c <HAL_RCC_OscConfig+0x328>
 800194a:	e0b1      	b.n	8001ab0 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 800194c:	2301      	movs	r3, #1
 800194e:	e16c      	b.n	8001c2a <HAL_RCC_OscConfig+0x606>
 8001950:	40021000 	.word	0x40021000
 8001954:	fffeffff 	.word	0xfffeffff
 8001958:	fffbffff 	.word	0xfffbffff
 800195c:	ffff80ff 	.word	0xffff80ff
 8001960:	ffffc7ff 	.word	0xffffc7ff
 8001964:	00f42400 	.word	0x00f42400
 8001968:	20000000 	.word	0x20000000
 800196c:	20000004 	.word	0x20000004
 8001970:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001974:	4baf      	ldr	r3, [pc, #700]	; (8001c34 <HAL_RCC_OscConfig+0x610>)
 8001976:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001978:	2380      	movs	r3, #128	; 0x80
 800197a:	055b      	lsls	r3, r3, #21
 800197c:	4013      	ands	r3, r2
 800197e:	d101      	bne.n	8001984 <HAL_RCC_OscConfig+0x360>
 8001980:	2301      	movs	r3, #1
 8001982:	e000      	b.n	8001986 <HAL_RCC_OscConfig+0x362>
 8001984:	2300      	movs	r3, #0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d011      	beq.n	80019ae <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800198a:	4baa      	ldr	r3, [pc, #680]	; (8001c34 <HAL_RCC_OscConfig+0x610>)
 800198c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800198e:	4ba9      	ldr	r3, [pc, #676]	; (8001c34 <HAL_RCC_OscConfig+0x610>)
 8001990:	2180      	movs	r1, #128	; 0x80
 8001992:	0549      	lsls	r1, r1, #21
 8001994:	430a      	orrs	r2, r1
 8001996:	63da      	str	r2, [r3, #60]	; 0x3c
 8001998:	4ba6      	ldr	r3, [pc, #664]	; (8001c34 <HAL_RCC_OscConfig+0x610>)
 800199a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800199c:	2380      	movs	r3, #128	; 0x80
 800199e:	055b      	lsls	r3, r3, #21
 80019a0:	4013      	ands	r3, r2
 80019a2:	60fb      	str	r3, [r7, #12]
 80019a4:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80019a6:	231f      	movs	r3, #31
 80019a8:	18fb      	adds	r3, r7, r3
 80019aa:	2201      	movs	r2, #1
 80019ac:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019ae:	4ba2      	ldr	r3, [pc, #648]	; (8001c38 <HAL_RCC_OscConfig+0x614>)
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	2380      	movs	r3, #128	; 0x80
 80019b4:	005b      	lsls	r3, r3, #1
 80019b6:	4013      	ands	r3, r2
 80019b8:	d11a      	bne.n	80019f0 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80019ba:	4b9f      	ldr	r3, [pc, #636]	; (8001c38 <HAL_RCC_OscConfig+0x614>)
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	4b9e      	ldr	r3, [pc, #632]	; (8001c38 <HAL_RCC_OscConfig+0x614>)
 80019c0:	2180      	movs	r1, #128	; 0x80
 80019c2:	0049      	lsls	r1, r1, #1
 80019c4:	430a      	orrs	r2, r1
 80019c6:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80019c8:	f7ff fb24 	bl	8001014 <HAL_GetTick>
 80019cc:	0003      	movs	r3, r0
 80019ce:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019d0:	e008      	b.n	80019e4 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019d2:	f7ff fb1f 	bl	8001014 <HAL_GetTick>
 80019d6:	0002      	movs	r2, r0
 80019d8:	693b      	ldr	r3, [r7, #16]
 80019da:	1ad3      	subs	r3, r2, r3
 80019dc:	2b02      	cmp	r3, #2
 80019de:	d901      	bls.n	80019e4 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80019e0:	2303      	movs	r3, #3
 80019e2:	e122      	b.n	8001c2a <HAL_RCC_OscConfig+0x606>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019e4:	4b94      	ldr	r3, [pc, #592]	; (8001c38 <HAL_RCC_OscConfig+0x614>)
 80019e6:	681a      	ldr	r2, [r3, #0]
 80019e8:	2380      	movs	r3, #128	; 0x80
 80019ea:	005b      	lsls	r3, r3, #1
 80019ec:	4013      	ands	r3, r2
 80019ee:	d0f0      	beq.n	80019d2 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	2b01      	cmp	r3, #1
 80019f6:	d106      	bne.n	8001a06 <HAL_RCC_OscConfig+0x3e2>
 80019f8:	4b8e      	ldr	r3, [pc, #568]	; (8001c34 <HAL_RCC_OscConfig+0x610>)
 80019fa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80019fc:	4b8d      	ldr	r3, [pc, #564]	; (8001c34 <HAL_RCC_OscConfig+0x610>)
 80019fe:	2101      	movs	r1, #1
 8001a00:	430a      	orrs	r2, r1
 8001a02:	65da      	str	r2, [r3, #92]	; 0x5c
 8001a04:	e01c      	b.n	8001a40 <HAL_RCC_OscConfig+0x41c>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	689b      	ldr	r3, [r3, #8]
 8001a0a:	2b05      	cmp	r3, #5
 8001a0c:	d10c      	bne.n	8001a28 <HAL_RCC_OscConfig+0x404>
 8001a0e:	4b89      	ldr	r3, [pc, #548]	; (8001c34 <HAL_RCC_OscConfig+0x610>)
 8001a10:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001a12:	4b88      	ldr	r3, [pc, #544]	; (8001c34 <HAL_RCC_OscConfig+0x610>)
 8001a14:	2104      	movs	r1, #4
 8001a16:	430a      	orrs	r2, r1
 8001a18:	65da      	str	r2, [r3, #92]	; 0x5c
 8001a1a:	4b86      	ldr	r3, [pc, #536]	; (8001c34 <HAL_RCC_OscConfig+0x610>)
 8001a1c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001a1e:	4b85      	ldr	r3, [pc, #532]	; (8001c34 <HAL_RCC_OscConfig+0x610>)
 8001a20:	2101      	movs	r1, #1
 8001a22:	430a      	orrs	r2, r1
 8001a24:	65da      	str	r2, [r3, #92]	; 0x5c
 8001a26:	e00b      	b.n	8001a40 <HAL_RCC_OscConfig+0x41c>
 8001a28:	4b82      	ldr	r3, [pc, #520]	; (8001c34 <HAL_RCC_OscConfig+0x610>)
 8001a2a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001a2c:	4b81      	ldr	r3, [pc, #516]	; (8001c34 <HAL_RCC_OscConfig+0x610>)
 8001a2e:	2101      	movs	r1, #1
 8001a30:	438a      	bics	r2, r1
 8001a32:	65da      	str	r2, [r3, #92]	; 0x5c
 8001a34:	4b7f      	ldr	r3, [pc, #508]	; (8001c34 <HAL_RCC_OscConfig+0x610>)
 8001a36:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001a38:	4b7e      	ldr	r3, [pc, #504]	; (8001c34 <HAL_RCC_OscConfig+0x610>)
 8001a3a:	2104      	movs	r1, #4
 8001a3c:	438a      	bics	r2, r1
 8001a3e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	689b      	ldr	r3, [r3, #8]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d014      	beq.n	8001a72 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a48:	f7ff fae4 	bl	8001014 <HAL_GetTick>
 8001a4c:	0003      	movs	r3, r0
 8001a4e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a50:	e009      	b.n	8001a66 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a52:	f7ff fadf 	bl	8001014 <HAL_GetTick>
 8001a56:	0002      	movs	r2, r0
 8001a58:	693b      	ldr	r3, [r7, #16]
 8001a5a:	1ad3      	subs	r3, r2, r3
 8001a5c:	4a77      	ldr	r2, [pc, #476]	; (8001c3c <HAL_RCC_OscConfig+0x618>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d901      	bls.n	8001a66 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001a62:	2303      	movs	r3, #3
 8001a64:	e0e1      	b.n	8001c2a <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a66:	4b73      	ldr	r3, [pc, #460]	; (8001c34 <HAL_RCC_OscConfig+0x610>)
 8001a68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a6a:	2202      	movs	r2, #2
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	d0f0      	beq.n	8001a52 <HAL_RCC_OscConfig+0x42e>
 8001a70:	e013      	b.n	8001a9a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a72:	f7ff facf 	bl	8001014 <HAL_GetTick>
 8001a76:	0003      	movs	r3, r0
 8001a78:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a7a:	e009      	b.n	8001a90 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a7c:	f7ff faca 	bl	8001014 <HAL_GetTick>
 8001a80:	0002      	movs	r2, r0
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	1ad3      	subs	r3, r2, r3
 8001a86:	4a6d      	ldr	r2, [pc, #436]	; (8001c3c <HAL_RCC_OscConfig+0x618>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d901      	bls.n	8001a90 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	e0cc      	b.n	8001c2a <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a90:	4b68      	ldr	r3, [pc, #416]	; (8001c34 <HAL_RCC_OscConfig+0x610>)
 8001a92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a94:	2202      	movs	r2, #2
 8001a96:	4013      	ands	r3, r2
 8001a98:	d1f0      	bne.n	8001a7c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001a9a:	231f      	movs	r3, #31
 8001a9c:	18fb      	adds	r3, r7, r3
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d105      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001aa4:	4b63      	ldr	r3, [pc, #396]	; (8001c34 <HAL_RCC_OscConfig+0x610>)
 8001aa6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001aa8:	4b62      	ldr	r3, [pc, #392]	; (8001c34 <HAL_RCC_OscConfig+0x610>)
 8001aaa:	4965      	ldr	r1, [pc, #404]	; (8001c40 <HAL_RCC_OscConfig+0x61c>)
 8001aac:	400a      	ands	r2, r1
 8001aae:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	69db      	ldr	r3, [r3, #28]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d100      	bne.n	8001aba <HAL_RCC_OscConfig+0x496>
 8001ab8:	e0b6      	b.n	8001c28 <HAL_RCC_OscConfig+0x604>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001aba:	4b5e      	ldr	r3, [pc, #376]	; (8001c34 <HAL_RCC_OscConfig+0x610>)
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	2238      	movs	r2, #56	; 0x38
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	2b10      	cmp	r3, #16
 8001ac4:	d100      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x4a4>
 8001ac6:	e07e      	b.n	8001bc6 <HAL_RCC_OscConfig+0x5a2>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	69db      	ldr	r3, [r3, #28]
 8001acc:	2b02      	cmp	r3, #2
 8001ace:	d153      	bne.n	8001b78 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ad0:	4b58      	ldr	r3, [pc, #352]	; (8001c34 <HAL_RCC_OscConfig+0x610>)
 8001ad2:	681a      	ldr	r2, [r3, #0]
 8001ad4:	4b57      	ldr	r3, [pc, #348]	; (8001c34 <HAL_RCC_OscConfig+0x610>)
 8001ad6:	495b      	ldr	r1, [pc, #364]	; (8001c44 <HAL_RCC_OscConfig+0x620>)
 8001ad8:	400a      	ands	r2, r1
 8001ada:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001adc:	f7ff fa9a 	bl	8001014 <HAL_GetTick>
 8001ae0:	0003      	movs	r3, r0
 8001ae2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ae4:	e008      	b.n	8001af8 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ae6:	f7ff fa95 	bl	8001014 <HAL_GetTick>
 8001aea:	0002      	movs	r2, r0
 8001aec:	693b      	ldr	r3, [r7, #16]
 8001aee:	1ad3      	subs	r3, r2, r3
 8001af0:	2b02      	cmp	r3, #2
 8001af2:	d901      	bls.n	8001af8 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001af4:	2303      	movs	r3, #3
 8001af6:	e098      	b.n	8001c2a <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001af8:	4b4e      	ldr	r3, [pc, #312]	; (8001c34 <HAL_RCC_OscConfig+0x610>)
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	2380      	movs	r3, #128	; 0x80
 8001afe:	049b      	lsls	r3, r3, #18
 8001b00:	4013      	ands	r3, r2
 8001b02:	d1f0      	bne.n	8001ae6 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b04:	4b4b      	ldr	r3, [pc, #300]	; (8001c34 <HAL_RCC_OscConfig+0x610>)
 8001b06:	68db      	ldr	r3, [r3, #12]
 8001b08:	4a4f      	ldr	r2, [pc, #316]	; (8001c48 <HAL_RCC_OscConfig+0x624>)
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	0019      	movs	r1, r3
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6a1a      	ldr	r2, [r3, #32]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b16:	431a      	orrs	r2, r3
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b1c:	021b      	lsls	r3, r3, #8
 8001b1e:	431a      	orrs	r2, r3
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b24:	431a      	orrs	r2, r3
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2a:	431a      	orrs	r2, r3
 8001b2c:	4b41      	ldr	r3, [pc, #260]	; (8001c34 <HAL_RCC_OscConfig+0x610>)
 8001b2e:	430a      	orrs	r2, r1
 8001b30:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b32:	4b40      	ldr	r3, [pc, #256]	; (8001c34 <HAL_RCC_OscConfig+0x610>)
 8001b34:	681a      	ldr	r2, [r3, #0]
 8001b36:	4b3f      	ldr	r3, [pc, #252]	; (8001c34 <HAL_RCC_OscConfig+0x610>)
 8001b38:	2180      	movs	r1, #128	; 0x80
 8001b3a:	0449      	lsls	r1, r1, #17
 8001b3c:	430a      	orrs	r2, r1
 8001b3e:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001b40:	4b3c      	ldr	r3, [pc, #240]	; (8001c34 <HAL_RCC_OscConfig+0x610>)
 8001b42:	68da      	ldr	r2, [r3, #12]
 8001b44:	4b3b      	ldr	r3, [pc, #236]	; (8001c34 <HAL_RCC_OscConfig+0x610>)
 8001b46:	2180      	movs	r1, #128	; 0x80
 8001b48:	0549      	lsls	r1, r1, #21
 8001b4a:	430a      	orrs	r2, r1
 8001b4c:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b4e:	f7ff fa61 	bl	8001014 <HAL_GetTick>
 8001b52:	0003      	movs	r3, r0
 8001b54:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b56:	e008      	b.n	8001b6a <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b58:	f7ff fa5c 	bl	8001014 <HAL_GetTick>
 8001b5c:	0002      	movs	r2, r0
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	2b02      	cmp	r3, #2
 8001b64:	d901      	bls.n	8001b6a <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8001b66:	2303      	movs	r3, #3
 8001b68:	e05f      	b.n	8001c2a <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b6a:	4b32      	ldr	r3, [pc, #200]	; (8001c34 <HAL_RCC_OscConfig+0x610>)
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	2380      	movs	r3, #128	; 0x80
 8001b70:	049b      	lsls	r3, r3, #18
 8001b72:	4013      	ands	r3, r2
 8001b74:	d0f0      	beq.n	8001b58 <HAL_RCC_OscConfig+0x534>
 8001b76:	e057      	b.n	8001c28 <HAL_RCC_OscConfig+0x604>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b78:	4b2e      	ldr	r3, [pc, #184]	; (8001c34 <HAL_RCC_OscConfig+0x610>)
 8001b7a:	681a      	ldr	r2, [r3, #0]
 8001b7c:	4b2d      	ldr	r3, [pc, #180]	; (8001c34 <HAL_RCC_OscConfig+0x610>)
 8001b7e:	4931      	ldr	r1, [pc, #196]	; (8001c44 <HAL_RCC_OscConfig+0x620>)
 8001b80:	400a      	ands	r2, r1
 8001b82:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8001b84:	4b2b      	ldr	r3, [pc, #172]	; (8001c34 <HAL_RCC_OscConfig+0x610>)
 8001b86:	68da      	ldr	r2, [r3, #12]
 8001b88:	4b2a      	ldr	r3, [pc, #168]	; (8001c34 <HAL_RCC_OscConfig+0x610>)
 8001b8a:	2103      	movs	r1, #3
 8001b8c:	438a      	bics	r2, r1
 8001b8e:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8001b90:	4b28      	ldr	r3, [pc, #160]	; (8001c34 <HAL_RCC_OscConfig+0x610>)
 8001b92:	68da      	ldr	r2, [r3, #12]
 8001b94:	4b27      	ldr	r3, [pc, #156]	; (8001c34 <HAL_RCC_OscConfig+0x610>)
 8001b96:	492d      	ldr	r1, [pc, #180]	; (8001c4c <HAL_RCC_OscConfig+0x628>)
 8001b98:	400a      	ands	r2, r1
 8001b9a:	60da      	str	r2, [r3, #12]
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b9c:	f7ff fa3a 	bl	8001014 <HAL_GetTick>
 8001ba0:	0003      	movs	r3, r0
 8001ba2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ba4:	e008      	b.n	8001bb8 <HAL_RCC_OscConfig+0x594>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ba6:	f7ff fa35 	bl	8001014 <HAL_GetTick>
 8001baa:	0002      	movs	r2, r0
 8001bac:	693b      	ldr	r3, [r7, #16]
 8001bae:	1ad3      	subs	r3, r2, r3
 8001bb0:	2b02      	cmp	r3, #2
 8001bb2:	d901      	bls.n	8001bb8 <HAL_RCC_OscConfig+0x594>
          {
            return HAL_TIMEOUT;
 8001bb4:	2303      	movs	r3, #3
 8001bb6:	e038      	b.n	8001c2a <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bb8:	4b1e      	ldr	r3, [pc, #120]	; (8001c34 <HAL_RCC_OscConfig+0x610>)
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	2380      	movs	r3, #128	; 0x80
 8001bbe:	049b      	lsls	r3, r3, #18
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	d1f0      	bne.n	8001ba6 <HAL_RCC_OscConfig+0x582>
 8001bc4:	e030      	b.n	8001c28 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	69db      	ldr	r3, [r3, #28]
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	d101      	bne.n	8001bd2 <HAL_RCC_OscConfig+0x5ae>
      {
        return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e02b      	b.n	8001c2a <HAL_RCC_OscConfig+0x606>
      }
      else
      {   
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001bd2:	4b18      	ldr	r3, [pc, #96]	; (8001c34 <HAL_RCC_OscConfig+0x610>)
 8001bd4:	68db      	ldr	r3, [r3, #12]
 8001bd6:	617b      	str	r3, [r7, #20]
        if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	2203      	movs	r2, #3
 8001bdc:	401a      	ands	r2, r3
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6a1b      	ldr	r3, [r3, #32]
 8001be2:	429a      	cmp	r2, r3
 8001be4:	d11e      	bne.n	8001c24 <HAL_RCC_OscConfig+0x600>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	2270      	movs	r2, #112	; 0x70
 8001bea:	401a      	ands	r2, r3
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	d117      	bne.n	8001c24 <HAL_RCC_OscConfig+0x600>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001bf4:	697a      	ldr	r2, [r7, #20]
 8001bf6:	23fe      	movs	r3, #254	; 0xfe
 8001bf8:	01db      	lsls	r3, r3, #7
 8001bfa:	401a      	ands	r2, r3
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c00:	021b      	lsls	r3, r3, #8
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001c02:	429a      	cmp	r2, r3
 8001c04:	d10e      	bne.n	8001c24 <HAL_RCC_OscConfig+0x600>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001c06:	697a      	ldr	r2, [r7, #20]
 8001c08:	23f8      	movs	r3, #248	; 0xf8
 8001c0a:	039b      	lsls	r3, r3, #14
 8001c0c:	401a      	ands	r2, r3
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c12:	429a      	cmp	r2, r3
 8001c14:	d106      	bne.n	8001c24 <HAL_RCC_OscConfig+0x600>
#if defined (RCC_PLLQ_SUPPORT)
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001c16:	697b      	ldr	r3, [r7, #20]
 8001c18:	0f5b      	lsrs	r3, r3, #29
 8001c1a:	075a      	lsls	r2, r3, #29
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001c20:	429a      	cmp	r2, r3
 8001c22:	d001      	beq.n	8001c28 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_ERROR;
 8001c24:	2301      	movs	r3, #1
 8001c26:	e000      	b.n	8001c2a <HAL_RCC_OscConfig+0x606>
        }
      }
    }
  }
  return HAL_OK;
 8001c28:	2300      	movs	r3, #0
}
 8001c2a:	0018      	movs	r0, r3
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	b008      	add	sp, #32
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	46c0      	nop			; (mov r8, r8)
 8001c34:	40021000 	.word	0x40021000
 8001c38:	40007000 	.word	0x40007000
 8001c3c:	00001388 	.word	0x00001388
 8001c40:	efffffff 	.word	0xefffffff
 8001c44:	feffffff 	.word	0xfeffffff
 8001c48:	1fc1808c 	.word	0x1fc1808c
 8001c4c:	effeffff 	.word	0xeffeffff

08001c50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b084      	sub	sp, #16
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
 8001c58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d101      	bne.n	8001c64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c60:	2301      	movs	r3, #1
 8001c62:	e0e9      	b.n	8001e38 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c64:	4b76      	ldr	r3, [pc, #472]	; (8001e40 <HAL_RCC_ClockConfig+0x1f0>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	2207      	movs	r2, #7
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	683a      	ldr	r2, [r7, #0]
 8001c6e:	429a      	cmp	r2, r3
 8001c70:	d91e      	bls.n	8001cb0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c72:	4b73      	ldr	r3, [pc, #460]	; (8001e40 <HAL_RCC_ClockConfig+0x1f0>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	2207      	movs	r2, #7
 8001c78:	4393      	bics	r3, r2
 8001c7a:	0019      	movs	r1, r3
 8001c7c:	4b70      	ldr	r3, [pc, #448]	; (8001e40 <HAL_RCC_ClockConfig+0x1f0>)
 8001c7e:	683a      	ldr	r2, [r7, #0]
 8001c80:	430a      	orrs	r2, r1
 8001c82:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001c84:	f7ff f9c6 	bl	8001014 <HAL_GetTick>
 8001c88:	0003      	movs	r3, r0
 8001c8a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001c8c:	e009      	b.n	8001ca2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c8e:	f7ff f9c1 	bl	8001014 <HAL_GetTick>
 8001c92:	0002      	movs	r2, r0
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	1ad3      	subs	r3, r2, r3
 8001c98:	4a6a      	ldr	r2, [pc, #424]	; (8001e44 <HAL_RCC_ClockConfig+0x1f4>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d901      	bls.n	8001ca2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001c9e:	2303      	movs	r3, #3
 8001ca0:	e0ca      	b.n	8001e38 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001ca2:	4b67      	ldr	r3, [pc, #412]	; (8001e40 <HAL_RCC_ClockConfig+0x1f0>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	2207      	movs	r2, #7
 8001ca8:	4013      	ands	r3, r2
 8001caa:	683a      	ldr	r2, [r7, #0]
 8001cac:	429a      	cmp	r2, r3
 8001cae:	d1ee      	bne.n	8001c8e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	2202      	movs	r2, #2
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	d015      	beq.n	8001ce6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	2204      	movs	r2, #4
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	d006      	beq.n	8001cd2 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001cc4:	4b60      	ldr	r3, [pc, #384]	; (8001e48 <HAL_RCC_ClockConfig+0x1f8>)
 8001cc6:	689a      	ldr	r2, [r3, #8]
 8001cc8:	4b5f      	ldr	r3, [pc, #380]	; (8001e48 <HAL_RCC_ClockConfig+0x1f8>)
 8001cca:	21e0      	movs	r1, #224	; 0xe0
 8001ccc:	01c9      	lsls	r1, r1, #7
 8001cce:	430a      	orrs	r2, r1
 8001cd0:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cd2:	4b5d      	ldr	r3, [pc, #372]	; (8001e48 <HAL_RCC_ClockConfig+0x1f8>)
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	4a5d      	ldr	r2, [pc, #372]	; (8001e4c <HAL_RCC_ClockConfig+0x1fc>)
 8001cd8:	4013      	ands	r3, r2
 8001cda:	0019      	movs	r1, r3
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	689a      	ldr	r2, [r3, #8]
 8001ce0:	4b59      	ldr	r3, [pc, #356]	; (8001e48 <HAL_RCC_ClockConfig+0x1f8>)
 8001ce2:	430a      	orrs	r2, r1
 8001ce4:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	2201      	movs	r2, #1
 8001cec:	4013      	ands	r3, r2
 8001cee:	d057      	beq.n	8001da0 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	2b01      	cmp	r3, #1
 8001cf6:	d107      	bne.n	8001d08 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001cf8:	4b53      	ldr	r3, [pc, #332]	; (8001e48 <HAL_RCC_ClockConfig+0x1f8>)
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	2380      	movs	r3, #128	; 0x80
 8001cfe:	029b      	lsls	r3, r3, #10
 8001d00:	4013      	ands	r3, r2
 8001d02:	d12b      	bne.n	8001d5c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001d04:	2301      	movs	r3, #1
 8001d06:	e097      	b.n	8001e38 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	2b02      	cmp	r3, #2
 8001d0e:	d107      	bne.n	8001d20 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d10:	4b4d      	ldr	r3, [pc, #308]	; (8001e48 <HAL_RCC_ClockConfig+0x1f8>)
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	2380      	movs	r3, #128	; 0x80
 8001d16:	049b      	lsls	r3, r3, #18
 8001d18:	4013      	ands	r3, r2
 8001d1a:	d11f      	bne.n	8001d5c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	e08b      	b.n	8001e38 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d107      	bne.n	8001d38 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d28:	4b47      	ldr	r3, [pc, #284]	; (8001e48 <HAL_RCC_ClockConfig+0x1f8>)
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	2380      	movs	r3, #128	; 0x80
 8001d2e:	00db      	lsls	r3, r3, #3
 8001d30:	4013      	ands	r3, r2
 8001d32:	d113      	bne.n	8001d5c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001d34:	2301      	movs	r3, #1
 8001d36:	e07f      	b.n	8001e38 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	2b03      	cmp	r3, #3
 8001d3e:	d106      	bne.n	8001d4e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d40:	4b41      	ldr	r3, [pc, #260]	; (8001e48 <HAL_RCC_ClockConfig+0x1f8>)
 8001d42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d44:	2202      	movs	r2, #2
 8001d46:	4013      	ands	r3, r2
 8001d48:	d108      	bne.n	8001d5c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e074      	b.n	8001e38 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d4e:	4b3e      	ldr	r3, [pc, #248]	; (8001e48 <HAL_RCC_ClockConfig+0x1f8>)
 8001d50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d52:	2202      	movs	r2, #2
 8001d54:	4013      	ands	r3, r2
 8001d56:	d101      	bne.n	8001d5c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	e06d      	b.n	8001e38 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001d5c:	4b3a      	ldr	r3, [pc, #232]	; (8001e48 <HAL_RCC_ClockConfig+0x1f8>)
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	2207      	movs	r2, #7
 8001d62:	4393      	bics	r3, r2
 8001d64:	0019      	movs	r1, r3
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	685a      	ldr	r2, [r3, #4]
 8001d6a:	4b37      	ldr	r3, [pc, #220]	; (8001e48 <HAL_RCC_ClockConfig+0x1f8>)
 8001d6c:	430a      	orrs	r2, r1
 8001d6e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d70:	f7ff f950 	bl	8001014 <HAL_GetTick>
 8001d74:	0003      	movs	r3, r0
 8001d76:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d78:	e009      	b.n	8001d8e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d7a:	f7ff f94b 	bl	8001014 <HAL_GetTick>
 8001d7e:	0002      	movs	r2, r0
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	1ad3      	subs	r3, r2, r3
 8001d84:	4a2f      	ldr	r2, [pc, #188]	; (8001e44 <HAL_RCC_ClockConfig+0x1f4>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d901      	bls.n	8001d8e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001d8a:	2303      	movs	r3, #3
 8001d8c:	e054      	b.n	8001e38 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d8e:	4b2e      	ldr	r3, [pc, #184]	; (8001e48 <HAL_RCC_ClockConfig+0x1f8>)
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	2238      	movs	r2, #56	; 0x38
 8001d94:	401a      	ands	r2, r3
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	00db      	lsls	r3, r3, #3
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	d1ec      	bne.n	8001d7a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001da0:	4b27      	ldr	r3, [pc, #156]	; (8001e40 <HAL_RCC_ClockConfig+0x1f0>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	2207      	movs	r2, #7
 8001da6:	4013      	ands	r3, r2
 8001da8:	683a      	ldr	r2, [r7, #0]
 8001daa:	429a      	cmp	r2, r3
 8001dac:	d21e      	bcs.n	8001dec <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dae:	4b24      	ldr	r3, [pc, #144]	; (8001e40 <HAL_RCC_ClockConfig+0x1f0>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	2207      	movs	r2, #7
 8001db4:	4393      	bics	r3, r2
 8001db6:	0019      	movs	r1, r3
 8001db8:	4b21      	ldr	r3, [pc, #132]	; (8001e40 <HAL_RCC_ClockConfig+0x1f0>)
 8001dba:	683a      	ldr	r2, [r7, #0]
 8001dbc:	430a      	orrs	r2, r1
 8001dbe:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001dc0:	f7ff f928 	bl	8001014 <HAL_GetTick>
 8001dc4:	0003      	movs	r3, r0
 8001dc6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001dc8:	e009      	b.n	8001dde <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dca:	f7ff f923 	bl	8001014 <HAL_GetTick>
 8001dce:	0002      	movs	r2, r0
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	1ad3      	subs	r3, r2, r3
 8001dd4:	4a1b      	ldr	r2, [pc, #108]	; (8001e44 <HAL_RCC_ClockConfig+0x1f4>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d901      	bls.n	8001dde <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001dda:	2303      	movs	r3, #3
 8001ddc:	e02c      	b.n	8001e38 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001dde:	4b18      	ldr	r3, [pc, #96]	; (8001e40 <HAL_RCC_ClockConfig+0x1f0>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	2207      	movs	r2, #7
 8001de4:	4013      	ands	r3, r2
 8001de6:	683a      	ldr	r2, [r7, #0]
 8001de8:	429a      	cmp	r2, r3
 8001dea:	d1ee      	bne.n	8001dca <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	2204      	movs	r2, #4
 8001df2:	4013      	ands	r3, r2
 8001df4:	d009      	beq.n	8001e0a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001df6:	4b14      	ldr	r3, [pc, #80]	; (8001e48 <HAL_RCC_ClockConfig+0x1f8>)
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	4a15      	ldr	r2, [pc, #84]	; (8001e50 <HAL_RCC_ClockConfig+0x200>)
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	0019      	movs	r1, r3
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	68da      	ldr	r2, [r3, #12]
 8001e04:	4b10      	ldr	r3, [pc, #64]	; (8001e48 <HAL_RCC_ClockConfig+0x1f8>)
 8001e06:	430a      	orrs	r2, r1
 8001e08:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001e0a:	f000 f829 	bl	8001e60 <HAL_RCC_GetSysClockFreq>
 8001e0e:	0001      	movs	r1, r0
 8001e10:	4b0d      	ldr	r3, [pc, #52]	; (8001e48 <HAL_RCC_ClockConfig+0x1f8>)
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	0a1b      	lsrs	r3, r3, #8
 8001e16:	220f      	movs	r2, #15
 8001e18:	401a      	ands	r2, r3
 8001e1a:	4b0e      	ldr	r3, [pc, #56]	; (8001e54 <HAL_RCC_ClockConfig+0x204>)
 8001e1c:	0092      	lsls	r2, r2, #2
 8001e1e:	58d3      	ldr	r3, [r2, r3]
 8001e20:	221f      	movs	r2, #31
 8001e22:	4013      	ands	r3, r2
 8001e24:	000a      	movs	r2, r1
 8001e26:	40da      	lsrs	r2, r3
 8001e28:	4b0b      	ldr	r3, [pc, #44]	; (8001e58 <HAL_RCC_ClockConfig+0x208>)
 8001e2a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001e2c:	4b0b      	ldr	r3, [pc, #44]	; (8001e5c <HAL_RCC_ClockConfig+0x20c>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	0018      	movs	r0, r3
 8001e32:	f7ff f895 	bl	8000f60 <HAL_InitTick>
 8001e36:	0003      	movs	r3, r0
}
 8001e38:	0018      	movs	r0, r3
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	b004      	add	sp, #16
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	40022000 	.word	0x40022000
 8001e44:	00001388 	.word	0x00001388
 8001e48:	40021000 	.word	0x40021000
 8001e4c:	fffff0ff 	.word	0xfffff0ff
 8001e50:	ffff8fff 	.word	0xffff8fff
 8001e54:	080038e4 	.word	0x080038e4
 8001e58:	20000000 	.word	0x20000000
 8001e5c:	20000004 	.word	0x20000004

08001e60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b086      	sub	sp, #24
 8001e64:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001e66:	4b3c      	ldr	r3, [pc, #240]	; (8001f58 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	2238      	movs	r2, #56	; 0x38
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	d10f      	bne.n	8001e90 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001e70:	4b39      	ldr	r3, [pc, #228]	; (8001f58 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	0adb      	lsrs	r3, r3, #11
 8001e76:	2207      	movs	r2, #7
 8001e78:	4013      	ands	r3, r2
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	409a      	lsls	r2, r3
 8001e7e:	0013      	movs	r3, r2
 8001e80:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001e82:	6839      	ldr	r1, [r7, #0]
 8001e84:	4835      	ldr	r0, [pc, #212]	; (8001f5c <HAL_RCC_GetSysClockFreq+0xfc>)
 8001e86:	f7fe f93b 	bl	8000100 <__udivsi3>
 8001e8a:	0003      	movs	r3, r0
 8001e8c:	613b      	str	r3, [r7, #16]
 8001e8e:	e05d      	b.n	8001f4c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001e90:	4b31      	ldr	r3, [pc, #196]	; (8001f58 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	2238      	movs	r2, #56	; 0x38
 8001e96:	4013      	ands	r3, r2
 8001e98:	2b08      	cmp	r3, #8
 8001e9a:	d102      	bne.n	8001ea2 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001e9c:	4b30      	ldr	r3, [pc, #192]	; (8001f60 <HAL_RCC_GetSysClockFreq+0x100>)
 8001e9e:	613b      	str	r3, [r7, #16]
 8001ea0:	e054      	b.n	8001f4c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001ea2:	4b2d      	ldr	r3, [pc, #180]	; (8001f58 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	2238      	movs	r2, #56	; 0x38
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	2b10      	cmp	r3, #16
 8001eac:	d138      	bne.n	8001f20 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001eae:	4b2a      	ldr	r3, [pc, #168]	; (8001f58 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001eb0:	68db      	ldr	r3, [r3, #12]
 8001eb2:	2203      	movs	r2, #3
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001eb8:	4b27      	ldr	r3, [pc, #156]	; (8001f58 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	091b      	lsrs	r3, r3, #4
 8001ebe:	2207      	movs	r2, #7
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	3301      	adds	r3, #1
 8001ec4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	2b03      	cmp	r3, #3
 8001eca:	d10d      	bne.n	8001ee8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco =  (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001ecc:	68b9      	ldr	r1, [r7, #8]
 8001ece:	4824      	ldr	r0, [pc, #144]	; (8001f60 <HAL_RCC_GetSysClockFreq+0x100>)
 8001ed0:	f7fe f916 	bl	8000100 <__udivsi3>
 8001ed4:	0003      	movs	r3, r0
 8001ed6:	0019      	movs	r1, r3
 8001ed8:	4b1f      	ldr	r3, [pc, #124]	; (8001f58 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	0a1b      	lsrs	r3, r3, #8
 8001ede:	227f      	movs	r2, #127	; 0x7f
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	434b      	muls	r3, r1
 8001ee4:	617b      	str	r3, [r7, #20]
        break;
 8001ee6:	e00d      	b.n	8001f04 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001ee8:	68b9      	ldr	r1, [r7, #8]
 8001eea:	481c      	ldr	r0, [pc, #112]	; (8001f5c <HAL_RCC_GetSysClockFreq+0xfc>)
 8001eec:	f7fe f908 	bl	8000100 <__udivsi3>
 8001ef0:	0003      	movs	r3, r0
 8001ef2:	0019      	movs	r1, r3
 8001ef4:	4b18      	ldr	r3, [pc, #96]	; (8001f58 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ef6:	68db      	ldr	r3, [r3, #12]
 8001ef8:	0a1b      	lsrs	r3, r3, #8
 8001efa:	227f      	movs	r2, #127	; 0x7f
 8001efc:	4013      	ands	r3, r2
 8001efe:	434b      	muls	r3, r1
 8001f00:	617b      	str	r3, [r7, #20]
        break;
 8001f02:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001f04:	4b14      	ldr	r3, [pc, #80]	; (8001f58 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f06:	68db      	ldr	r3, [r3, #12]
 8001f08:	0f5b      	lsrs	r3, r3, #29
 8001f0a:	2207      	movs	r2, #7
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	3301      	adds	r3, #1
 8001f10:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001f12:	6879      	ldr	r1, [r7, #4]
 8001f14:	6978      	ldr	r0, [r7, #20]
 8001f16:	f7fe f8f3 	bl	8000100 <__udivsi3>
 8001f1a:	0003      	movs	r3, r0
 8001f1c:	613b      	str	r3, [r7, #16]
 8001f1e:	e015      	b.n	8001f4c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8001f20:	4b0d      	ldr	r3, [pc, #52]	; (8001f58 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	2238      	movs	r2, #56	; 0x38
 8001f26:	4013      	ands	r3, r2
 8001f28:	2b20      	cmp	r3, #32
 8001f2a:	d103      	bne.n	8001f34 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001f2c:	2380      	movs	r3, #128	; 0x80
 8001f2e:	021b      	lsls	r3, r3, #8
 8001f30:	613b      	str	r3, [r7, #16]
 8001f32:	e00b      	b.n	8001f4c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8001f34:	4b08      	ldr	r3, [pc, #32]	; (8001f58 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	2238      	movs	r2, #56	; 0x38
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	2b18      	cmp	r3, #24
 8001f3e:	d103      	bne.n	8001f48 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001f40:	23fa      	movs	r3, #250	; 0xfa
 8001f42:	01db      	lsls	r3, r3, #7
 8001f44:	613b      	str	r3, [r7, #16]
 8001f46:	e001      	b.n	8001f4c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001f4c:	693b      	ldr	r3, [r7, #16]
}
 8001f4e:	0018      	movs	r0, r3
 8001f50:	46bd      	mov	sp, r7
 8001f52:	b006      	add	sp, #24
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	46c0      	nop			; (mov r8, r8)
 8001f58:	40021000 	.word	0x40021000
 8001f5c:	00f42400 	.word	0x00f42400
 8001f60:	007a1200 	.word	0x007a1200

08001f64 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f68:	4b02      	ldr	r3, [pc, #8]	; (8001f74 <HAL_RCC_GetHCLKFreq+0x10>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
}
 8001f6c:	0018      	movs	r0, r3
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	46c0      	nop			; (mov r8, r8)
 8001f74:	20000000 	.word	0x20000000

08001f78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f78:	b5b0      	push	{r4, r5, r7, lr}
 8001f7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001f7c:	f7ff fff2 	bl	8001f64 <HAL_RCC_GetHCLKFreq>
 8001f80:	0004      	movs	r4, r0
 8001f82:	f7ff fb43 	bl	800160c <LL_RCC_GetAPB1Prescaler>
 8001f86:	0003      	movs	r3, r0
 8001f88:	0b1a      	lsrs	r2, r3, #12
 8001f8a:	4b05      	ldr	r3, [pc, #20]	; (8001fa0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001f8c:	0092      	lsls	r2, r2, #2
 8001f8e:	58d3      	ldr	r3, [r2, r3]
 8001f90:	221f      	movs	r2, #31
 8001f92:	4013      	ands	r3, r2
 8001f94:	40dc      	lsrs	r4, r3
 8001f96:	0023      	movs	r3, r4
}
 8001f98:	0018      	movs	r0, r3
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bdb0      	pop	{r4, r5, r7, pc}
 8001f9e:	46c0      	nop			; (mov r8, r8)
 8001fa0:	08003924 	.word	0x08003924

08001fa4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b086      	sub	sp, #24
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001fac:	2313      	movs	r3, #19
 8001fae:	18fb      	adds	r3, r7, r3
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001fb4:	2312      	movs	r3, #18
 8001fb6:	18fb      	adds	r3, r7, r3
 8001fb8:	2200      	movs	r2, #0
 8001fba:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	2380      	movs	r3, #128	; 0x80
 8001fc2:	029b      	lsls	r3, r3, #10
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	d100      	bne.n	8001fca <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001fc8:	e0a4      	b.n	8002114 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fca:	2311      	movs	r3, #17
 8001fcc:	18fb      	adds	r3, r7, r3
 8001fce:	2200      	movs	r2, #0
 8001fd0:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fd2:	4b87      	ldr	r3, [pc, #540]	; (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001fd4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001fd6:	2380      	movs	r3, #128	; 0x80
 8001fd8:	055b      	lsls	r3, r3, #21
 8001fda:	4013      	ands	r3, r2
 8001fdc:	d111      	bne.n	8002002 <HAL_RCCEx_PeriphCLKConfig+0x5e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fde:	4b84      	ldr	r3, [pc, #528]	; (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001fe0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001fe2:	4b83      	ldr	r3, [pc, #524]	; (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001fe4:	2180      	movs	r1, #128	; 0x80
 8001fe6:	0549      	lsls	r1, r1, #21
 8001fe8:	430a      	orrs	r2, r1
 8001fea:	63da      	str	r2, [r3, #60]	; 0x3c
 8001fec:	4b80      	ldr	r3, [pc, #512]	; (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001fee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001ff0:	2380      	movs	r3, #128	; 0x80
 8001ff2:	055b      	lsls	r3, r3, #21
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	60bb      	str	r3, [r7, #8]
 8001ff8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ffa:	2311      	movs	r3, #17
 8001ffc:	18fb      	adds	r3, r7, r3
 8001ffe:	2201      	movs	r2, #1
 8002000:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002002:	4b7c      	ldr	r3, [pc, #496]	; (80021f4 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	4b7b      	ldr	r3, [pc, #492]	; (80021f4 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002008:	2180      	movs	r1, #128	; 0x80
 800200a:	0049      	lsls	r1, r1, #1
 800200c:	430a      	orrs	r2, r1
 800200e:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002010:	f7ff f800 	bl	8001014 <HAL_GetTick>
 8002014:	0003      	movs	r3, r0
 8002016:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002018:	e00b      	b.n	8002032 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800201a:	f7fe fffb 	bl	8001014 <HAL_GetTick>
 800201e:	0002      	movs	r2, r0
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	1ad3      	subs	r3, r2, r3
 8002024:	2b02      	cmp	r3, #2
 8002026:	d904      	bls.n	8002032 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        ret = HAL_TIMEOUT;
 8002028:	2313      	movs	r3, #19
 800202a:	18fb      	adds	r3, r7, r3
 800202c:	2203      	movs	r2, #3
 800202e:	701a      	strb	r2, [r3, #0]
        break;
 8002030:	e005      	b.n	800203e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002032:	4b70      	ldr	r3, [pc, #448]	; (80021f4 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	2380      	movs	r3, #128	; 0x80
 8002038:	005b      	lsls	r3, r3, #1
 800203a:	4013      	ands	r3, r2
 800203c:	d0ed      	beq.n	800201a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }

    if (ret == HAL_OK)
 800203e:	2313      	movs	r3, #19
 8002040:	18fb      	adds	r3, r7, r3
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d154      	bne.n	80020f2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002048:	4b69      	ldr	r3, [pc, #420]	; (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800204a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800204c:	23c0      	movs	r3, #192	; 0xc0
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	4013      	ands	r3, r2
 8002052:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d019      	beq.n	800208e <HAL_RCCEx_PeriphCLKConfig+0xea>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	699b      	ldr	r3, [r3, #24]
 800205e:	697a      	ldr	r2, [r7, #20]
 8002060:	429a      	cmp	r2, r3
 8002062:	d014      	beq.n	800208e <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002064:	4b62      	ldr	r3, [pc, #392]	; (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002066:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002068:	4a63      	ldr	r2, [pc, #396]	; (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800206a:	4013      	ands	r3, r2
 800206c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800206e:	4b60      	ldr	r3, [pc, #384]	; (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002070:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002072:	4b5f      	ldr	r3, [pc, #380]	; (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002074:	2180      	movs	r1, #128	; 0x80
 8002076:	0249      	lsls	r1, r1, #9
 8002078:	430a      	orrs	r2, r1
 800207a:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800207c:	4b5c      	ldr	r3, [pc, #368]	; (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800207e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002080:	4b5b      	ldr	r3, [pc, #364]	; (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002082:	495e      	ldr	r1, [pc, #376]	; (80021fc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002084:	400a      	ands	r2, r1
 8002086:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002088:	4b59      	ldr	r3, [pc, #356]	; (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800208a:	697a      	ldr	r2, [r7, #20]
 800208c:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	2201      	movs	r2, #1
 8002092:	4013      	ands	r3, r2
 8002094:	d016      	beq.n	80020c4 <HAL_RCCEx_PeriphCLKConfig+0x120>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002096:	f7fe ffbd 	bl	8001014 <HAL_GetTick>
 800209a:	0003      	movs	r3, r0
 800209c:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800209e:	e00c      	b.n	80020ba <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020a0:	f7fe ffb8 	bl	8001014 <HAL_GetTick>
 80020a4:	0002      	movs	r2, r0
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	4a55      	ldr	r2, [pc, #340]	; (8002200 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d904      	bls.n	80020ba <HAL_RCCEx_PeriphCLKConfig+0x116>
          {
            ret = HAL_TIMEOUT;
 80020b0:	2313      	movs	r3, #19
 80020b2:	18fb      	adds	r3, r7, r3
 80020b4:	2203      	movs	r2, #3
 80020b6:	701a      	strb	r2, [r3, #0]
            break;
 80020b8:	e004      	b.n	80020c4 <HAL_RCCEx_PeriphCLKConfig+0x120>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020ba:	4b4d      	ldr	r3, [pc, #308]	; (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80020bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020be:	2202      	movs	r2, #2
 80020c0:	4013      	ands	r3, r2
 80020c2:	d0ed      	beq.n	80020a0 <HAL_RCCEx_PeriphCLKConfig+0xfc>
          }
        }
      }

      if (ret == HAL_OK)
 80020c4:	2313      	movs	r3, #19
 80020c6:	18fb      	adds	r3, r7, r3
 80020c8:	781b      	ldrb	r3, [r3, #0]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d10a      	bne.n	80020e4 <HAL_RCCEx_PeriphCLKConfig+0x140>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80020ce:	4b48      	ldr	r3, [pc, #288]	; (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80020d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020d2:	4a49      	ldr	r2, [pc, #292]	; (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80020d4:	4013      	ands	r3, r2
 80020d6:	0019      	movs	r1, r3
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	699a      	ldr	r2, [r3, #24]
 80020dc:	4b44      	ldr	r3, [pc, #272]	; (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80020de:	430a      	orrs	r2, r1
 80020e0:	65da      	str	r2, [r3, #92]	; 0x5c
 80020e2:	e00c      	b.n	80020fe <HAL_RCCEx_PeriphCLKConfig+0x15a>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80020e4:	2312      	movs	r3, #18
 80020e6:	18fb      	adds	r3, r7, r3
 80020e8:	2213      	movs	r2, #19
 80020ea:	18ba      	adds	r2, r7, r2
 80020ec:	7812      	ldrb	r2, [r2, #0]
 80020ee:	701a      	strb	r2, [r3, #0]
 80020f0:	e005      	b.n	80020fe <HAL_RCCEx_PeriphCLKConfig+0x15a>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80020f2:	2312      	movs	r3, #18
 80020f4:	18fb      	adds	r3, r7, r3
 80020f6:	2213      	movs	r2, #19
 80020f8:	18ba      	adds	r2, r7, r2
 80020fa:	7812      	ldrb	r2, [r2, #0]
 80020fc:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80020fe:	2311      	movs	r3, #17
 8002100:	18fb      	adds	r3, r7, r3
 8002102:	781b      	ldrb	r3, [r3, #0]
 8002104:	2b01      	cmp	r3, #1
 8002106:	d105      	bne.n	8002114 <HAL_RCCEx_PeriphCLKConfig+0x170>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002108:	4b39      	ldr	r3, [pc, #228]	; (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800210a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800210c:	4b38      	ldr	r3, [pc, #224]	; (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800210e:	493d      	ldr	r1, [pc, #244]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002110:	400a      	ands	r2, r1
 8002112:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	2201      	movs	r2, #1
 800211a:	4013      	ands	r3, r2
 800211c:	d009      	beq.n	8002132 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800211e:	4b34      	ldr	r3, [pc, #208]	; (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002120:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002122:	2203      	movs	r2, #3
 8002124:	4393      	bics	r3, r2
 8002126:	0019      	movs	r1, r3
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	685a      	ldr	r2, [r3, #4]
 800212c:	4b30      	ldr	r3, [pc, #192]	; (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800212e:	430a      	orrs	r2, r1
 8002130:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	2202      	movs	r2, #2
 8002138:	4013      	ands	r3, r2
 800213a:	d009      	beq.n	8002150 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800213c:	4b2c      	ldr	r3, [pc, #176]	; (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800213e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002140:	220c      	movs	r2, #12
 8002142:	4393      	bics	r3, r2
 8002144:	0019      	movs	r1, r3
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	689a      	ldr	r2, [r3, #8]
 800214a:	4b29      	ldr	r3, [pc, #164]	; (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800214c:	430a      	orrs	r2, r1
 800214e:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	2240      	movs	r2, #64	; 0x40
 8002156:	4013      	ands	r3, r2
 8002158:	d009      	beq.n	800216e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800215a:	4b25      	ldr	r3, [pc, #148]	; (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800215c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800215e:	4a2a      	ldr	r2, [pc, #168]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002160:	4013      	ands	r3, r2
 8002162:	0019      	movs	r1, r3
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	68da      	ldr	r2, [r3, #12]
 8002168:	4b21      	ldr	r3, [pc, #132]	; (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800216a:	430a      	orrs	r2, r1
 800216c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RCC_CCIPR_RNGSEL */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	2380      	movs	r3, #128	; 0x80
 8002174:	01db      	lsls	r3, r3, #7
 8002176:	4013      	ands	r3, r2
 8002178:	d015      	beq.n	80021a6 <HAL_RCCEx_PeriphCLKConfig+0x202>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800217a:	4b1d      	ldr	r3, [pc, #116]	; (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800217c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800217e:	009b      	lsls	r3, r3, #2
 8002180:	0899      	lsrs	r1, r3, #2
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	695a      	ldr	r2, [r3, #20]
 8002186:	4b1a      	ldr	r3, [pc, #104]	; (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002188:	430a      	orrs	r2, r1
 800218a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	695a      	ldr	r2, [r3, #20]
 8002190:	2380      	movs	r3, #128	; 0x80
 8002192:	05db      	lsls	r3, r3, #23
 8002194:	429a      	cmp	r2, r3
 8002196:	d106      	bne.n	80021a6 <HAL_RCCEx_PeriphCLKConfig+0x202>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002198:	4b15      	ldr	r3, [pc, #84]	; (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800219a:	68da      	ldr	r2, [r3, #12]
 800219c:	4b14      	ldr	r3, [pc, #80]	; (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800219e:	2180      	movs	r1, #128	; 0x80
 80021a0:	0249      	lsls	r1, r1, #9
 80021a2:	430a      	orrs	r2, r1
 80021a4:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	2380      	movs	r3, #128	; 0x80
 80021ac:	011b      	lsls	r3, r3, #4
 80021ae:	4013      	ands	r3, r2
 80021b0:	d016      	beq.n	80021e0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80021b2:	4b0f      	ldr	r3, [pc, #60]	; (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80021b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021b6:	4a15      	ldr	r2, [pc, #84]	; (800220c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80021b8:	4013      	ands	r3, r2
 80021ba:	0019      	movs	r1, r3
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	691a      	ldr	r2, [r3, #16]
 80021c0:	4b0b      	ldr	r3, [pc, #44]	; (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80021c2:	430a      	orrs	r2, r1
 80021c4:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	691a      	ldr	r2, [r3, #16]
 80021ca:	2380      	movs	r3, #128	; 0x80
 80021cc:	01db      	lsls	r3, r3, #7
 80021ce:	429a      	cmp	r2, r3
 80021d0:	d106      	bne.n	80021e0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80021d2:	4b07      	ldr	r3, [pc, #28]	; (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80021d4:	68da      	ldr	r2, [r3, #12]
 80021d6:	4b06      	ldr	r3, [pc, #24]	; (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80021d8:	2180      	movs	r1, #128	; 0x80
 80021da:	0249      	lsls	r1, r1, #9
 80021dc:	430a      	orrs	r2, r1
 80021de:	60da      	str	r2, [r3, #12]
    }
  }

  return status;
 80021e0:	2312      	movs	r3, #18
 80021e2:	18fb      	adds	r3, r7, r3
 80021e4:	781b      	ldrb	r3, [r3, #0]
}
 80021e6:	0018      	movs	r0, r3
 80021e8:	46bd      	mov	sp, r7
 80021ea:	b006      	add	sp, #24
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	46c0      	nop			; (mov r8, r8)
 80021f0:	40021000 	.word	0x40021000
 80021f4:	40007000 	.word	0x40007000
 80021f8:	fffffcff 	.word	0xfffffcff
 80021fc:	fffeffff 	.word	0xfffeffff
 8002200:	00001388 	.word	0x00001388
 8002204:	efffffff 	.word	0xefffffff
 8002208:	ffffcfff 	.word	0xffffcfff
 800220c:	ffff3fff 	.word	0xffff3fff

08002210 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002210:	b5b0      	push	{r4, r5, r7, lr}
 8002212:	b084      	sub	sp, #16
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002218:	230f      	movs	r3, #15
 800221a:	18fb      	adds	r3, r7, r3
 800221c:	2201      	movs	r2, #1
 800221e:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d100      	bne.n	8002228 <HAL_RTC_Init+0x18>
 8002226:	e07f      	b.n	8002328 <HAL_RTC_Init+0x118>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

  if(hrtc->State == HAL_RTC_STATE_RESET)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2229      	movs	r2, #41	; 0x29
 800222c:	5c9b      	ldrb	r3, [r3, r2]
 800222e:	b2db      	uxtb	r3, r3
 8002230:	2b00      	cmp	r3, #0
 8002232:	d10b      	bne.n	800224c <HAL_RTC_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2228      	movs	r2, #40	; 0x28
 8002238:	2100      	movs	r1, #0
 800223a:	5499      	strb	r1, [r3, r2]

    /* Process TAMP peripheral offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2288      	movs	r2, #136	; 0x88
 8002240:	0212      	lsls	r2, r2, #8
 8002242:	605a      	str	r2, [r3, #4]
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
#else
    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	0018      	movs	r0, r3
 8002248:	f7fe fd32 	bl	8000cb0 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
  }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2229      	movs	r2, #41	; 0x29
 8002250:	2102      	movs	r1, #2
 8002252:	5499      	strb	r1, [r3, r2]

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	22ca      	movs	r2, #202	; 0xca
 800225a:	625a      	str	r2, [r3, #36]	; 0x24
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	2253      	movs	r2, #83	; 0x53
 8002262:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8002264:	250f      	movs	r5, #15
 8002266:	197c      	adds	r4, r7, r5
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	0018      	movs	r0, r3
 800226c:	f000 fa71 	bl	8002752 <RTC_EnterInitMode>
 8002270:	0003      	movs	r3, r0
 8002272:	7023      	strb	r3, [r4, #0]
    if(status == HAL_OK)
 8002274:	197b      	adds	r3, r7, r5
 8002276:	781b      	ldrb	r3, [r3, #0]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d148      	bne.n	800230e <HAL_RTC_Init+0xfe>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	699a      	ldr	r2, [r3, #24]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	492c      	ldr	r1, [pc, #176]	; (8002338 <HAL_RTC_Init+0x128>)
 8002288:	400a      	ands	r2, r1
 800228a:	619a      	str	r2, [r3, #24]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	6999      	ldr	r1, [r3, #24]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	689a      	ldr	r2, [r3, #8]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	695b      	ldr	r3, [r3, #20]
 800229a:	431a      	orrs	r2, r3
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	69db      	ldr	r3, [r3, #28]
 80022a0:	431a      	orrs	r2, r3
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	430a      	orrs	r2, r1
 80022a8:	619a      	str	r2, [r3, #24]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	687a      	ldr	r2, [r7, #4]
 80022b0:	6912      	ldr	r2, [r2, #16]
 80022b2:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	6919      	ldr	r1, [r3, #16]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	68db      	ldr	r3, [r3, #12]
 80022be:	041a      	lsls	r2, r3, #16
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	430a      	orrs	r2, r1
 80022c6:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80022c8:	250f      	movs	r5, #15
 80022ca:	197c      	adds	r4, r7, r5
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	0018      	movs	r0, r3
 80022d0:	f000 fa82 	bl	80027d8 <RTC_ExitInitMode>
 80022d4:	0003      	movs	r3, r0
 80022d6:	7023      	strb	r3, [r4, #0]
      if (status == HAL_OK)
 80022d8:	197b      	adds	r3, r7, r5
 80022da:	781b      	ldrb	r3, [r3, #0]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d116      	bne.n	800230e <HAL_RTC_Init+0xfe>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	699a      	ldr	r2, [r3, #24]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	00d2      	lsls	r2, r2, #3
 80022ec:	08d2      	lsrs	r2, r2, #3
 80022ee:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	6999      	ldr	r1, [r3, #24]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6a1b      	ldr	r3, [r3, #32]
 80022fe:	431a      	orrs	r2, r3
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	699b      	ldr	r3, [r3, #24]
 8002304:	431a      	orrs	r2, r3
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	430a      	orrs	r2, r1
 800230c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	22ff      	movs	r2, #255	; 0xff
 8002314:	625a      	str	r2, [r3, #36]	; 0x24

    if (status == HAL_OK)
 8002316:	230f      	movs	r3, #15
 8002318:	18fb      	adds	r3, r7, r3
 800231a:	781b      	ldrb	r3, [r3, #0]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d103      	bne.n	8002328 <HAL_RTC_Init+0x118>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2229      	movs	r2, #41	; 0x29
 8002324:	2101      	movs	r1, #1
 8002326:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 8002328:	230f      	movs	r3, #15
 800232a:	18fb      	adds	r3, r7, r3
 800232c:	781b      	ldrb	r3, [r3, #0]
}
 800232e:	0018      	movs	r0, r3
 8002330:	46bd      	mov	sp, r7
 8002332:	b004      	add	sp, #16
 8002334:	bdb0      	pop	{r4, r5, r7, pc}
 8002336:	46c0      	nop			; (mov r8, r8)
 8002338:	fb8fffbf 	.word	0xfb8fffbf

0800233c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800233c:	b5b0      	push	{r4, r5, r7, lr}
 800233e:	b086      	sub	sp, #24
 8002340:	af00      	add	r7, sp, #0
 8002342:	60f8      	str	r0, [r7, #12]
 8002344:	60b9      	str	r1, [r7, #8]
 8002346:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	2228      	movs	r2, #40	; 0x28
 800234c:	5c9b      	ldrb	r3, [r3, r2]
 800234e:	2b01      	cmp	r3, #1
 8002350:	d101      	bne.n	8002356 <HAL_RTC_SetTime+0x1a>
 8002352:	2302      	movs	r3, #2
 8002354:	e092      	b.n	800247c <HAL_RTC_SetTime+0x140>
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	2228      	movs	r2, #40	; 0x28
 800235a:	2101      	movs	r1, #1
 800235c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	2229      	movs	r2, #41	; 0x29
 8002362:	2102      	movs	r1, #2
 8002364:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	22ca      	movs	r2, #202	; 0xca
 800236c:	625a      	str	r2, [r3, #36]	; 0x24
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	2253      	movs	r2, #83	; 0x53
 8002374:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002376:	2513      	movs	r5, #19
 8002378:	197c      	adds	r4, r7, r5
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	0018      	movs	r0, r3
 800237e:	f000 f9e8 	bl	8002752 <RTC_EnterInitMode>
 8002382:	0003      	movs	r3, r0
 8002384:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8002386:	197b      	adds	r3, r7, r5
 8002388:	781b      	ldrb	r3, [r3, #0]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d162      	bne.n	8002454 <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d125      	bne.n	80023e0 <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	699b      	ldr	r3, [r3, #24]
 800239a:	2240      	movs	r2, #64	; 0x40
 800239c:	4013      	ands	r3, r2
 800239e:	d102      	bne.n	80023a6 <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	2200      	movs	r2, #0
 80023a4:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	781b      	ldrb	r3, [r3, #0]
 80023aa:	0018      	movs	r0, r3
 80023ac:	f000 fa5a 	bl	8002864 <RTC_ByteToBcd2>
 80023b0:	0003      	movs	r3, r0
 80023b2:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	785b      	ldrb	r3, [r3, #1]
 80023b8:	0018      	movs	r0, r3
 80023ba:	f000 fa53 	bl	8002864 <RTC_ByteToBcd2>
 80023be:	0003      	movs	r3, r0
 80023c0:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80023c2:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	789b      	ldrb	r3, [r3, #2]
 80023c8:	0018      	movs	r0, r3
 80023ca:	f000 fa4b 	bl	8002864 <RTC_ByteToBcd2>
 80023ce:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80023d0:	0022      	movs	r2, r4
 80023d2:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	78db      	ldrb	r3, [r3, #3]
 80023d8:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80023da:	4313      	orrs	r3, r2
 80023dc:	617b      	str	r3, [r7, #20]
 80023de:	e017      	b.n	8002410 <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	699b      	ldr	r3, [r3, #24]
 80023e6:	2240      	movs	r2, #64	; 0x40
 80023e8:	4013      	ands	r3, r2
 80023ea:	d102      	bne.n	80023f2 <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	2200      	movs	r2, #0
 80023f0:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	781b      	ldrb	r3, [r3, #0]
 80023f6:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	785b      	ldrb	r3, [r3, #1]
 80023fc:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80023fe:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8002400:	68ba      	ldr	r2, [r7, #8]
 8002402:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002404:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	78db      	ldrb	r3, [r3, #3]
 800240a:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800240c:	4313      	orrs	r3, r2
 800240e:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	697a      	ldr	r2, [r7, #20]
 8002416:	491b      	ldr	r1, [pc, #108]	; (8002484 <HAL_RTC_SetTime+0x148>)
 8002418:	400a      	ands	r2, r1
 800241a:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	699a      	ldr	r2, [r3, #24]
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4918      	ldr	r1, [pc, #96]	; (8002488 <HAL_RTC_SetTime+0x14c>)
 8002428:	400a      	ands	r2, r1
 800242a:	619a      	str	r2, [r3, #24]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	6999      	ldr	r1, [r3, #24]
 8002432:	68bb      	ldr	r3, [r7, #8]
 8002434:	68da      	ldr	r2, [r3, #12]
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	691b      	ldr	r3, [r3, #16]
 800243a:	431a      	orrs	r2, r3
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	430a      	orrs	r2, r1
 8002442:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002444:	2313      	movs	r3, #19
 8002446:	18fc      	adds	r4, r7, r3
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	0018      	movs	r0, r3
 800244c:	f000 f9c4 	bl	80027d8 <RTC_ExitInitMode>
 8002450:	0003      	movs	r3, r0
 8002452:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	22ff      	movs	r2, #255	; 0xff
 800245a:	625a      	str	r2, [r3, #36]	; 0x24
  
  if (status == HAL_OK)
 800245c:	2313      	movs	r3, #19
 800245e:	18fb      	adds	r3, r7, r3
 8002460:	781b      	ldrb	r3, [r3, #0]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d103      	bne.n	800246e <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	2229      	movs	r2, #41	; 0x29
 800246a:	2101      	movs	r1, #1
 800246c:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	2228      	movs	r2, #40	; 0x28
 8002472:	2100      	movs	r1, #0
 8002474:	5499      	strb	r1, [r3, r2]

  return status;
 8002476:	2313      	movs	r3, #19
 8002478:	18fb      	adds	r3, r7, r3
 800247a:	781b      	ldrb	r3, [r3, #0]
}
 800247c:	0018      	movs	r0, r3
 800247e:	46bd      	mov	sp, r7
 8002480:	b006      	add	sp, #24
 8002482:	bdb0      	pop	{r4, r5, r7, pc}
 8002484:	007f7f7f 	.word	0x007f7f7f
 8002488:	fffbffff 	.word	0xfffbffff

0800248c <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b086      	sub	sp, #24
 8002490:	af00      	add	r7, sp, #0
 8002492:	60f8      	str	r0, [r7, #12]
 8002494:	60b9      	str	r1, [r7, #8]
 8002496:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	689a      	ldr	r2, [r3, #8]
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	691b      	ldr	r3, [r3, #16]
 80024a8:	045b      	lsls	r3, r3, #17
 80024aa:	0c5a      	lsrs	r2, r3, #17
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a22      	ldr	r2, [pc, #136]	; (8002540 <HAL_RTC_GetTime+0xb4>)
 80024b8:	4013      	ands	r3, r2
 80024ba:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	0c1b      	lsrs	r3, r3, #16
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	223f      	movs	r2, #63	; 0x3f
 80024c4:	4013      	ands	r3, r2
 80024c6:	b2da      	uxtb	r2, r3
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	0a1b      	lsrs	r3, r3, #8
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	227f      	movs	r2, #127	; 0x7f
 80024d4:	4013      	ands	r3, r2
 80024d6:	b2da      	uxtb	r2, r3
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	b2db      	uxtb	r3, r3
 80024e0:	227f      	movs	r2, #127	; 0x7f
 80024e2:	4013      	ands	r3, r2
 80024e4:	b2da      	uxtb	r2, r3
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	0d9b      	lsrs	r3, r3, #22
 80024ee:	b2db      	uxtb	r3, r3
 80024f0:	2201      	movs	r2, #1
 80024f2:	4013      	ands	r3, r2
 80024f4:	b2da      	uxtb	r2, r3
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d11a      	bne.n	8002536 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	781b      	ldrb	r3, [r3, #0]
 8002504:	0018      	movs	r0, r3
 8002506:	f000 f9d6 	bl	80028b6 <RTC_Bcd2ToByte>
 800250a:	0003      	movs	r3, r0
 800250c:	001a      	movs	r2, r3
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	785b      	ldrb	r3, [r3, #1]
 8002516:	0018      	movs	r0, r3
 8002518:	f000 f9cd 	bl	80028b6 <RTC_Bcd2ToByte>
 800251c:	0003      	movs	r3, r0
 800251e:	001a      	movs	r2, r3
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	789b      	ldrb	r3, [r3, #2]
 8002528:	0018      	movs	r0, r3
 800252a:	f000 f9c4 	bl	80028b6 <RTC_Bcd2ToByte>
 800252e:	0003      	movs	r3, r0
 8002530:	001a      	movs	r2, r3
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8002536:	2300      	movs	r3, #0
}
 8002538:	0018      	movs	r0, r3
 800253a:	46bd      	mov	sp, r7
 800253c:	b006      	add	sp, #24
 800253e:	bd80      	pop	{r7, pc}
 8002540:	007f7f7f 	.word	0x007f7f7f

08002544 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002544:	b5b0      	push	{r4, r5, r7, lr}
 8002546:	b086      	sub	sp, #24
 8002548:	af00      	add	r7, sp, #0
 800254a:	60f8      	str	r0, [r7, #12]
 800254c:	60b9      	str	r1, [r7, #8]
 800254e:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	2228      	movs	r2, #40	; 0x28
 8002554:	5c9b      	ldrb	r3, [r3, r2]
 8002556:	2b01      	cmp	r3, #1
 8002558:	d101      	bne.n	800255e <HAL_RTC_SetDate+0x1a>
 800255a:	2302      	movs	r3, #2
 800255c:	e07e      	b.n	800265c <HAL_RTC_SetDate+0x118>
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	2228      	movs	r2, #40	; 0x28
 8002562:	2101      	movs	r1, #1
 8002564:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	2229      	movs	r2, #41	; 0x29
 800256a:	2102      	movs	r1, #2
 800256c:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d10e      	bne.n	8002592 <HAL_RTC_SetDate+0x4e>
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	785b      	ldrb	r3, [r3, #1]
 8002578:	001a      	movs	r2, r3
 800257a:	2310      	movs	r3, #16
 800257c:	4013      	ands	r3, r2
 800257e:	d008      	beq.n	8002592 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	785b      	ldrb	r3, [r3, #1]
 8002584:	2210      	movs	r2, #16
 8002586:	4393      	bics	r3, r2
 8002588:	b2db      	uxtb	r3, r3
 800258a:	330a      	adds	r3, #10
 800258c:	b2da      	uxtb	r2, r3
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d11c      	bne.n	80025d2 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	78db      	ldrb	r3, [r3, #3]
 800259c:	0018      	movs	r0, r3
 800259e:	f000 f961 	bl	8002864 <RTC_ByteToBcd2>
 80025a2:	0003      	movs	r3, r0
 80025a4:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	785b      	ldrb	r3, [r3, #1]
 80025aa:	0018      	movs	r0, r3
 80025ac:	f000 f95a 	bl	8002864 <RTC_ByteToBcd2>
 80025b0:	0003      	movs	r3, r0
 80025b2:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80025b4:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	789b      	ldrb	r3, [r3, #2]
 80025ba:	0018      	movs	r0, r3
 80025bc:	f000 f952 	bl	8002864 <RTC_ByteToBcd2>
 80025c0:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80025c2:	0022      	movs	r2, r4
 80025c4:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	781b      	ldrb	r3, [r3, #0]
 80025ca:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80025cc:	4313      	orrs	r3, r2
 80025ce:	617b      	str	r3, [r7, #20]
 80025d0:	e00e      	b.n	80025f0 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	78db      	ldrb	r3, [r3, #3]
 80025d6:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	785b      	ldrb	r3, [r3, #1]
 80025dc:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80025de:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos)| \
 80025e0:	68ba      	ldr	r2, [r7, #8]
 80025e2:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80025e4:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	781b      	ldrb	r3, [r3, #0]
 80025ea:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80025ec:	4313      	orrs	r3, r2
 80025ee:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	22ca      	movs	r2, #202	; 0xca
 80025f6:	625a      	str	r2, [r3, #36]	; 0x24
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	2253      	movs	r2, #83	; 0x53
 80025fe:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002600:	2513      	movs	r5, #19
 8002602:	197c      	adds	r4, r7, r5
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	0018      	movs	r0, r3
 8002608:	f000 f8a3 	bl	8002752 <RTC_EnterInitMode>
 800260c:	0003      	movs	r3, r0
 800260e:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8002610:	197b      	adds	r3, r7, r5
 8002612:	781b      	ldrb	r3, [r3, #0]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d10d      	bne.n	8002634 <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	697a      	ldr	r2, [r7, #20]
 800261e:	4911      	ldr	r1, [pc, #68]	; (8002664 <HAL_RTC_SetDate+0x120>)
 8002620:	400a      	ands	r2, r1
 8002622:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002624:	2313      	movs	r3, #19
 8002626:	18fc      	adds	r4, r7, r3
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	0018      	movs	r0, r3
 800262c:	f000 f8d4 	bl	80027d8 <RTC_ExitInitMode>
 8002630:	0003      	movs	r3, r0
 8002632:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	22ff      	movs	r2, #255	; 0xff
 800263a:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800263c:	2313      	movs	r3, #19
 800263e:	18fb      	adds	r3, r7, r3
 8002640:	781b      	ldrb	r3, [r3, #0]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d103      	bne.n	800264e <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	2229      	movs	r2, #41	; 0x29
 800264a:	2101      	movs	r1, #1
 800264c:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	2228      	movs	r2, #40	; 0x28
 8002652:	2100      	movs	r1, #0
 8002654:	5499      	strb	r1, [r3, r2]

  return status;
 8002656:	2313      	movs	r3, #19
 8002658:	18fb      	adds	r3, r7, r3
 800265a:	781b      	ldrb	r3, [r3, #0]
}
 800265c:	0018      	movs	r0, r3
 800265e:	46bd      	mov	sp, r7
 8002660:	b006      	add	sp, #24
 8002662:	bdb0      	pop	{r4, r5, r7, pc}
 8002664:	00ffff3f 	.word	0x00ffff3f

08002668 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b086      	sub	sp, #24
 800266c:	af00      	add	r7, sp, #0
 800266e:	60f8      	str	r0, [r7, #12]
 8002670:	60b9      	str	r1, [r7, #8]
 8002672:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	4a21      	ldr	r2, [pc, #132]	; (8002700 <HAL_RTC_GetDate+0x98>)
 800267c:	4013      	ands	r3, r2
 800267e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	0c1b      	lsrs	r3, r3, #16
 8002684:	b2da      	uxtb	r2, r3
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	0a1b      	lsrs	r3, r3, #8
 800268e:	b2db      	uxtb	r3, r3
 8002690:	221f      	movs	r2, #31
 8002692:	4013      	ands	r3, r2
 8002694:	b2da      	uxtb	r2, r3
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	b2db      	uxtb	r3, r3
 800269e:	223f      	movs	r2, #63	; 0x3f
 80026a0:	4013      	ands	r3, r2
 80026a2:	b2da      	uxtb	r2, r3
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	0b5b      	lsrs	r3, r3, #13
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	2207      	movs	r2, #7
 80026b0:	4013      	ands	r3, r2
 80026b2:	b2da      	uxtb	r2, r3
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d11a      	bne.n	80026f4 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	78db      	ldrb	r3, [r3, #3]
 80026c2:	0018      	movs	r0, r3
 80026c4:	f000 f8f7 	bl	80028b6 <RTC_Bcd2ToByte>
 80026c8:	0003      	movs	r3, r0
 80026ca:	001a      	movs	r2, r3
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	785b      	ldrb	r3, [r3, #1]
 80026d4:	0018      	movs	r0, r3
 80026d6:	f000 f8ee 	bl	80028b6 <RTC_Bcd2ToByte>
 80026da:	0003      	movs	r3, r0
 80026dc:	001a      	movs	r2, r3
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	789b      	ldrb	r3, [r3, #2]
 80026e6:	0018      	movs	r0, r3
 80026e8:	f000 f8e5 	bl	80028b6 <RTC_Bcd2ToByte>
 80026ec:	0003      	movs	r3, r0
 80026ee:	001a      	movs	r2, r3
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80026f4:	2300      	movs	r3, #0
}
 80026f6:	0018      	movs	r0, r3
 80026f8:	46bd      	mov	sp, r7
 80026fa:	b006      	add	sp, #24
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	46c0      	nop			; (mov r8, r8)
 8002700:	00ffff3f 	.word	0x00ffff3f

08002704 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b084      	sub	sp, #16
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	68da      	ldr	r2, [r3, #12]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	21a0      	movs	r1, #160	; 0xa0
 8002718:	438a      	bics	r2, r1
 800271a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800271c:	f7fe fc7a 	bl	8001014 <HAL_GetTick>
 8002720:	0003      	movs	r3, r0
 8002722:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8002724:	e00a      	b.n	800273c <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002726:	f7fe fc75 	bl	8001014 <HAL_GetTick>
 800272a:	0002      	movs	r2, r0
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	1ad2      	subs	r2, r2, r3
 8002730:	23fa      	movs	r3, #250	; 0xfa
 8002732:	009b      	lsls	r3, r3, #2
 8002734:	429a      	cmp	r2, r3
 8002736:	d901      	bls.n	800273c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8002738:	2303      	movs	r3, #3
 800273a:	e006      	b.n	800274a <HAL_RTC_WaitForSynchro+0x46>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	68db      	ldr	r3, [r3, #12]
 8002742:	2220      	movs	r2, #32
 8002744:	4013      	ands	r3, r2
 8002746:	d0ee      	beq.n	8002726 <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 8002748:	2300      	movs	r3, #0
}
 800274a:	0018      	movs	r0, r3
 800274c:	46bd      	mov	sp, r7
 800274e:	b004      	add	sp, #16
 8002750:	bd80      	pop	{r7, pc}

08002752 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8002752:	b580      	push	{r7, lr}
 8002754:	b084      	sub	sp, #16
 8002756:	af00      	add	r7, sp, #0
 8002758:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 800275a:	230f      	movs	r3, #15
 800275c:	18fb      	adds	r3, r7, r3
 800275e:	2200      	movs	r2, #0
 8002760:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	68db      	ldr	r3, [r3, #12]
 8002768:	2240      	movs	r2, #64	; 0x40
 800276a:	4013      	ands	r3, r2
 800276c:	d12d      	bne.n	80027ca <RTC_EnterInitMode+0x78>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	68da      	ldr	r2, [r3, #12]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	2180      	movs	r1, #128	; 0x80
 800277a:	430a      	orrs	r2, r1
 800277c:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800277e:	f7fe fc49 	bl	8001014 <HAL_GetTick>
 8002782:	0003      	movs	r3, r0
 8002784:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8002786:	e015      	b.n	80027b4 <RTC_EnterInitMode+0x62>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8002788:	f7fe fc44 	bl	8001014 <HAL_GetTick>
 800278c:	0002      	movs	r2, r0
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	1ad2      	subs	r2, r2, r3
 8002792:	210f      	movs	r1, #15
 8002794:	187b      	adds	r3, r7, r1
 8002796:	1879      	adds	r1, r7, r1
 8002798:	7809      	ldrb	r1, [r1, #0]
 800279a:	7019      	strb	r1, [r3, #0]
 800279c:	23fa      	movs	r3, #250	; 0xfa
 800279e:	009b      	lsls	r3, r3, #2
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d907      	bls.n	80027b4 <RTC_EnterInitMode+0x62>
      {
        status = HAL_TIMEOUT;
 80027a4:	230f      	movs	r3, #15
 80027a6:	18fb      	adds	r3, r7, r3
 80027a8:	2203      	movs	r2, #3
 80027aa:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2229      	movs	r2, #41	; 0x29
 80027b0:	2103      	movs	r1, #3
 80027b2:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	68db      	ldr	r3, [r3, #12]
 80027ba:	2240      	movs	r2, #64	; 0x40
 80027bc:	4013      	ands	r3, r2
 80027be:	d104      	bne.n	80027ca <RTC_EnterInitMode+0x78>
 80027c0:	230f      	movs	r3, #15
 80027c2:	18fb      	adds	r3, r7, r3
 80027c4:	781b      	ldrb	r3, [r3, #0]
 80027c6:	2b03      	cmp	r3, #3
 80027c8:	d1de      	bne.n	8002788 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80027ca:	230f      	movs	r3, #15
 80027cc:	18fb      	adds	r3, r7, r3
 80027ce:	781b      	ldrb	r3, [r3, #0]
}
 80027d0:	0018      	movs	r0, r3
 80027d2:	46bd      	mov	sp, r7
 80027d4:	b004      	add	sp, #16
 80027d6:	bd80      	pop	{r7, pc}

080027d8 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b084      	sub	sp, #16
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027e0:	230f      	movs	r3, #15
 80027e2:	18fb      	adds	r3, r7, r3
 80027e4:	2200      	movs	r2, #0
 80027e6:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80027e8:	4b1d      	ldr	r3, [pc, #116]	; (8002860 <RTC_ExitInitMode+0x88>)
 80027ea:	68da      	ldr	r2, [r3, #12]
 80027ec:	4b1c      	ldr	r3, [pc, #112]	; (8002860 <RTC_ExitInitMode+0x88>)
 80027ee:	2180      	movs	r1, #128	; 0x80
 80027f0:	438a      	bics	r2, r1
 80027f2:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80027f4:	4b1a      	ldr	r3, [pc, #104]	; (8002860 <RTC_ExitInitMode+0x88>)
 80027f6:	699b      	ldr	r3, [r3, #24]
 80027f8:	2220      	movs	r2, #32
 80027fa:	4013      	ands	r3, r2
 80027fc:	d10e      	bne.n	800281c <RTC_ExitInitMode+0x44>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	0018      	movs	r0, r3
 8002802:	f7ff ff7f 	bl	8002704 <HAL_RTC_WaitForSynchro>
 8002806:	1e03      	subs	r3, r0, #0
 8002808:	d022      	beq.n	8002850 <RTC_ExitInitMode+0x78>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2229      	movs	r2, #41	; 0x29
 800280e:	2103      	movs	r1, #3
 8002810:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8002812:	230f      	movs	r3, #15
 8002814:	18fb      	adds	r3, r7, r3
 8002816:	2203      	movs	r2, #3
 8002818:	701a      	strb	r2, [r3, #0]
 800281a:	e019      	b.n	8002850 <RTC_ExitInitMode+0x78>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800281c:	4b10      	ldr	r3, [pc, #64]	; (8002860 <RTC_ExitInitMode+0x88>)
 800281e:	699a      	ldr	r2, [r3, #24]
 8002820:	4b0f      	ldr	r3, [pc, #60]	; (8002860 <RTC_ExitInitMode+0x88>)
 8002822:	2120      	movs	r1, #32
 8002824:	438a      	bics	r2, r1
 8002826:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	0018      	movs	r0, r3
 800282c:	f7ff ff6a 	bl	8002704 <HAL_RTC_WaitForSynchro>
 8002830:	1e03      	subs	r3, r0, #0
 8002832:	d007      	beq.n	8002844 <RTC_ExitInitMode+0x6c>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2229      	movs	r2, #41	; 0x29
 8002838:	2103      	movs	r1, #3
 800283a:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 800283c:	230f      	movs	r3, #15
 800283e:	18fb      	adds	r3, r7, r3
 8002840:	2203      	movs	r2, #3
 8002842:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002844:	4b06      	ldr	r3, [pc, #24]	; (8002860 <RTC_ExitInitMode+0x88>)
 8002846:	699a      	ldr	r2, [r3, #24]
 8002848:	4b05      	ldr	r3, [pc, #20]	; (8002860 <RTC_ExitInitMode+0x88>)
 800284a:	2120      	movs	r1, #32
 800284c:	430a      	orrs	r2, r1
 800284e:	619a      	str	r2, [r3, #24]
  }

  return status;
 8002850:	230f      	movs	r3, #15
 8002852:	18fb      	adds	r3, r7, r3
 8002854:	781b      	ldrb	r3, [r3, #0]
}
 8002856:	0018      	movs	r0, r3
 8002858:	46bd      	mov	sp, r7
 800285a:	b004      	add	sp, #16
 800285c:	bd80      	pop	{r7, pc}
 800285e:	46c0      	nop			; (mov r8, r8)
 8002860:	40002800 	.word	0x40002800

08002864 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b084      	sub	sp, #16
 8002868:	af00      	add	r7, sp, #0
 800286a:	0002      	movs	r2, r0
 800286c:	1dfb      	adds	r3, r7, #7
 800286e:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8002870:	2300      	movs	r3, #0
 8002872:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8002874:	230b      	movs	r3, #11
 8002876:	18fb      	adds	r3, r7, r3
 8002878:	1dfa      	adds	r2, r7, #7
 800287a:	7812      	ldrb	r2, [r2, #0]
 800287c:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 800287e:	e008      	b.n	8002892 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	3301      	adds	r3, #1
 8002884:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8002886:	220b      	movs	r2, #11
 8002888:	18bb      	adds	r3, r7, r2
 800288a:	18ba      	adds	r2, r7, r2
 800288c:	7812      	ldrb	r2, [r2, #0]
 800288e:	3a0a      	subs	r2, #10
 8002890:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 8002892:	230b      	movs	r3, #11
 8002894:	18fb      	adds	r3, r7, r3
 8002896:	781b      	ldrb	r3, [r3, #0]
 8002898:	2b09      	cmp	r3, #9
 800289a:	d8f1      	bhi.n	8002880 <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	b2db      	uxtb	r3, r3
 80028a0:	011b      	lsls	r3, r3, #4
 80028a2:	b2da      	uxtb	r2, r3
 80028a4:	230b      	movs	r3, #11
 80028a6:	18fb      	adds	r3, r7, r3
 80028a8:	781b      	ldrb	r3, [r3, #0]
 80028aa:	4313      	orrs	r3, r2
 80028ac:	b2db      	uxtb	r3, r3
}
 80028ae:	0018      	movs	r0, r3
 80028b0:	46bd      	mov	sp, r7
 80028b2:	b004      	add	sp, #16
 80028b4:	bd80      	pop	{r7, pc}

080028b6 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80028b6:	b580      	push	{r7, lr}
 80028b8:	b084      	sub	sp, #16
 80028ba:	af00      	add	r7, sp, #0
 80028bc:	0002      	movs	r2, r0
 80028be:	1dfb      	adds	r3, r7, #7
 80028c0:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 80028c2:	1dfb      	adds	r3, r7, #7
 80028c4:	781b      	ldrb	r3, [r3, #0]
 80028c6:	091b      	lsrs	r3, r3, #4
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	001a      	movs	r2, r3
 80028cc:	0013      	movs	r3, r2
 80028ce:	009b      	lsls	r3, r3, #2
 80028d0:	189b      	adds	r3, r3, r2
 80028d2:	005b      	lsls	r3, r3, #1
 80028d4:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	b2da      	uxtb	r2, r3
 80028da:	1dfb      	adds	r3, r7, #7
 80028dc:	781b      	ldrb	r3, [r3, #0]
 80028de:	210f      	movs	r1, #15
 80028e0:	400b      	ands	r3, r1
 80028e2:	b2db      	uxtb	r3, r3
 80028e4:	18d3      	adds	r3, r2, r3
 80028e6:	b2db      	uxtb	r3, r3
}
 80028e8:	0018      	movs	r0, r3
 80028ea:	46bd      	mov	sp, r7
 80028ec:	b004      	add	sp, #16
 80028ee:	bd80      	pop	{r7, pc}

080028f0 <HAL_RTCEx_SetSmoothCalib>:
  * @param  SmoothCalibMinusPulsesValue Select the value of CALM[8:0] bits.
  *          This parameter can be one any value from 0 to 0x000001FF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSmoothCalib(RTC_HandleTypeDef* hrtc, uint32_t SmoothCalibPeriod, uint32_t SmoothCalibPlusPulses, uint32_t SmoothCalibMinusPulsesValue)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b086      	sub	sp, #24
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	60f8      	str	r0, [r7, #12]
 80028f8:	60b9      	str	r1, [r7, #8]
 80028fa:	607a      	str	r2, [r7, #4]
 80028fc:	603b      	str	r3, [r7, #0]
  assert_param(IS_RTC_SMOOTH_CALIB_PERIOD(SmoothCalibPeriod));
  assert_param(IS_RTC_SMOOTH_CALIB_PLUS(SmoothCalibPlusPulses));
  assert_param(IS_RTC_SMOOTH_CALIB_MINUS(SmoothCalibMinusPulsesValue));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	2228      	movs	r2, #40	; 0x28
 8002902:	5c9b      	ldrb	r3, [r3, r2]
 8002904:	2b01      	cmp	r3, #1
 8002906:	d101      	bne.n	800290c <HAL_RTCEx_SetSmoothCalib+0x1c>
 8002908:	2302      	movs	r3, #2
 800290a:	e04f      	b.n	80029ac <HAL_RTCEx_SetSmoothCalib+0xbc>
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	2228      	movs	r2, #40	; 0x28
 8002910:	2101      	movs	r1, #1
 8002912:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	2229      	movs	r2, #41	; 0x29
 8002918:	2102      	movs	r1, #2
 800291a:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	22ca      	movs	r2, #202	; 0xca
 8002922:	625a      	str	r2, [r3, #36]	; 0x24
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	2253      	movs	r2, #83	; 0x53
 800292a:	625a      	str	r2, [r3, #36]	; 0x24

  /* check if a calibration is pending*/
  if((hrtc->Instance->ICSR & RTC_ICSR_RECALPF) != 0U)
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	68da      	ldr	r2, [r3, #12]
 8002932:	2380      	movs	r3, #128	; 0x80
 8002934:	025b      	lsls	r3, r3, #9
 8002936:	4013      	ands	r3, r2
 8002938:	d022      	beq.n	8002980 <HAL_RTCEx_SetSmoothCalib+0x90>
  {
    tickstart = HAL_GetTick();
 800293a:	f7fe fb6b 	bl	8001014 <HAL_GetTick>
 800293e:	0003      	movs	r3, r0
 8002940:	617b      	str	r3, [r7, #20]

    /* check if a calibration is pending*/
    while((hrtc->Instance->ICSR & RTC_ICSR_RECALPF) != 0U)
 8002942:	e016      	b.n	8002972 <HAL_RTCEx_SetSmoothCalib+0x82>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002944:	f7fe fb66 	bl	8001014 <HAL_GetTick>
 8002948:	0002      	movs	r2, r0
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	1ad2      	subs	r2, r2, r3
 800294e:	23fa      	movs	r3, #250	; 0xfa
 8002950:	009b      	lsls	r3, r3, #2
 8002952:	429a      	cmp	r2, r3
 8002954:	d90d      	bls.n	8002972 <HAL_RTCEx_SetSmoothCalib+0x82>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	22ff      	movs	r2, #255	; 0xff
 800295c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	2229      	movs	r2, #41	; 0x29
 8002962:	2103      	movs	r1, #3
 8002964:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	2228      	movs	r2, #40	; 0x28
 800296a:	2100      	movs	r1, #0
 800296c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800296e:	2303      	movs	r3, #3
 8002970:	e01c      	b.n	80029ac <HAL_RTCEx_SetSmoothCalib+0xbc>
    while((hrtc->Instance->ICSR & RTC_ICSR_RECALPF) != 0U)
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	68da      	ldr	r2, [r3, #12]
 8002978:	2380      	movs	r3, #128	; 0x80
 800297a:	025b      	lsls	r3, r3, #9
 800297c:	4013      	ands	r3, r2
 800297e:	d1e1      	bne.n	8002944 <HAL_RTCEx_SetSmoothCalib+0x54>
      }
    }
  }

  /* Configure the Smooth calibration settings */
  hrtc->Instance->CALR = (uint32_t)((uint32_t)SmoothCalibPeriod | (uint32_t)SmoothCalibPlusPulses | (uint32_t)SmoothCalibMinusPulsesValue);
 8002980:	68ba      	ldr	r2, [r7, #8]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	431a      	orrs	r2, r3
 8002986:	0011      	movs	r1, r2
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	683a      	ldr	r2, [r7, #0]
 800298e:	430a      	orrs	r2, r1
 8002990:	629a      	str	r2, [r3, #40]	; 0x28

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	22ff      	movs	r2, #255	; 0xff
 8002998:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	2229      	movs	r2, #41	; 0x29
 800299e:	2101      	movs	r1, #1
 80029a0:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	2228      	movs	r2, #40	; 0x28
 80029a6:	2100      	movs	r1, #0
 80029a8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80029aa:	2300      	movs	r3, #0
}
 80029ac:	0018      	movs	r0, r3
 80029ae:	46bd      	mov	sp, r7
 80029b0:	b006      	add	sp, #24
 80029b2:	bd80      	pop	{r7, pc}

080029b4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b082      	sub	sp, #8
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d101      	bne.n	80029c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e046      	b.n	8002a54 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2280      	movs	r2, #128	; 0x80
 80029ca:	589b      	ldr	r3, [r3, r2]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d107      	bne.n	80029e0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	227c      	movs	r2, #124	; 0x7c
 80029d4:	2100      	movs	r1, #0
 80029d6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	0018      	movs	r0, r3
 80029dc:	f7fe fa2a 	bl	8000e34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2280      	movs	r2, #128	; 0x80
 80029e4:	2124      	movs	r1, #36	; 0x24
 80029e6:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	2101      	movs	r1, #1
 80029f4:	438a      	bics	r2, r1
 80029f6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	0018      	movs	r0, r3
 80029fc:	f000 f830 	bl	8002a60 <UART_SetConfig>
 8002a00:	0003      	movs	r3, r0
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	d101      	bne.n	8002a0a <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e024      	b.n	8002a54 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d003      	beq.n	8002a1a <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	0018      	movs	r0, r3
 8002a16:	f000 fcab 	bl	8003370 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	685a      	ldr	r2, [r3, #4]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	490d      	ldr	r1, [pc, #52]	; (8002a5c <HAL_UART_Init+0xa8>)
 8002a26:	400a      	ands	r2, r1
 8002a28:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	689a      	ldr	r2, [r3, #8]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	212a      	movs	r1, #42	; 0x2a
 8002a36:	438a      	bics	r2, r1
 8002a38:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	2101      	movs	r1, #1
 8002a46:	430a      	orrs	r2, r1
 8002a48:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	0018      	movs	r0, r3
 8002a4e:	f000 fd43 	bl	80034d8 <UART_CheckIdleState>
 8002a52:	0003      	movs	r3, r0
}
 8002a54:	0018      	movs	r0, r3
 8002a56:	46bd      	mov	sp, r7
 8002a58:	b002      	add	sp, #8
 8002a5a:	bd80      	pop	{r7, pc}
 8002a5c:	ffffb7ff 	.word	0xffffb7ff

08002a60 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b088      	sub	sp, #32
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002a6c:	231e      	movs	r3, #30
 8002a6e:	18fb      	adds	r3, r7, r3
 8002a70:	2200      	movs	r2, #0
 8002a72:	701a      	strb	r2, [r3, #0]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8002a74:	2300      	movs	r3, #0
 8002a76:	613b      	str	r3, [r7, #16]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	689a      	ldr	r2, [r3, #8]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	691b      	ldr	r3, [r3, #16]
 8002a80:	431a      	orrs	r2, r3
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	695b      	ldr	r3, [r3, #20]
 8002a86:	431a      	orrs	r2, r3
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	69db      	ldr	r3, [r3, #28]
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	61bb      	str	r3, [r7, #24]
  tmpreg |= (uint32_t)huart->FifoMode;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a94:	69ba      	ldr	r2, [r7, #24]
 8002a96:	4313      	orrs	r3, r2
 8002a98:	61bb      	str	r3, [r7, #24]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4aba      	ldr	r2, [pc, #744]	; (8002d8c <UART_SetConfig+0x32c>)
 8002aa2:	4013      	ands	r3, r2
 8002aa4:	0019      	movs	r1, r3
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	69ba      	ldr	r2, [r7, #24]
 8002aac:	430a      	orrs	r2, r1
 8002aae:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	4ab6      	ldr	r2, [pc, #728]	; (8002d90 <UART_SetConfig+0x330>)
 8002ab8:	4013      	ands	r3, r2
 8002aba:	0019      	movs	r1, r3
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	68da      	ldr	r2, [r3, #12]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	430a      	orrs	r2, r1
 8002ac6:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	699b      	ldr	r3, [r3, #24]
 8002acc:	61bb      	str	r3, [r7, #24]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6a1b      	ldr	r3, [r3, #32]
 8002ad2:	69ba      	ldr	r2, [r7, #24]
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	61bb      	str	r3, [r7, #24]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	4aad      	ldr	r2, [pc, #692]	; (8002d94 <UART_SetConfig+0x334>)
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	0019      	movs	r1, r3
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	69ba      	ldr	r2, [r7, #24]
 8002aea:	430a      	orrs	r2, r1
 8002aec:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002af4:	220f      	movs	r2, #15
 8002af6:	4393      	bics	r3, r2
 8002af8:	0019      	movs	r1, r3
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	430a      	orrs	r2, r1
 8002b04:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4aa3      	ldr	r2, [pc, #652]	; (8002d98 <UART_SetConfig+0x338>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d125      	bne.n	8002b5c <UART_SetConfig+0xfc>
 8002b10:	4ba2      	ldr	r3, [pc, #648]	; (8002d9c <UART_SetConfig+0x33c>)
 8002b12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b14:	2203      	movs	r2, #3
 8002b16:	4013      	ands	r3, r2
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d00f      	beq.n	8002b3c <UART_SetConfig+0xdc>
 8002b1c:	d304      	bcc.n	8002b28 <UART_SetConfig+0xc8>
 8002b1e:	2b02      	cmp	r3, #2
 8002b20:	d007      	beq.n	8002b32 <UART_SetConfig+0xd2>
 8002b22:	2b03      	cmp	r3, #3
 8002b24:	d00f      	beq.n	8002b46 <UART_SetConfig+0xe6>
 8002b26:	e013      	b.n	8002b50 <UART_SetConfig+0xf0>
 8002b28:	231f      	movs	r3, #31
 8002b2a:	18fb      	adds	r3, r7, r3
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	701a      	strb	r2, [r3, #0]
 8002b30:	e05a      	b.n	8002be8 <UART_SetConfig+0x188>
 8002b32:	231f      	movs	r3, #31
 8002b34:	18fb      	adds	r3, r7, r3
 8002b36:	2202      	movs	r2, #2
 8002b38:	701a      	strb	r2, [r3, #0]
 8002b3a:	e055      	b.n	8002be8 <UART_SetConfig+0x188>
 8002b3c:	231f      	movs	r3, #31
 8002b3e:	18fb      	adds	r3, r7, r3
 8002b40:	2204      	movs	r2, #4
 8002b42:	701a      	strb	r2, [r3, #0]
 8002b44:	e050      	b.n	8002be8 <UART_SetConfig+0x188>
 8002b46:	231f      	movs	r3, #31
 8002b48:	18fb      	adds	r3, r7, r3
 8002b4a:	2208      	movs	r2, #8
 8002b4c:	701a      	strb	r2, [r3, #0]
 8002b4e:	e04b      	b.n	8002be8 <UART_SetConfig+0x188>
 8002b50:	231f      	movs	r3, #31
 8002b52:	18fb      	adds	r3, r7, r3
 8002b54:	2210      	movs	r2, #16
 8002b56:	701a      	strb	r2, [r3, #0]
 8002b58:	46c0      	nop			; (mov r8, r8)
 8002b5a:	e045      	b.n	8002be8 <UART_SetConfig+0x188>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a8f      	ldr	r2, [pc, #572]	; (8002da0 <UART_SetConfig+0x340>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d128      	bne.n	8002bb8 <UART_SetConfig+0x158>
 8002b66:	4b8d      	ldr	r3, [pc, #564]	; (8002d9c <UART_SetConfig+0x33c>)
 8002b68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b6a:	220c      	movs	r2, #12
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	2b04      	cmp	r3, #4
 8002b70:	d012      	beq.n	8002b98 <UART_SetConfig+0x138>
 8002b72:	d802      	bhi.n	8002b7a <UART_SetConfig+0x11a>
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d005      	beq.n	8002b84 <UART_SetConfig+0x124>
 8002b78:	e018      	b.n	8002bac <UART_SetConfig+0x14c>
 8002b7a:	2b08      	cmp	r3, #8
 8002b7c:	d007      	beq.n	8002b8e <UART_SetConfig+0x12e>
 8002b7e:	2b0c      	cmp	r3, #12
 8002b80:	d00f      	beq.n	8002ba2 <UART_SetConfig+0x142>
 8002b82:	e013      	b.n	8002bac <UART_SetConfig+0x14c>
 8002b84:	231f      	movs	r3, #31
 8002b86:	18fb      	adds	r3, r7, r3
 8002b88:	2200      	movs	r2, #0
 8002b8a:	701a      	strb	r2, [r3, #0]
 8002b8c:	e02c      	b.n	8002be8 <UART_SetConfig+0x188>
 8002b8e:	231f      	movs	r3, #31
 8002b90:	18fb      	adds	r3, r7, r3
 8002b92:	2202      	movs	r2, #2
 8002b94:	701a      	strb	r2, [r3, #0]
 8002b96:	e027      	b.n	8002be8 <UART_SetConfig+0x188>
 8002b98:	231f      	movs	r3, #31
 8002b9a:	18fb      	adds	r3, r7, r3
 8002b9c:	2204      	movs	r2, #4
 8002b9e:	701a      	strb	r2, [r3, #0]
 8002ba0:	e022      	b.n	8002be8 <UART_SetConfig+0x188>
 8002ba2:	231f      	movs	r3, #31
 8002ba4:	18fb      	adds	r3, r7, r3
 8002ba6:	2208      	movs	r2, #8
 8002ba8:	701a      	strb	r2, [r3, #0]
 8002baa:	e01d      	b.n	8002be8 <UART_SetConfig+0x188>
 8002bac:	231f      	movs	r3, #31
 8002bae:	18fb      	adds	r3, r7, r3
 8002bb0:	2210      	movs	r2, #16
 8002bb2:	701a      	strb	r2, [r3, #0]
 8002bb4:	46c0      	nop			; (mov r8, r8)
 8002bb6:	e017      	b.n	8002be8 <UART_SetConfig+0x188>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a79      	ldr	r2, [pc, #484]	; (8002da4 <UART_SetConfig+0x344>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d104      	bne.n	8002bcc <UART_SetConfig+0x16c>
 8002bc2:	231f      	movs	r3, #31
 8002bc4:	18fb      	adds	r3, r7, r3
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	701a      	strb	r2, [r3, #0]
 8002bca:	e00d      	b.n	8002be8 <UART_SetConfig+0x188>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a75      	ldr	r2, [pc, #468]	; (8002da8 <UART_SetConfig+0x348>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d104      	bne.n	8002be0 <UART_SetConfig+0x180>
 8002bd6:	231f      	movs	r3, #31
 8002bd8:	18fb      	adds	r3, r7, r3
 8002bda:	2200      	movs	r2, #0
 8002bdc:	701a      	strb	r2, [r3, #0]
 8002bde:	e003      	b.n	8002be8 <UART_SetConfig+0x188>
 8002be0:	231f      	movs	r3, #31
 8002be2:	18fb      	adds	r3, r7, r3
 8002be4:	2210      	movs	r2, #16
 8002be6:	701a      	strb	r2, [r3, #0]
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	69da      	ldr	r2, [r3, #28]
 8002bec:	2380      	movs	r3, #128	; 0x80
 8002bee:	021b      	lsls	r3, r3, #8
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d000      	beq.n	8002bf6 <UART_SetConfig+0x196>
 8002bf4:	e1de      	b.n	8002fb4 <UART_SetConfig+0x554>
  {
    switch (clocksource)
 8002bf6:	231f      	movs	r3, #31
 8002bf8:	18fb      	adds	r3, r7, r3
 8002bfa:	781b      	ldrb	r3, [r3, #0]
 8002bfc:	2b02      	cmp	r3, #2
 8002bfe:	d100      	bne.n	8002c02 <UART_SetConfig+0x1a2>
 8002c00:	e06c      	b.n	8002cdc <UART_SetConfig+0x27c>
 8002c02:	dc02      	bgt.n	8002c0a <UART_SetConfig+0x1aa>
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d007      	beq.n	8002c18 <UART_SetConfig+0x1b8>
 8002c08:	e1ab      	b.n	8002f62 <UART_SetConfig+0x502>
 8002c0a:	2b04      	cmp	r3, #4
 8002c0c:	d100      	bne.n	8002c10 <UART_SetConfig+0x1b0>
 8002c0e:	e0e5      	b.n	8002ddc <UART_SetConfig+0x37c>
 8002c10:	2b08      	cmp	r3, #8
 8002c12:	d100      	bne.n	8002c16 <UART_SetConfig+0x1b6>
 8002c14:	e144      	b.n	8002ea0 <UART_SetConfig+0x440>
 8002c16:	e1a4      	b.n	8002f62 <UART_SetConfig+0x502>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c18:	f7ff f9ae 	bl	8001f78 <HAL_RCC_GetPCLK1Freq>
 8002c1c:	0003      	movs	r3, r0
 8002c1e:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d044      	beq.n	8002cb2 <UART_SetConfig+0x252>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d03e      	beq.n	8002cae <UART_SetConfig+0x24e>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c34:	2b02      	cmp	r3, #2
 8002c36:	d038      	beq.n	8002caa <UART_SetConfig+0x24a>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c3c:	2b03      	cmp	r3, #3
 8002c3e:	d032      	beq.n	8002ca6 <UART_SetConfig+0x246>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c44:	2b04      	cmp	r3, #4
 8002c46:	d02c      	beq.n	8002ca2 <UART_SetConfig+0x242>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c4c:	2b05      	cmp	r3, #5
 8002c4e:	d026      	beq.n	8002c9e <UART_SetConfig+0x23e>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c54:	2b06      	cmp	r3, #6
 8002c56:	d020      	beq.n	8002c9a <UART_SetConfig+0x23a>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c5c:	2b07      	cmp	r3, #7
 8002c5e:	d01a      	beq.n	8002c96 <UART_SetConfig+0x236>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c64:	2b08      	cmp	r3, #8
 8002c66:	d014      	beq.n	8002c92 <UART_SetConfig+0x232>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c6c:	2b09      	cmp	r3, #9
 8002c6e:	d00e      	beq.n	8002c8e <UART_SetConfig+0x22e>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c74:	2b0a      	cmp	r3, #10
 8002c76:	d008      	beq.n	8002c8a <UART_SetConfig+0x22a>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c7c:	2b0b      	cmp	r3, #11
 8002c7e:	d102      	bne.n	8002c86 <UART_SetConfig+0x226>
 8002c80:	2380      	movs	r3, #128	; 0x80
 8002c82:	005b      	lsls	r3, r3, #1
 8002c84:	e016      	b.n	8002cb4 <UART_SetConfig+0x254>
 8002c86:	2301      	movs	r3, #1
 8002c88:	e014      	b.n	8002cb4 <UART_SetConfig+0x254>
 8002c8a:	2380      	movs	r3, #128	; 0x80
 8002c8c:	e012      	b.n	8002cb4 <UART_SetConfig+0x254>
 8002c8e:	2340      	movs	r3, #64	; 0x40
 8002c90:	e010      	b.n	8002cb4 <UART_SetConfig+0x254>
 8002c92:	2320      	movs	r3, #32
 8002c94:	e00e      	b.n	8002cb4 <UART_SetConfig+0x254>
 8002c96:	2310      	movs	r3, #16
 8002c98:	e00c      	b.n	8002cb4 <UART_SetConfig+0x254>
 8002c9a:	230c      	movs	r3, #12
 8002c9c:	e00a      	b.n	8002cb4 <UART_SetConfig+0x254>
 8002c9e:	230a      	movs	r3, #10
 8002ca0:	e008      	b.n	8002cb4 <UART_SetConfig+0x254>
 8002ca2:	2308      	movs	r3, #8
 8002ca4:	e006      	b.n	8002cb4 <UART_SetConfig+0x254>
 8002ca6:	2306      	movs	r3, #6
 8002ca8:	e004      	b.n	8002cb4 <UART_SetConfig+0x254>
 8002caa:	2304      	movs	r3, #4
 8002cac:	e002      	b.n	8002cb4 <UART_SetConfig+0x254>
 8002cae:	2302      	movs	r3, #2
 8002cb0:	e000      	b.n	8002cb4 <UART_SetConfig+0x254>
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	0019      	movs	r1, r3
 8002cb6:	68f8      	ldr	r0, [r7, #12]
 8002cb8:	f7fd fa22 	bl	8000100 <__udivsi3>
 8002cbc:	0003      	movs	r3, r0
 8002cbe:	005a      	lsls	r2, r3, #1
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	085b      	lsrs	r3, r3, #1
 8002cc6:	18d2      	adds	r2, r2, r3
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	0019      	movs	r1, r3
 8002cce:	0010      	movs	r0, r2
 8002cd0:	f7fd fa16 	bl	8000100 <__udivsi3>
 8002cd4:	0003      	movs	r3, r0
 8002cd6:	b29b      	uxth	r3, r3
 8002cd8:	617b      	str	r3, [r7, #20]
        break;
 8002cda:	e147      	b.n	8002f6c <UART_SetConfig+0x50c>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d043      	beq.n	8002d6c <UART_SetConfig+0x30c>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce8:	2b01      	cmp	r3, #1
 8002cea:	d03d      	beq.n	8002d68 <UART_SetConfig+0x308>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf0:	2b02      	cmp	r3, #2
 8002cf2:	d037      	beq.n	8002d64 <UART_SetConfig+0x304>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf8:	2b03      	cmp	r3, #3
 8002cfa:	d031      	beq.n	8002d60 <UART_SetConfig+0x300>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d00:	2b04      	cmp	r3, #4
 8002d02:	d02b      	beq.n	8002d5c <UART_SetConfig+0x2fc>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d08:	2b05      	cmp	r3, #5
 8002d0a:	d025      	beq.n	8002d58 <UART_SetConfig+0x2f8>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d10:	2b06      	cmp	r3, #6
 8002d12:	d01f      	beq.n	8002d54 <UART_SetConfig+0x2f4>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d18:	2b07      	cmp	r3, #7
 8002d1a:	d019      	beq.n	8002d50 <UART_SetConfig+0x2f0>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d20:	2b08      	cmp	r3, #8
 8002d22:	d013      	beq.n	8002d4c <UART_SetConfig+0x2ec>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d28:	2b09      	cmp	r3, #9
 8002d2a:	d00d      	beq.n	8002d48 <UART_SetConfig+0x2e8>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d30:	2b0a      	cmp	r3, #10
 8002d32:	d007      	beq.n	8002d44 <UART_SetConfig+0x2e4>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d38:	2b0b      	cmp	r3, #11
 8002d3a:	d101      	bne.n	8002d40 <UART_SetConfig+0x2e0>
 8002d3c:	4b1b      	ldr	r3, [pc, #108]	; (8002dac <UART_SetConfig+0x34c>)
 8002d3e:	e016      	b.n	8002d6e <UART_SetConfig+0x30e>
 8002d40:	4b1b      	ldr	r3, [pc, #108]	; (8002db0 <UART_SetConfig+0x350>)
 8002d42:	e014      	b.n	8002d6e <UART_SetConfig+0x30e>
 8002d44:	4b1b      	ldr	r3, [pc, #108]	; (8002db4 <UART_SetConfig+0x354>)
 8002d46:	e012      	b.n	8002d6e <UART_SetConfig+0x30e>
 8002d48:	4b1b      	ldr	r3, [pc, #108]	; (8002db8 <UART_SetConfig+0x358>)
 8002d4a:	e010      	b.n	8002d6e <UART_SetConfig+0x30e>
 8002d4c:	4b1b      	ldr	r3, [pc, #108]	; (8002dbc <UART_SetConfig+0x35c>)
 8002d4e:	e00e      	b.n	8002d6e <UART_SetConfig+0x30e>
 8002d50:	4b1b      	ldr	r3, [pc, #108]	; (8002dc0 <UART_SetConfig+0x360>)
 8002d52:	e00c      	b.n	8002d6e <UART_SetConfig+0x30e>
 8002d54:	4b1b      	ldr	r3, [pc, #108]	; (8002dc4 <UART_SetConfig+0x364>)
 8002d56:	e00a      	b.n	8002d6e <UART_SetConfig+0x30e>
 8002d58:	4b1b      	ldr	r3, [pc, #108]	; (8002dc8 <UART_SetConfig+0x368>)
 8002d5a:	e008      	b.n	8002d6e <UART_SetConfig+0x30e>
 8002d5c:	4b1b      	ldr	r3, [pc, #108]	; (8002dcc <UART_SetConfig+0x36c>)
 8002d5e:	e006      	b.n	8002d6e <UART_SetConfig+0x30e>
 8002d60:	4b1b      	ldr	r3, [pc, #108]	; (8002dd0 <UART_SetConfig+0x370>)
 8002d62:	e004      	b.n	8002d6e <UART_SetConfig+0x30e>
 8002d64:	4b1b      	ldr	r3, [pc, #108]	; (8002dd4 <UART_SetConfig+0x374>)
 8002d66:	e002      	b.n	8002d6e <UART_SetConfig+0x30e>
 8002d68:	4b1b      	ldr	r3, [pc, #108]	; (8002dd8 <UART_SetConfig+0x378>)
 8002d6a:	e000      	b.n	8002d6e <UART_SetConfig+0x30e>
 8002d6c:	4b10      	ldr	r3, [pc, #64]	; (8002db0 <UART_SetConfig+0x350>)
 8002d6e:	687a      	ldr	r2, [r7, #4]
 8002d70:	6852      	ldr	r2, [r2, #4]
 8002d72:	0852      	lsrs	r2, r2, #1
 8002d74:	189a      	adds	r2, r3, r2
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	0019      	movs	r1, r3
 8002d7c:	0010      	movs	r0, r2
 8002d7e:	f7fd f9bf 	bl	8000100 <__udivsi3>
 8002d82:	0003      	movs	r3, r0
 8002d84:	b29b      	uxth	r3, r3
 8002d86:	617b      	str	r3, [r7, #20]
        break;
 8002d88:	e0f0      	b.n	8002f6c <UART_SetConfig+0x50c>
 8002d8a:	46c0      	nop			; (mov r8, r8)
 8002d8c:	cfff69f3 	.word	0xcfff69f3
 8002d90:	ffffcfff 	.word	0xffffcfff
 8002d94:	11fff4ff 	.word	0x11fff4ff
 8002d98:	40013800 	.word	0x40013800
 8002d9c:	40021000 	.word	0x40021000
 8002da0:	40004400 	.word	0x40004400
 8002da4:	40004800 	.word	0x40004800
 8002da8:	40004c00 	.word	0x40004c00
 8002dac:	0001e848 	.word	0x0001e848
 8002db0:	01e84800 	.word	0x01e84800
 8002db4:	0003d090 	.word	0x0003d090
 8002db8:	0007a120 	.word	0x0007a120
 8002dbc:	000f4240 	.word	0x000f4240
 8002dc0:	001e8480 	.word	0x001e8480
 8002dc4:	0028b0aa 	.word	0x0028b0aa
 8002dc8:	0030d400 	.word	0x0030d400
 8002dcc:	003d0900 	.word	0x003d0900
 8002dd0:	00516154 	.word	0x00516154
 8002dd4:	007a1200 	.word	0x007a1200
 8002dd8:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002ddc:	f7ff f840 	bl	8001e60 <HAL_RCC_GetSysClockFreq>
 8002de0:	0003      	movs	r3, r0
 8002de2:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d044      	beq.n	8002e76 <UART_SetConfig+0x416>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	d03e      	beq.n	8002e72 <UART_SetConfig+0x412>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df8:	2b02      	cmp	r3, #2
 8002dfa:	d038      	beq.n	8002e6e <UART_SetConfig+0x40e>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e00:	2b03      	cmp	r3, #3
 8002e02:	d032      	beq.n	8002e6a <UART_SetConfig+0x40a>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e08:	2b04      	cmp	r3, #4
 8002e0a:	d02c      	beq.n	8002e66 <UART_SetConfig+0x406>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e10:	2b05      	cmp	r3, #5
 8002e12:	d026      	beq.n	8002e62 <UART_SetConfig+0x402>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e18:	2b06      	cmp	r3, #6
 8002e1a:	d020      	beq.n	8002e5e <UART_SetConfig+0x3fe>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e20:	2b07      	cmp	r3, #7
 8002e22:	d01a      	beq.n	8002e5a <UART_SetConfig+0x3fa>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e28:	2b08      	cmp	r3, #8
 8002e2a:	d014      	beq.n	8002e56 <UART_SetConfig+0x3f6>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e30:	2b09      	cmp	r3, #9
 8002e32:	d00e      	beq.n	8002e52 <UART_SetConfig+0x3f2>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e38:	2b0a      	cmp	r3, #10
 8002e3a:	d008      	beq.n	8002e4e <UART_SetConfig+0x3ee>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e40:	2b0b      	cmp	r3, #11
 8002e42:	d102      	bne.n	8002e4a <UART_SetConfig+0x3ea>
 8002e44:	2380      	movs	r3, #128	; 0x80
 8002e46:	005b      	lsls	r3, r3, #1
 8002e48:	e016      	b.n	8002e78 <UART_SetConfig+0x418>
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e014      	b.n	8002e78 <UART_SetConfig+0x418>
 8002e4e:	2380      	movs	r3, #128	; 0x80
 8002e50:	e012      	b.n	8002e78 <UART_SetConfig+0x418>
 8002e52:	2340      	movs	r3, #64	; 0x40
 8002e54:	e010      	b.n	8002e78 <UART_SetConfig+0x418>
 8002e56:	2320      	movs	r3, #32
 8002e58:	e00e      	b.n	8002e78 <UART_SetConfig+0x418>
 8002e5a:	2310      	movs	r3, #16
 8002e5c:	e00c      	b.n	8002e78 <UART_SetConfig+0x418>
 8002e5e:	230c      	movs	r3, #12
 8002e60:	e00a      	b.n	8002e78 <UART_SetConfig+0x418>
 8002e62:	230a      	movs	r3, #10
 8002e64:	e008      	b.n	8002e78 <UART_SetConfig+0x418>
 8002e66:	2308      	movs	r3, #8
 8002e68:	e006      	b.n	8002e78 <UART_SetConfig+0x418>
 8002e6a:	2306      	movs	r3, #6
 8002e6c:	e004      	b.n	8002e78 <UART_SetConfig+0x418>
 8002e6e:	2304      	movs	r3, #4
 8002e70:	e002      	b.n	8002e78 <UART_SetConfig+0x418>
 8002e72:	2302      	movs	r3, #2
 8002e74:	e000      	b.n	8002e78 <UART_SetConfig+0x418>
 8002e76:	2301      	movs	r3, #1
 8002e78:	0019      	movs	r1, r3
 8002e7a:	68f8      	ldr	r0, [r7, #12]
 8002e7c:	f7fd f940 	bl	8000100 <__udivsi3>
 8002e80:	0003      	movs	r3, r0
 8002e82:	005a      	lsls	r2, r3, #1
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	085b      	lsrs	r3, r3, #1
 8002e8a:	18d2      	adds	r2, r2, r3
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	0019      	movs	r1, r3
 8002e92:	0010      	movs	r0, r2
 8002e94:	f7fd f934 	bl	8000100 <__udivsi3>
 8002e98:	0003      	movs	r3, r0
 8002e9a:	b29b      	uxth	r3, r3
 8002e9c:	617b      	str	r3, [r7, #20]
        break;
 8002e9e:	e065      	b.n	8002f6c <UART_SetConfig+0x50c>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d04c      	beq.n	8002f42 <UART_SetConfig+0x4e2>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	d045      	beq.n	8002f3c <UART_SetConfig+0x4dc>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb4:	2b02      	cmp	r3, #2
 8002eb6:	d03e      	beq.n	8002f36 <UART_SetConfig+0x4d6>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ebc:	2b03      	cmp	r3, #3
 8002ebe:	d038      	beq.n	8002f32 <UART_SetConfig+0x4d2>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec4:	2b04      	cmp	r3, #4
 8002ec6:	d031      	beq.n	8002f2c <UART_SetConfig+0x4cc>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ecc:	2b05      	cmp	r3, #5
 8002ece:	d02b      	beq.n	8002f28 <UART_SetConfig+0x4c8>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed4:	2b06      	cmp	r3, #6
 8002ed6:	d025      	beq.n	8002f24 <UART_SetConfig+0x4c4>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002edc:	2b07      	cmp	r3, #7
 8002ede:	d01e      	beq.n	8002f1e <UART_SetConfig+0x4be>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee4:	2b08      	cmp	r3, #8
 8002ee6:	d017      	beq.n	8002f18 <UART_SetConfig+0x4b8>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eec:	2b09      	cmp	r3, #9
 8002eee:	d010      	beq.n	8002f12 <UART_SetConfig+0x4b2>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef4:	2b0a      	cmp	r3, #10
 8002ef6:	d009      	beq.n	8002f0c <UART_SetConfig+0x4ac>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002efc:	2b0b      	cmp	r3, #11
 8002efe:	d102      	bne.n	8002f06 <UART_SetConfig+0x4a6>
 8002f00:	2380      	movs	r3, #128	; 0x80
 8002f02:	005b      	lsls	r3, r3, #1
 8002f04:	e01f      	b.n	8002f46 <UART_SetConfig+0x4e6>
 8002f06:	2380      	movs	r3, #128	; 0x80
 8002f08:	025b      	lsls	r3, r3, #9
 8002f0a:	e01c      	b.n	8002f46 <UART_SetConfig+0x4e6>
 8002f0c:	2380      	movs	r3, #128	; 0x80
 8002f0e:	009b      	lsls	r3, r3, #2
 8002f10:	e019      	b.n	8002f46 <UART_SetConfig+0x4e6>
 8002f12:	2380      	movs	r3, #128	; 0x80
 8002f14:	00db      	lsls	r3, r3, #3
 8002f16:	e016      	b.n	8002f46 <UART_SetConfig+0x4e6>
 8002f18:	2380      	movs	r3, #128	; 0x80
 8002f1a:	011b      	lsls	r3, r3, #4
 8002f1c:	e013      	b.n	8002f46 <UART_SetConfig+0x4e6>
 8002f1e:	2380      	movs	r3, #128	; 0x80
 8002f20:	015b      	lsls	r3, r3, #5
 8002f22:	e010      	b.n	8002f46 <UART_SetConfig+0x4e6>
 8002f24:	4bb9      	ldr	r3, [pc, #740]	; (800320c <UART_SetConfig+0x7ac>)
 8002f26:	e00e      	b.n	8002f46 <UART_SetConfig+0x4e6>
 8002f28:	4bb9      	ldr	r3, [pc, #740]	; (8003210 <UART_SetConfig+0x7b0>)
 8002f2a:	e00c      	b.n	8002f46 <UART_SetConfig+0x4e6>
 8002f2c:	2380      	movs	r3, #128	; 0x80
 8002f2e:	019b      	lsls	r3, r3, #6
 8002f30:	e009      	b.n	8002f46 <UART_SetConfig+0x4e6>
 8002f32:	4bb8      	ldr	r3, [pc, #736]	; (8003214 <UART_SetConfig+0x7b4>)
 8002f34:	e007      	b.n	8002f46 <UART_SetConfig+0x4e6>
 8002f36:	2380      	movs	r3, #128	; 0x80
 8002f38:	01db      	lsls	r3, r3, #7
 8002f3a:	e004      	b.n	8002f46 <UART_SetConfig+0x4e6>
 8002f3c:	2380      	movs	r3, #128	; 0x80
 8002f3e:	021b      	lsls	r3, r3, #8
 8002f40:	e001      	b.n	8002f46 <UART_SetConfig+0x4e6>
 8002f42:	2380      	movs	r3, #128	; 0x80
 8002f44:	025b      	lsls	r3, r3, #9
 8002f46:	687a      	ldr	r2, [r7, #4]
 8002f48:	6852      	ldr	r2, [r2, #4]
 8002f4a:	0852      	lsrs	r2, r2, #1
 8002f4c:	189a      	adds	r2, r3, r2
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	0019      	movs	r1, r3
 8002f54:	0010      	movs	r0, r2
 8002f56:	f7fd f8d3 	bl	8000100 <__udivsi3>
 8002f5a:	0003      	movs	r3, r0
 8002f5c:	b29b      	uxth	r3, r3
 8002f5e:	617b      	str	r3, [r7, #20]
        break;
 8002f60:	e004      	b.n	8002f6c <UART_SetConfig+0x50c>
      default:
        ret = HAL_ERROR;
 8002f62:	231e      	movs	r3, #30
 8002f64:	18fb      	adds	r3, r7, r3
 8002f66:	2201      	movs	r2, #1
 8002f68:	701a      	strb	r2, [r3, #0]
        break;
 8002f6a:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	2b0f      	cmp	r3, #15
 8002f70:	d91b      	bls.n	8002faa <UART_SetConfig+0x54a>
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	4aa8      	ldr	r2, [pc, #672]	; (8003218 <UART_SetConfig+0x7b8>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d817      	bhi.n	8002faa <UART_SetConfig+0x54a>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	b29a      	uxth	r2, r3
 8002f7e:	200a      	movs	r0, #10
 8002f80:	183b      	adds	r3, r7, r0
 8002f82:	210f      	movs	r1, #15
 8002f84:	438a      	bics	r2, r1
 8002f86:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	085b      	lsrs	r3, r3, #1
 8002f8c:	b29b      	uxth	r3, r3
 8002f8e:	2207      	movs	r2, #7
 8002f90:	4013      	ands	r3, r2
 8002f92:	b299      	uxth	r1, r3
 8002f94:	183b      	adds	r3, r7, r0
 8002f96:	183a      	adds	r2, r7, r0
 8002f98:	8812      	ldrh	r2, [r2, #0]
 8002f9a:	430a      	orrs	r2, r1
 8002f9c:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	183a      	adds	r2, r7, r0
 8002fa4:	8812      	ldrh	r2, [r2, #0]
 8002fa6:	60da      	str	r2, [r3, #12]
 8002fa8:	e1c5      	b.n	8003336 <UART_SetConfig+0x8d6>
    }
    else
    {
      ret = HAL_ERROR;
 8002faa:	231e      	movs	r3, #30
 8002fac:	18fb      	adds	r3, r7, r3
 8002fae:	2201      	movs	r2, #1
 8002fb0:	701a      	strb	r2, [r3, #0]
 8002fb2:	e1c0      	b.n	8003336 <UART_SetConfig+0x8d6>
    }
  }
  else
  {
    switch (clocksource)
 8002fb4:	231f      	movs	r3, #31
 8002fb6:	18fb      	adds	r3, r7, r3
 8002fb8:	781b      	ldrb	r3, [r3, #0]
 8002fba:	2b02      	cmp	r3, #2
 8002fbc:	d100      	bne.n	8002fc0 <UART_SetConfig+0x560>
 8002fbe:	e06c      	b.n	800309a <UART_SetConfig+0x63a>
 8002fc0:	dc02      	bgt.n	8002fc8 <UART_SetConfig+0x568>
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d007      	beq.n	8002fd6 <UART_SetConfig+0x576>
 8002fc6:	e1a1      	b.n	800330c <UART_SetConfig+0x8ac>
 8002fc8:	2b04      	cmp	r3, #4
 8002fca:	d100      	bne.n	8002fce <UART_SetConfig+0x56e>
 8002fcc:	e0bc      	b.n	8003148 <UART_SetConfig+0x6e8>
 8002fce:	2b08      	cmp	r3, #8
 8002fd0:	d100      	bne.n	8002fd4 <UART_SetConfig+0x574>
 8002fd2:	e13b      	b.n	800324c <UART_SetConfig+0x7ec>
 8002fd4:	e19a      	b.n	800330c <UART_SetConfig+0x8ac>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002fd6:	f7fe ffcf 	bl	8001f78 <HAL_RCC_GetPCLK1Freq>
 8002fda:	0003      	movs	r3, r0
 8002fdc:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d044      	beq.n	8003070 <UART_SetConfig+0x610>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d03e      	beq.n	800306c <UART_SetConfig+0x60c>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff2:	2b02      	cmp	r3, #2
 8002ff4:	d038      	beq.n	8003068 <UART_SetConfig+0x608>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ffa:	2b03      	cmp	r3, #3
 8002ffc:	d032      	beq.n	8003064 <UART_SetConfig+0x604>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003002:	2b04      	cmp	r3, #4
 8003004:	d02c      	beq.n	8003060 <UART_SetConfig+0x600>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800300a:	2b05      	cmp	r3, #5
 800300c:	d026      	beq.n	800305c <UART_SetConfig+0x5fc>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003012:	2b06      	cmp	r3, #6
 8003014:	d020      	beq.n	8003058 <UART_SetConfig+0x5f8>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800301a:	2b07      	cmp	r3, #7
 800301c:	d01a      	beq.n	8003054 <UART_SetConfig+0x5f4>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003022:	2b08      	cmp	r3, #8
 8003024:	d014      	beq.n	8003050 <UART_SetConfig+0x5f0>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800302a:	2b09      	cmp	r3, #9
 800302c:	d00e      	beq.n	800304c <UART_SetConfig+0x5ec>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003032:	2b0a      	cmp	r3, #10
 8003034:	d008      	beq.n	8003048 <UART_SetConfig+0x5e8>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800303a:	2b0b      	cmp	r3, #11
 800303c:	d102      	bne.n	8003044 <UART_SetConfig+0x5e4>
 800303e:	2380      	movs	r3, #128	; 0x80
 8003040:	005b      	lsls	r3, r3, #1
 8003042:	e016      	b.n	8003072 <UART_SetConfig+0x612>
 8003044:	2301      	movs	r3, #1
 8003046:	e014      	b.n	8003072 <UART_SetConfig+0x612>
 8003048:	2380      	movs	r3, #128	; 0x80
 800304a:	e012      	b.n	8003072 <UART_SetConfig+0x612>
 800304c:	2340      	movs	r3, #64	; 0x40
 800304e:	e010      	b.n	8003072 <UART_SetConfig+0x612>
 8003050:	2320      	movs	r3, #32
 8003052:	e00e      	b.n	8003072 <UART_SetConfig+0x612>
 8003054:	2310      	movs	r3, #16
 8003056:	e00c      	b.n	8003072 <UART_SetConfig+0x612>
 8003058:	230c      	movs	r3, #12
 800305a:	e00a      	b.n	8003072 <UART_SetConfig+0x612>
 800305c:	230a      	movs	r3, #10
 800305e:	e008      	b.n	8003072 <UART_SetConfig+0x612>
 8003060:	2308      	movs	r3, #8
 8003062:	e006      	b.n	8003072 <UART_SetConfig+0x612>
 8003064:	2306      	movs	r3, #6
 8003066:	e004      	b.n	8003072 <UART_SetConfig+0x612>
 8003068:	2304      	movs	r3, #4
 800306a:	e002      	b.n	8003072 <UART_SetConfig+0x612>
 800306c:	2302      	movs	r3, #2
 800306e:	e000      	b.n	8003072 <UART_SetConfig+0x612>
 8003070:	2301      	movs	r3, #1
 8003072:	0019      	movs	r1, r3
 8003074:	68f8      	ldr	r0, [r7, #12]
 8003076:	f7fd f843 	bl	8000100 <__udivsi3>
 800307a:	0003      	movs	r3, r0
 800307c:	001a      	movs	r2, r3
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	085b      	lsrs	r3, r3, #1
 8003084:	18d2      	adds	r2, r2, r3
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	0019      	movs	r1, r3
 800308c:	0010      	movs	r0, r2
 800308e:	f7fd f837 	bl	8000100 <__udivsi3>
 8003092:	0003      	movs	r3, r0
 8003094:	b29b      	uxth	r3, r3
 8003096:	617b      	str	r3, [r7, #20]
        break;
 8003098:	e13d      	b.n	8003316 <UART_SetConfig+0x8b6>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d043      	beq.n	800312a <UART_SetConfig+0x6ca>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a6:	2b01      	cmp	r3, #1
 80030a8:	d03d      	beq.n	8003126 <UART_SetConfig+0x6c6>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ae:	2b02      	cmp	r3, #2
 80030b0:	d037      	beq.n	8003122 <UART_SetConfig+0x6c2>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b6:	2b03      	cmp	r3, #3
 80030b8:	d031      	beq.n	800311e <UART_SetConfig+0x6be>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030be:	2b04      	cmp	r3, #4
 80030c0:	d02b      	beq.n	800311a <UART_SetConfig+0x6ba>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c6:	2b05      	cmp	r3, #5
 80030c8:	d025      	beq.n	8003116 <UART_SetConfig+0x6b6>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ce:	2b06      	cmp	r3, #6
 80030d0:	d01f      	beq.n	8003112 <UART_SetConfig+0x6b2>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d6:	2b07      	cmp	r3, #7
 80030d8:	d019      	beq.n	800310e <UART_SetConfig+0x6ae>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030de:	2b08      	cmp	r3, #8
 80030e0:	d013      	beq.n	800310a <UART_SetConfig+0x6aa>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e6:	2b09      	cmp	r3, #9
 80030e8:	d00d      	beq.n	8003106 <UART_SetConfig+0x6a6>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ee:	2b0a      	cmp	r3, #10
 80030f0:	d007      	beq.n	8003102 <UART_SetConfig+0x6a2>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f6:	2b0b      	cmp	r3, #11
 80030f8:	d101      	bne.n	80030fe <UART_SetConfig+0x69e>
 80030fa:	4b48      	ldr	r3, [pc, #288]	; (800321c <UART_SetConfig+0x7bc>)
 80030fc:	e016      	b.n	800312c <UART_SetConfig+0x6cc>
 80030fe:	4b48      	ldr	r3, [pc, #288]	; (8003220 <UART_SetConfig+0x7c0>)
 8003100:	e014      	b.n	800312c <UART_SetConfig+0x6cc>
 8003102:	4b48      	ldr	r3, [pc, #288]	; (8003224 <UART_SetConfig+0x7c4>)
 8003104:	e012      	b.n	800312c <UART_SetConfig+0x6cc>
 8003106:	4b48      	ldr	r3, [pc, #288]	; (8003228 <UART_SetConfig+0x7c8>)
 8003108:	e010      	b.n	800312c <UART_SetConfig+0x6cc>
 800310a:	4b48      	ldr	r3, [pc, #288]	; (800322c <UART_SetConfig+0x7cc>)
 800310c:	e00e      	b.n	800312c <UART_SetConfig+0x6cc>
 800310e:	4b48      	ldr	r3, [pc, #288]	; (8003230 <UART_SetConfig+0x7d0>)
 8003110:	e00c      	b.n	800312c <UART_SetConfig+0x6cc>
 8003112:	4b48      	ldr	r3, [pc, #288]	; (8003234 <UART_SetConfig+0x7d4>)
 8003114:	e00a      	b.n	800312c <UART_SetConfig+0x6cc>
 8003116:	4b48      	ldr	r3, [pc, #288]	; (8003238 <UART_SetConfig+0x7d8>)
 8003118:	e008      	b.n	800312c <UART_SetConfig+0x6cc>
 800311a:	4b48      	ldr	r3, [pc, #288]	; (800323c <UART_SetConfig+0x7dc>)
 800311c:	e006      	b.n	800312c <UART_SetConfig+0x6cc>
 800311e:	4b48      	ldr	r3, [pc, #288]	; (8003240 <UART_SetConfig+0x7e0>)
 8003120:	e004      	b.n	800312c <UART_SetConfig+0x6cc>
 8003122:	4b48      	ldr	r3, [pc, #288]	; (8003244 <UART_SetConfig+0x7e4>)
 8003124:	e002      	b.n	800312c <UART_SetConfig+0x6cc>
 8003126:	4b48      	ldr	r3, [pc, #288]	; (8003248 <UART_SetConfig+0x7e8>)
 8003128:	e000      	b.n	800312c <UART_SetConfig+0x6cc>
 800312a:	4b3d      	ldr	r3, [pc, #244]	; (8003220 <UART_SetConfig+0x7c0>)
 800312c:	687a      	ldr	r2, [r7, #4]
 800312e:	6852      	ldr	r2, [r2, #4]
 8003130:	0852      	lsrs	r2, r2, #1
 8003132:	189a      	adds	r2, r3, r2
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	0019      	movs	r1, r3
 800313a:	0010      	movs	r0, r2
 800313c:	f7fc ffe0 	bl	8000100 <__udivsi3>
 8003140:	0003      	movs	r3, r0
 8003142:	b29b      	uxth	r3, r3
 8003144:	617b      	str	r3, [r7, #20]
        break;
 8003146:	e0e6      	b.n	8003316 <UART_SetConfig+0x8b6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003148:	f7fe fe8a 	bl	8001e60 <HAL_RCC_GetSysClockFreq>
 800314c:	0003      	movs	r3, r0
 800314e:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003154:	2b00      	cmp	r3, #0
 8003156:	d044      	beq.n	80031e2 <UART_SetConfig+0x782>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800315c:	2b01      	cmp	r3, #1
 800315e:	d03e      	beq.n	80031de <UART_SetConfig+0x77e>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003164:	2b02      	cmp	r3, #2
 8003166:	d038      	beq.n	80031da <UART_SetConfig+0x77a>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800316c:	2b03      	cmp	r3, #3
 800316e:	d032      	beq.n	80031d6 <UART_SetConfig+0x776>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003174:	2b04      	cmp	r3, #4
 8003176:	d02c      	beq.n	80031d2 <UART_SetConfig+0x772>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800317c:	2b05      	cmp	r3, #5
 800317e:	d026      	beq.n	80031ce <UART_SetConfig+0x76e>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003184:	2b06      	cmp	r3, #6
 8003186:	d020      	beq.n	80031ca <UART_SetConfig+0x76a>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800318c:	2b07      	cmp	r3, #7
 800318e:	d01a      	beq.n	80031c6 <UART_SetConfig+0x766>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003194:	2b08      	cmp	r3, #8
 8003196:	d014      	beq.n	80031c2 <UART_SetConfig+0x762>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800319c:	2b09      	cmp	r3, #9
 800319e:	d00e      	beq.n	80031be <UART_SetConfig+0x75e>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a4:	2b0a      	cmp	r3, #10
 80031a6:	d008      	beq.n	80031ba <UART_SetConfig+0x75a>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ac:	2b0b      	cmp	r3, #11
 80031ae:	d102      	bne.n	80031b6 <UART_SetConfig+0x756>
 80031b0:	2380      	movs	r3, #128	; 0x80
 80031b2:	005b      	lsls	r3, r3, #1
 80031b4:	e016      	b.n	80031e4 <UART_SetConfig+0x784>
 80031b6:	2301      	movs	r3, #1
 80031b8:	e014      	b.n	80031e4 <UART_SetConfig+0x784>
 80031ba:	2380      	movs	r3, #128	; 0x80
 80031bc:	e012      	b.n	80031e4 <UART_SetConfig+0x784>
 80031be:	2340      	movs	r3, #64	; 0x40
 80031c0:	e010      	b.n	80031e4 <UART_SetConfig+0x784>
 80031c2:	2320      	movs	r3, #32
 80031c4:	e00e      	b.n	80031e4 <UART_SetConfig+0x784>
 80031c6:	2310      	movs	r3, #16
 80031c8:	e00c      	b.n	80031e4 <UART_SetConfig+0x784>
 80031ca:	230c      	movs	r3, #12
 80031cc:	e00a      	b.n	80031e4 <UART_SetConfig+0x784>
 80031ce:	230a      	movs	r3, #10
 80031d0:	e008      	b.n	80031e4 <UART_SetConfig+0x784>
 80031d2:	2308      	movs	r3, #8
 80031d4:	e006      	b.n	80031e4 <UART_SetConfig+0x784>
 80031d6:	2306      	movs	r3, #6
 80031d8:	e004      	b.n	80031e4 <UART_SetConfig+0x784>
 80031da:	2304      	movs	r3, #4
 80031dc:	e002      	b.n	80031e4 <UART_SetConfig+0x784>
 80031de:	2302      	movs	r3, #2
 80031e0:	e000      	b.n	80031e4 <UART_SetConfig+0x784>
 80031e2:	2301      	movs	r3, #1
 80031e4:	0019      	movs	r1, r3
 80031e6:	68f8      	ldr	r0, [r7, #12]
 80031e8:	f7fc ff8a 	bl	8000100 <__udivsi3>
 80031ec:	0003      	movs	r3, r0
 80031ee:	001a      	movs	r2, r3
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	085b      	lsrs	r3, r3, #1
 80031f6:	18d2      	adds	r2, r2, r3
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	0019      	movs	r1, r3
 80031fe:	0010      	movs	r0, r2
 8003200:	f7fc ff7e 	bl	8000100 <__udivsi3>
 8003204:	0003      	movs	r3, r0
 8003206:	b29b      	uxth	r3, r3
 8003208:	617b      	str	r3, [r7, #20]
        break;
 800320a:	e084      	b.n	8003316 <UART_SetConfig+0x8b6>
 800320c:	00001554 	.word	0x00001554
 8003210:	00001998 	.word	0x00001998
 8003214:	00002aaa 	.word	0x00002aaa
 8003218:	0000ffff 	.word	0x0000ffff
 800321c:	0000f424 	.word	0x0000f424
 8003220:	00f42400 	.word	0x00f42400
 8003224:	0001e848 	.word	0x0001e848
 8003228:	0003d090 	.word	0x0003d090
 800322c:	0007a120 	.word	0x0007a120
 8003230:	000f4240 	.word	0x000f4240
 8003234:	00145855 	.word	0x00145855
 8003238:	00186a00 	.word	0x00186a00
 800323c:	001e8480 	.word	0x001e8480
 8003240:	0028b0aa 	.word	0x0028b0aa
 8003244:	003d0900 	.word	0x003d0900
 8003248:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003250:	2b00      	cmp	r3, #0
 8003252:	d04b      	beq.n	80032ec <UART_SetConfig+0x88c>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003258:	2b01      	cmp	r3, #1
 800325a:	d044      	beq.n	80032e6 <UART_SetConfig+0x886>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003260:	2b02      	cmp	r3, #2
 8003262:	d03d      	beq.n	80032e0 <UART_SetConfig+0x880>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003268:	2b03      	cmp	r3, #3
 800326a:	d037      	beq.n	80032dc <UART_SetConfig+0x87c>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003270:	2b04      	cmp	r3, #4
 8003272:	d030      	beq.n	80032d6 <UART_SetConfig+0x876>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003278:	2b05      	cmp	r3, #5
 800327a:	d02a      	beq.n	80032d2 <UART_SetConfig+0x872>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003280:	2b06      	cmp	r3, #6
 8003282:	d024      	beq.n	80032ce <UART_SetConfig+0x86e>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003288:	2b07      	cmp	r3, #7
 800328a:	d01d      	beq.n	80032c8 <UART_SetConfig+0x868>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003290:	2b08      	cmp	r3, #8
 8003292:	d016      	beq.n	80032c2 <UART_SetConfig+0x862>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003298:	2b09      	cmp	r3, #9
 800329a:	d00f      	beq.n	80032bc <UART_SetConfig+0x85c>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a0:	2b0a      	cmp	r3, #10
 80032a2:	d008      	beq.n	80032b6 <UART_SetConfig+0x856>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a8:	2b0b      	cmp	r3, #11
 80032aa:	d101      	bne.n	80032b0 <UART_SetConfig+0x850>
 80032ac:	2380      	movs	r3, #128	; 0x80
 80032ae:	e01f      	b.n	80032f0 <UART_SetConfig+0x890>
 80032b0:	2380      	movs	r3, #128	; 0x80
 80032b2:	021b      	lsls	r3, r3, #8
 80032b4:	e01c      	b.n	80032f0 <UART_SetConfig+0x890>
 80032b6:	2380      	movs	r3, #128	; 0x80
 80032b8:	005b      	lsls	r3, r3, #1
 80032ba:	e019      	b.n	80032f0 <UART_SetConfig+0x890>
 80032bc:	2380      	movs	r3, #128	; 0x80
 80032be:	009b      	lsls	r3, r3, #2
 80032c0:	e016      	b.n	80032f0 <UART_SetConfig+0x890>
 80032c2:	2380      	movs	r3, #128	; 0x80
 80032c4:	00db      	lsls	r3, r3, #3
 80032c6:	e013      	b.n	80032f0 <UART_SetConfig+0x890>
 80032c8:	2380      	movs	r3, #128	; 0x80
 80032ca:	011b      	lsls	r3, r3, #4
 80032cc:	e010      	b.n	80032f0 <UART_SetConfig+0x890>
 80032ce:	4b24      	ldr	r3, [pc, #144]	; (8003360 <UART_SetConfig+0x900>)
 80032d0:	e00e      	b.n	80032f0 <UART_SetConfig+0x890>
 80032d2:	4b24      	ldr	r3, [pc, #144]	; (8003364 <UART_SetConfig+0x904>)
 80032d4:	e00c      	b.n	80032f0 <UART_SetConfig+0x890>
 80032d6:	2380      	movs	r3, #128	; 0x80
 80032d8:	015b      	lsls	r3, r3, #5
 80032da:	e009      	b.n	80032f0 <UART_SetConfig+0x890>
 80032dc:	4b22      	ldr	r3, [pc, #136]	; (8003368 <UART_SetConfig+0x908>)
 80032de:	e007      	b.n	80032f0 <UART_SetConfig+0x890>
 80032e0:	2380      	movs	r3, #128	; 0x80
 80032e2:	019b      	lsls	r3, r3, #6
 80032e4:	e004      	b.n	80032f0 <UART_SetConfig+0x890>
 80032e6:	2380      	movs	r3, #128	; 0x80
 80032e8:	01db      	lsls	r3, r3, #7
 80032ea:	e001      	b.n	80032f0 <UART_SetConfig+0x890>
 80032ec:	2380      	movs	r3, #128	; 0x80
 80032ee:	021b      	lsls	r3, r3, #8
 80032f0:	687a      	ldr	r2, [r7, #4]
 80032f2:	6852      	ldr	r2, [r2, #4]
 80032f4:	0852      	lsrs	r2, r2, #1
 80032f6:	189a      	adds	r2, r3, r2
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	0019      	movs	r1, r3
 80032fe:	0010      	movs	r0, r2
 8003300:	f7fc fefe 	bl	8000100 <__udivsi3>
 8003304:	0003      	movs	r3, r0
 8003306:	b29b      	uxth	r3, r3
 8003308:	617b      	str	r3, [r7, #20]
        break;
 800330a:	e004      	b.n	8003316 <UART_SetConfig+0x8b6>
      default:
        ret = HAL_ERROR;
 800330c:	231e      	movs	r3, #30
 800330e:	18fb      	adds	r3, r7, r3
 8003310:	2201      	movs	r2, #1
 8003312:	701a      	strb	r2, [r3, #0]
        break;
 8003314:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	2b0f      	cmp	r3, #15
 800331a:	d908      	bls.n	800332e <UART_SetConfig+0x8ce>
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	4a13      	ldr	r2, [pc, #76]	; (800336c <UART_SetConfig+0x90c>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d804      	bhi.n	800332e <UART_SetConfig+0x8ce>
    {
      huart->Instance->BRR = usartdiv;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	697a      	ldr	r2, [r7, #20]
 800332a:	60da      	str	r2, [r3, #12]
 800332c:	e003      	b.n	8003336 <UART_SetConfig+0x8d6>
    }
    else
    {
      ret = HAL_ERROR;
 800332e:	231e      	movs	r3, #30
 8003330:	18fb      	adds	r3, r7, r3
 8003332:	2201      	movs	r2, #1
 8003334:	701a      	strb	r2, [r3, #0]
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	226a      	movs	r2, #106	; 0x6a
 800333a:	2101      	movs	r1, #1
 800333c:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2268      	movs	r2, #104	; 0x68
 8003342:	2101      	movs	r1, #1
 8003344:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2200      	movs	r2, #0
 800334a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2200      	movs	r2, #0
 8003350:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8003352:	231e      	movs	r3, #30
 8003354:	18fb      	adds	r3, r7, r3
 8003356:	781b      	ldrb	r3, [r3, #0]
}
 8003358:	0018      	movs	r0, r3
 800335a:	46bd      	mov	sp, r7
 800335c:	b008      	add	sp, #32
 800335e:	bd80      	pop	{r7, pc}
 8003360:	00000aaa 	.word	0x00000aaa
 8003364:	00000ccc 	.word	0x00000ccc
 8003368:	00001555 	.word	0x00001555
 800336c:	0000ffff 	.word	0x0000ffff

08003370 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b082      	sub	sp, #8
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800337c:	2201      	movs	r2, #1
 800337e:	4013      	ands	r3, r2
 8003380:	d00b      	beq.n	800339a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	4a4a      	ldr	r2, [pc, #296]	; (80034b4 <UART_AdvFeatureConfig+0x144>)
 800338a:	4013      	ands	r3, r2
 800338c:	0019      	movs	r1, r3
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	430a      	orrs	r2, r1
 8003398:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800339e:	2202      	movs	r2, #2
 80033a0:	4013      	ands	r3, r2
 80033a2:	d00b      	beq.n	80033bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	4a43      	ldr	r2, [pc, #268]	; (80034b8 <UART_AdvFeatureConfig+0x148>)
 80033ac:	4013      	ands	r3, r2
 80033ae:	0019      	movs	r1, r3
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	430a      	orrs	r2, r1
 80033ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033c0:	2204      	movs	r2, #4
 80033c2:	4013      	ands	r3, r2
 80033c4:	d00b      	beq.n	80033de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	4a3b      	ldr	r2, [pc, #236]	; (80034bc <UART_AdvFeatureConfig+0x14c>)
 80033ce:	4013      	ands	r3, r2
 80033d0:	0019      	movs	r1, r3
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	430a      	orrs	r2, r1
 80033dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033e2:	2208      	movs	r2, #8
 80033e4:	4013      	ands	r3, r2
 80033e6:	d00b      	beq.n	8003400 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	4a34      	ldr	r2, [pc, #208]	; (80034c0 <UART_AdvFeatureConfig+0x150>)
 80033f0:	4013      	ands	r3, r2
 80033f2:	0019      	movs	r1, r3
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	430a      	orrs	r2, r1
 80033fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003404:	2210      	movs	r2, #16
 8003406:	4013      	ands	r3, r2
 8003408:	d00b      	beq.n	8003422 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	4a2c      	ldr	r2, [pc, #176]	; (80034c4 <UART_AdvFeatureConfig+0x154>)
 8003412:	4013      	ands	r3, r2
 8003414:	0019      	movs	r1, r3
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	430a      	orrs	r2, r1
 8003420:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003426:	2220      	movs	r2, #32
 8003428:	4013      	ands	r3, r2
 800342a:	d00b      	beq.n	8003444 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	4a25      	ldr	r2, [pc, #148]	; (80034c8 <UART_AdvFeatureConfig+0x158>)
 8003434:	4013      	ands	r3, r2
 8003436:	0019      	movs	r1, r3
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	430a      	orrs	r2, r1
 8003442:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003448:	2240      	movs	r2, #64	; 0x40
 800344a:	4013      	ands	r3, r2
 800344c:	d01d      	beq.n	800348a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	4a1d      	ldr	r2, [pc, #116]	; (80034cc <UART_AdvFeatureConfig+0x15c>)
 8003456:	4013      	ands	r3, r2
 8003458:	0019      	movs	r1, r3
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	430a      	orrs	r2, r1
 8003464:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800346a:	2380      	movs	r3, #128	; 0x80
 800346c:	035b      	lsls	r3, r3, #13
 800346e:	429a      	cmp	r2, r3
 8003470:	d10b      	bne.n	800348a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	4a15      	ldr	r2, [pc, #84]	; (80034d0 <UART_AdvFeatureConfig+0x160>)
 800347a:	4013      	ands	r3, r2
 800347c:	0019      	movs	r1, r3
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	430a      	orrs	r2, r1
 8003488:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800348e:	2280      	movs	r2, #128	; 0x80
 8003490:	4013      	ands	r3, r2
 8003492:	d00b      	beq.n	80034ac <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	4a0e      	ldr	r2, [pc, #56]	; (80034d4 <UART_AdvFeatureConfig+0x164>)
 800349c:	4013      	ands	r3, r2
 800349e:	0019      	movs	r1, r3
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	430a      	orrs	r2, r1
 80034aa:	605a      	str	r2, [r3, #4]
  }
}
 80034ac:	46c0      	nop			; (mov r8, r8)
 80034ae:	46bd      	mov	sp, r7
 80034b0:	b002      	add	sp, #8
 80034b2:	bd80      	pop	{r7, pc}
 80034b4:	fffdffff 	.word	0xfffdffff
 80034b8:	fffeffff 	.word	0xfffeffff
 80034bc:	fffbffff 	.word	0xfffbffff
 80034c0:	ffff7fff 	.word	0xffff7fff
 80034c4:	ffffefff 	.word	0xffffefff
 80034c8:	ffffdfff 	.word	0xffffdfff
 80034cc:	ffefffff 	.word	0xffefffff
 80034d0:	ff9fffff 	.word	0xff9fffff
 80034d4:	fff7ffff 	.word	0xfff7ffff

080034d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b086      	sub	sp, #24
 80034dc:	af02      	add	r7, sp, #8
 80034de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2288      	movs	r2, #136	; 0x88
 80034e4:	2100      	movs	r1, #0
 80034e6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80034e8:	f7fd fd94 	bl	8001014 <HAL_GetTick>
 80034ec:	0003      	movs	r3, r0
 80034ee:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	2208      	movs	r2, #8
 80034f8:	4013      	ands	r3, r2
 80034fa:	2b08      	cmp	r3, #8
 80034fc:	d10d      	bne.n	800351a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80034fe:	68fa      	ldr	r2, [r7, #12]
 8003500:	2380      	movs	r3, #128	; 0x80
 8003502:	0399      	lsls	r1, r3, #14
 8003504:	6878      	ldr	r0, [r7, #4]
 8003506:	4b18      	ldr	r3, [pc, #96]	; (8003568 <UART_CheckIdleState+0x90>)
 8003508:	9300      	str	r3, [sp, #0]
 800350a:	0013      	movs	r3, r2
 800350c:	2200      	movs	r2, #0
 800350e:	f000 f82d 	bl	800356c <UART_WaitOnFlagUntilTimeout>
 8003512:	1e03      	subs	r3, r0, #0
 8003514:	d001      	beq.n	800351a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003516:	2303      	movs	r3, #3
 8003518:	e021      	b.n	800355e <UART_CheckIdleState+0x86>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	2204      	movs	r2, #4
 8003522:	4013      	ands	r3, r2
 8003524:	2b04      	cmp	r3, #4
 8003526:	d10d      	bne.n	8003544 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003528:	68fa      	ldr	r2, [r7, #12]
 800352a:	2380      	movs	r3, #128	; 0x80
 800352c:	03d9      	lsls	r1, r3, #15
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	4b0d      	ldr	r3, [pc, #52]	; (8003568 <UART_CheckIdleState+0x90>)
 8003532:	9300      	str	r3, [sp, #0]
 8003534:	0013      	movs	r3, r2
 8003536:	2200      	movs	r2, #0
 8003538:	f000 f818 	bl	800356c <UART_WaitOnFlagUntilTimeout>
 800353c:	1e03      	subs	r3, r0, #0
 800353e:	d001      	beq.n	8003544 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003540:	2303      	movs	r3, #3
 8003542:	e00c      	b.n	800355e <UART_CheckIdleState+0x86>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2280      	movs	r2, #128	; 0x80
 8003548:	2120      	movs	r1, #32
 800354a:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2284      	movs	r2, #132	; 0x84
 8003550:	2120      	movs	r1, #32
 8003552:	5099      	str	r1, [r3, r2]

  __HAL_UNLOCK(huart);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	227c      	movs	r2, #124	; 0x7c
 8003558:	2100      	movs	r1, #0
 800355a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800355c:	2300      	movs	r3, #0
}
 800355e:	0018      	movs	r0, r3
 8003560:	46bd      	mov	sp, r7
 8003562:	b004      	add	sp, #16
 8003564:	bd80      	pop	{r7, pc}
 8003566:	46c0      	nop			; (mov r8, r8)
 8003568:	01ffffff 	.word	0x01ffffff

0800356c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b084      	sub	sp, #16
 8003570:	af00      	add	r7, sp, #0
 8003572:	60f8      	str	r0, [r7, #12]
 8003574:	60b9      	str	r1, [r7, #8]
 8003576:	603b      	str	r3, [r7, #0]
 8003578:	1dfb      	adds	r3, r7, #7
 800357a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800357c:	e02b      	b.n	80035d6 <UART_WaitOnFlagUntilTimeout+0x6a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800357e:	69bb      	ldr	r3, [r7, #24]
 8003580:	3301      	adds	r3, #1
 8003582:	d028      	beq.n	80035d6 <UART_WaitOnFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003584:	f7fd fd46 	bl	8001014 <HAL_GetTick>
 8003588:	0002      	movs	r2, r0
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	1ad3      	subs	r3, r2, r3
 800358e:	69ba      	ldr	r2, [r7, #24]
 8003590:	429a      	cmp	r2, r3
 8003592:	d302      	bcc.n	800359a <UART_WaitOnFlagUntilTimeout+0x2e>
 8003594:	69bb      	ldr	r3, [r7, #24]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d11d      	bne.n	80035d6 <UART_WaitOnFlagUntilTimeout+0x6a>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4916      	ldr	r1, [pc, #88]	; (8003600 <UART_WaitOnFlagUntilTimeout+0x94>)
 80035a6:	400a      	ands	r2, r1
 80035a8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	689a      	ldr	r2, [r3, #8]
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	2101      	movs	r1, #1
 80035b6:	438a      	bics	r2, r1
 80035b8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2280      	movs	r2, #128	; 0x80
 80035be:	2120      	movs	r1, #32
 80035c0:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2284      	movs	r2, #132	; 0x84
 80035c6:	2120      	movs	r1, #32
 80035c8:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	227c      	movs	r2, #124	; 0x7c
 80035ce:	2100      	movs	r1, #0
 80035d0:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80035d2:	2303      	movs	r3, #3
 80035d4:	e00f      	b.n	80035f6 <UART_WaitOnFlagUntilTimeout+0x8a>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	69db      	ldr	r3, [r3, #28]
 80035dc:	68ba      	ldr	r2, [r7, #8]
 80035de:	4013      	ands	r3, r2
 80035e0:	68ba      	ldr	r2, [r7, #8]
 80035e2:	1ad3      	subs	r3, r2, r3
 80035e4:	425a      	negs	r2, r3
 80035e6:	4153      	adcs	r3, r2
 80035e8:	b2db      	uxtb	r3, r3
 80035ea:	001a      	movs	r2, r3
 80035ec:	1dfb      	adds	r3, r7, #7
 80035ee:	781b      	ldrb	r3, [r3, #0]
 80035f0:	429a      	cmp	r2, r3
 80035f2:	d0c4      	beq.n	800357e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80035f4:	2300      	movs	r3, #0
}
 80035f6:	0018      	movs	r0, r3
 80035f8:	46bd      	mov	sp, r7
 80035fa:	b004      	add	sp, #16
 80035fc:	bd80      	pop	{r7, pc}
 80035fe:	46c0      	nop			; (mov r8, r8)
 8003600:	fffffe5f 	.word	0xfffffe5f

08003604 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b084      	sub	sp, #16
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	227c      	movs	r2, #124	; 0x7c
 8003610:	5c9b      	ldrb	r3, [r3, r2]
 8003612:	2b01      	cmp	r3, #1
 8003614:	d101      	bne.n	800361a <HAL_UARTEx_DisableFifoMode+0x16>
 8003616:	2302      	movs	r3, #2
 8003618:	e027      	b.n	800366a <HAL_UARTEx_DisableFifoMode+0x66>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	227c      	movs	r2, #124	; 0x7c
 800361e:	2101      	movs	r1, #1
 8003620:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2280      	movs	r2, #128	; 0x80
 8003626:	2124      	movs	r1, #36	; 0x24
 8003628:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	2101      	movs	r1, #1
 800363e:	438a      	bics	r2, r1
 8003640:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	4a0b      	ldr	r2, [pc, #44]	; (8003674 <HAL_UARTEx_DisableFifoMode+0x70>)
 8003646:	4013      	ands	r3, r2
 8003648:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2200      	movs	r2, #0
 800364e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	68fa      	ldr	r2, [r7, #12]
 8003656:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2280      	movs	r2, #128	; 0x80
 800365c:	2120      	movs	r1, #32
 800365e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	227c      	movs	r2, #124	; 0x7c
 8003664:	2100      	movs	r1, #0
 8003666:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003668:	2300      	movs	r3, #0
}
 800366a:	0018      	movs	r0, r3
 800366c:	46bd      	mov	sp, r7
 800366e:	b004      	add	sp, #16
 8003670:	bd80      	pop	{r7, pc}
 8003672:	46c0      	nop			; (mov r8, r8)
 8003674:	dfffffff 	.word	0xdfffffff

08003678 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b084      	sub	sp, #16
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
 8003680:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	227c      	movs	r2, #124	; 0x7c
 8003686:	5c9b      	ldrb	r3, [r3, r2]
 8003688:	2b01      	cmp	r3, #1
 800368a:	d101      	bne.n	8003690 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800368c:	2302      	movs	r3, #2
 800368e:	e02e      	b.n	80036ee <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	227c      	movs	r2, #124	; 0x7c
 8003694:	2101      	movs	r1, #1
 8003696:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2280      	movs	r2, #128	; 0x80
 800369c:	2124      	movs	r1, #36	; 0x24
 800369e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	2101      	movs	r1, #1
 80036b4:	438a      	bics	r2, r1
 80036b6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	00db      	lsls	r3, r3, #3
 80036c0:	08d9      	lsrs	r1, r3, #3
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	683a      	ldr	r2, [r7, #0]
 80036c8:	430a      	orrs	r2, r1
 80036ca:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	0018      	movs	r0, r3
 80036d0:	f000 f854 	bl	800377c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	68fa      	ldr	r2, [r7, #12]
 80036da:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2280      	movs	r2, #128	; 0x80
 80036e0:	2120      	movs	r1, #32
 80036e2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	227c      	movs	r2, #124	; 0x7c
 80036e8:	2100      	movs	r1, #0
 80036ea:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80036ec:	2300      	movs	r3, #0
}
 80036ee:	0018      	movs	r0, r3
 80036f0:	46bd      	mov	sp, r7
 80036f2:	b004      	add	sp, #16
 80036f4:	bd80      	pop	{r7, pc}
	...

080036f8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b084      	sub	sp, #16
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
 8003700:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	227c      	movs	r2, #124	; 0x7c
 8003706:	5c9b      	ldrb	r3, [r3, r2]
 8003708:	2b01      	cmp	r3, #1
 800370a:	d101      	bne.n	8003710 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800370c:	2302      	movs	r3, #2
 800370e:	e02f      	b.n	8003770 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	227c      	movs	r2, #124	; 0x7c
 8003714:	2101      	movs	r1, #1
 8003716:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2280      	movs	r2, #128	; 0x80
 800371c:	2124      	movs	r1, #36	; 0x24
 800371e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	681a      	ldr	r2, [r3, #0]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	2101      	movs	r1, #1
 8003734:	438a      	bics	r2, r1
 8003736:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	4a0e      	ldr	r2, [pc, #56]	; (8003778 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8003740:	4013      	ands	r3, r2
 8003742:	0019      	movs	r1, r3
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	683a      	ldr	r2, [r7, #0]
 800374a:	430a      	orrs	r2, r1
 800374c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	0018      	movs	r0, r3
 8003752:	f000 f813 	bl	800377c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	68fa      	ldr	r2, [r7, #12]
 800375c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2280      	movs	r2, #128	; 0x80
 8003762:	2120      	movs	r1, #32
 8003764:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	227c      	movs	r2, #124	; 0x7c
 800376a:	2100      	movs	r1, #0
 800376c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800376e:	2300      	movs	r3, #0
}
 8003770:	0018      	movs	r0, r3
 8003772:	46bd      	mov	sp, r7
 8003774:	b004      	add	sp, #16
 8003776:	bd80      	pop	{r7, pc}
 8003778:	f1ffffff 	.word	0xf1ffffff

0800377c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800377c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800377e:	b089      	sub	sp, #36	; 0x24
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8003784:	2314      	movs	r3, #20
 8003786:	18fb      	adds	r3, r7, r3
 8003788:	4a2f      	ldr	r2, [pc, #188]	; (8003848 <UARTEx_SetNbDataToProcess+0xcc>)
 800378a:	ca03      	ldmia	r2!, {r0, r1}
 800378c:	c303      	stmia	r3!, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800378e:	230c      	movs	r3, #12
 8003790:	18fb      	adds	r3, r7, r3
 8003792:	4a2e      	ldr	r2, [pc, #184]	; (800384c <UARTEx_SetNbDataToProcess+0xd0>)
 8003794:	ca03      	ldmia	r2!, {r0, r1}
 8003796:	c303      	stmia	r3!, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800379c:	2b00      	cmp	r3, #0
 800379e:	d108      	bne.n	80037b2 <UARTEx_SetNbDataToProcess+0x36>
  {
    huart->NbTxDataToProcess = 1U;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	226a      	movs	r2, #106	; 0x6a
 80037a4:	2101      	movs	r1, #1
 80037a6:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2268      	movs	r2, #104	; 0x68
 80037ac:	2101      	movs	r1, #1
 80037ae:	5299      	strh	r1, [r3, r2]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80037b0:	e046      	b.n	8003840 <UARTEx_SetNbDataToProcess+0xc4>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80037b2:	261f      	movs	r6, #31
 80037b4:	19bb      	adds	r3, r7, r6
 80037b6:	2208      	movs	r2, #8
 80037b8:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80037ba:	201e      	movs	r0, #30
 80037bc:	183b      	adds	r3, r7, r0
 80037be:	2208      	movs	r2, #8
 80037c0:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	0e5b      	lsrs	r3, r3, #25
 80037ca:	b2da      	uxtb	r2, r3
 80037cc:	241d      	movs	r4, #29
 80037ce:	193b      	adds	r3, r7, r4
 80037d0:	2107      	movs	r1, #7
 80037d2:	400a      	ands	r2, r1
 80037d4:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	689b      	ldr	r3, [r3, #8]
 80037dc:	0f5b      	lsrs	r3, r3, #29
 80037de:	b2da      	uxtb	r2, r3
 80037e0:	251c      	movs	r5, #28
 80037e2:	197b      	adds	r3, r7, r5
 80037e4:	2107      	movs	r1, #7
 80037e6:	400a      	ands	r2, r1
 80037e8:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 80037ea:	183b      	adds	r3, r7, r0
 80037ec:	781b      	ldrb	r3, [r3, #0]
 80037ee:	197a      	adds	r2, r7, r5
 80037f0:	7812      	ldrb	r2, [r2, #0]
 80037f2:	2114      	movs	r1, #20
 80037f4:	1879      	adds	r1, r7, r1
 80037f6:	5c8a      	ldrb	r2, [r1, r2]
 80037f8:	435a      	muls	r2, r3
 80037fa:	0010      	movs	r0, r2
 80037fc:	197b      	adds	r3, r7, r5
 80037fe:	781b      	ldrb	r3, [r3, #0]
 8003800:	250c      	movs	r5, #12
 8003802:	197a      	adds	r2, r7, r5
 8003804:	5cd3      	ldrb	r3, [r2, r3]
 8003806:	0019      	movs	r1, r3
 8003808:	f7fc fd04 	bl	8000214 <__divsi3>
 800380c:	0003      	movs	r3, r0
 800380e:	b299      	uxth	r1, r3
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	226a      	movs	r2, #106	; 0x6a
 8003814:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8003816:	19bb      	adds	r3, r7, r6
 8003818:	781b      	ldrb	r3, [r3, #0]
 800381a:	193a      	adds	r2, r7, r4
 800381c:	7812      	ldrb	r2, [r2, #0]
 800381e:	2114      	movs	r1, #20
 8003820:	1879      	adds	r1, r7, r1
 8003822:	5c8a      	ldrb	r2, [r1, r2]
 8003824:	435a      	muls	r2, r3
 8003826:	0010      	movs	r0, r2
 8003828:	193b      	adds	r3, r7, r4
 800382a:	781b      	ldrb	r3, [r3, #0]
 800382c:	197a      	adds	r2, r7, r5
 800382e:	5cd3      	ldrb	r3, [r2, r3]
 8003830:	0019      	movs	r1, r3
 8003832:	f7fc fcef 	bl	8000214 <__divsi3>
 8003836:	0003      	movs	r3, r0
 8003838:	b299      	uxth	r1, r3
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2268      	movs	r2, #104	; 0x68
 800383e:	5299      	strh	r1, [r3, r2]
}
 8003840:	46c0      	nop			; (mov r8, r8)
 8003842:	46bd      	mov	sp, r7
 8003844:	b009      	add	sp, #36	; 0x24
 8003846:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003848:	080038d4 	.word	0x080038d4
 800384c:	080038dc 	.word	0x080038dc

08003850 <__libc_init_array>:
 8003850:	b570      	push	{r4, r5, r6, lr}
 8003852:	2600      	movs	r6, #0
 8003854:	4d0c      	ldr	r5, [pc, #48]	; (8003888 <__libc_init_array+0x38>)
 8003856:	4c0d      	ldr	r4, [pc, #52]	; (800388c <__libc_init_array+0x3c>)
 8003858:	1b64      	subs	r4, r4, r5
 800385a:	10a4      	asrs	r4, r4, #2
 800385c:	42a6      	cmp	r6, r4
 800385e:	d109      	bne.n	8003874 <__libc_init_array+0x24>
 8003860:	2600      	movs	r6, #0
 8003862:	f000 f82b 	bl	80038bc <_init>
 8003866:	4d0a      	ldr	r5, [pc, #40]	; (8003890 <__libc_init_array+0x40>)
 8003868:	4c0a      	ldr	r4, [pc, #40]	; (8003894 <__libc_init_array+0x44>)
 800386a:	1b64      	subs	r4, r4, r5
 800386c:	10a4      	asrs	r4, r4, #2
 800386e:	42a6      	cmp	r6, r4
 8003870:	d105      	bne.n	800387e <__libc_init_array+0x2e>
 8003872:	bd70      	pop	{r4, r5, r6, pc}
 8003874:	00b3      	lsls	r3, r6, #2
 8003876:	58eb      	ldr	r3, [r5, r3]
 8003878:	4798      	blx	r3
 800387a:	3601      	adds	r6, #1
 800387c:	e7ee      	b.n	800385c <__libc_init_array+0xc>
 800387e:	00b3      	lsls	r3, r6, #2
 8003880:	58eb      	ldr	r3, [r5, r3]
 8003882:	4798      	blx	r3
 8003884:	3601      	adds	r6, #1
 8003886:	e7f2      	b.n	800386e <__libc_init_array+0x1e>
 8003888:	08003944 	.word	0x08003944
 800388c:	08003944 	.word	0x08003944
 8003890:	08003944 	.word	0x08003944
 8003894:	08003948 	.word	0x08003948

08003898 <memcpy>:
 8003898:	2300      	movs	r3, #0
 800389a:	b510      	push	{r4, lr}
 800389c:	429a      	cmp	r2, r3
 800389e:	d100      	bne.n	80038a2 <memcpy+0xa>
 80038a0:	bd10      	pop	{r4, pc}
 80038a2:	5ccc      	ldrb	r4, [r1, r3]
 80038a4:	54c4      	strb	r4, [r0, r3]
 80038a6:	3301      	adds	r3, #1
 80038a8:	e7f8      	b.n	800389c <memcpy+0x4>

080038aa <memset>:
 80038aa:	0003      	movs	r3, r0
 80038ac:	1812      	adds	r2, r2, r0
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d100      	bne.n	80038b4 <memset+0xa>
 80038b2:	4770      	bx	lr
 80038b4:	7019      	strb	r1, [r3, #0]
 80038b6:	3301      	adds	r3, #1
 80038b8:	e7f9      	b.n	80038ae <memset+0x4>
	...

080038bc <_init>:
 80038bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038be:	46c0      	nop			; (mov r8, r8)
 80038c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038c2:	bc08      	pop	{r3}
 80038c4:	469e      	mov	lr, r3
 80038c6:	4770      	bx	lr

080038c8 <_fini>:
 80038c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038ca:	46c0      	nop			; (mov r8, r8)
 80038cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038ce:	bc08      	pop	{r3}
 80038d0:	469e      	mov	lr, r3
 80038d2:	4770      	bx	lr
